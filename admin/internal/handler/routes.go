// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/dept"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/dict_item"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/dict_type"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/log"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/menu"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/post"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/role"
	sysupload "github.com/summmer-gonner/traffica/admin/internal/handler/sys/upload"
	"github.com/summmer-gonner/traffica/admin/internal/handler/sys/user"
	"github.com/summmer-gonner/traffica/admin/internal/svc"
	"github.com/zeromicro/go-zero/rest"
	"net/http"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDept",
					Handler: dept.AddDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDept",
					Handler: dept.DeleteDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptDetail",
					Handler: dept.QueryDeptDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptList",
					Handler: dept.QueryDeptListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDept",
					Handler: dept.UpdateDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDeptStatus",
					Handler: dept.UpdateDeptStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dept"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictItem",
					Handler: dict_item.AddDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictItem",
					Handler: dict_item.DeleteDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemDetail",
					Handler: dict_item.QueryDictItemDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemList",
					Handler: dict_item.QueryDictItemListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItem",
					Handler: dict_item.UpdateDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItemStatus",
					Handler: dict_item.UpdateDictItemStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictItem"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictType",
					Handler: dict_type.AddDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictType",
					Handler: dict_type.DeleteDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeDetail",
					Handler: dict_type.QueryDictTypeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeList",
					Handler: dict_type.QueryDictTypeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictType",
					Handler: dict_type.UpdateDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictTypeStatus",
					Handler: dict_type.UpdateDictTypeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictType"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteOperateLog",
					Handler: log.DeleteOperateLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogDetail",
					Handler: log.QueryOperateLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogList",
					Handler: log.QueryOperateLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteLoginLog",
					Handler: log.DeleteLoginLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogDetail",
					Handler: log.QueryLoginLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogList",
					Handler: log.QueryLoginLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryStatisticsLoginLog",
					Handler: log.QueryStatisticsLoginLogHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMenu",
					Handler: menu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMenu",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuDetail",
					Handler: menu.QueryMenuDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuList",
					Handler: menu.QueryMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenu",
					Handler: menu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenuStatus",
					Handler: menu.UpdateMenuStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPost",
					Handler: post.AddPostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePost",
					Handler: post.DeletePostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostDetail",
					Handler: post.QueryPostDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostList",
					Handler: post.QueryPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePost",
					Handler: post.UpdatePostHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePostStatus",
					Handler: post.UpdatePostStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/post"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addRole",
					Handler: role.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cancelAuthorization",
					Handler: role.CancelAuthorizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteRole",
					Handler: role.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleDetail",
					Handler: role.QueryRoleDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleList",
					Handler: role.QueryRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleMenuList",
					Handler: role.QueryRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleUserList",
					Handler: role.QueryRoleUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRole",
					Handler: role.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleMenuList",
					Handler: role.UpdateRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleStatus",
					Handler: role.UpdateRoleStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: sysupload.UploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addUser",
					Handler: user.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteUser",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: user.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptAndPostList",
					Handler: user.QueryDeptAndPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserDetail",
					Handler: user.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserList",
					Handler: user.QueryUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserRoleList",
					Handler: user.QueryUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reSetPassword",
					Handler: user.ReSetPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUser",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserRoleList",
					Handler: user.UpdateUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserStatus",
					Handler: user.UpdateUserStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
		},
	)
}

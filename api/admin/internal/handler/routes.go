// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	cmsprefrenceArea "github.com/feihua/zero-admin/api/admin/internal/handler/cms/prefrenceArea"
	cmssubject "github.com/feihua/zero-admin/api/admin/internal/handler/cms/subject"
	memberaddress "github.com/feihua/zero-admin/api/admin/internal/handler/member/address"
	memberintegrationconsumesetting "github.com/feihua/zero-admin/api/admin/internal/handler/member/integrationconsumesetting"
	memberlevel "github.com/feihua/zero-admin/api/admin/internal/handler/member/level"
	membermember "github.com/feihua/zero-admin/api/admin/internal/handler/member/member"
	memberrulesetting "github.com/feihua/zero-admin/api/admin/internal/handler/member/rulesetting"
	memberstatistics "github.com/feihua/zero-admin/api/admin/internal/handler/member/statistics"
	membertag "github.com/feihua/zero-admin/api/admin/internal/handler/member/tag"
	membertask "github.com/feihua/zero-admin/api/admin/internal/handler/member/task"
	ordercompanyaddress "github.com/feihua/zero-admin/api/admin/internal/handler/order/companyaddress"
	orderorder "github.com/feihua/zero-admin/api/admin/internal/handler/order/order"
	orderreturnapply "github.com/feihua/zero-admin/api/admin/internal/handler/order/returnapply"
	orderreturnreason "github.com/feihua/zero-admin/api/admin/internal/handler/order/returnreason"
	ordersetting "github.com/feihua/zero-admin/api/admin/internal/handler/order/setting"
	productattribute "github.com/feihua/zero-admin/api/admin/internal/handler/product/attribute"
	productattributecategory "github.com/feihua/zero-admin/api/admin/internal/handler/product/attributecategory"
	productbrand "github.com/feihua/zero-admin/api/admin/internal/handler/product/brand"
	productcategory "github.com/feihua/zero-admin/api/admin/internal/handler/product/category"
	productproduct "github.com/feihua/zero-admin/api/admin/internal/handler/product/product"
	productskustock "github.com/feihua/zero-admin/api/admin/internal/handler/product/skustock"
	smscoupon "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon"
	smscouponhistory "github.com/feihua/zero-admin/api/admin/internal/handler/sms/couponhistory"
	smsflashpromotion "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flashpromotion"
	smsflashpromotionlog "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flashpromotionlog"
	smsflashpromotionproductrelation "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flashpromotionproductrelation"
	smsflashpromotionsession "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flashpromotionsession"
	smshomeadvertise "github.com/feihua/zero-admin/api/admin/internal/handler/sms/homeadvertise"
	smshomebrand "github.com/feihua/zero-admin/api/admin/internal/handler/sms/homebrand"
	smshomenewproduct "github.com/feihua/zero-admin/api/admin/internal/handler/sms/homenewproduct"
	smshomerecommendproduct "github.com/feihua/zero-admin/api/admin/internal/handler/sms/homerecommendproduct"
	smshomerecommendsubject "github.com/feihua/zero-admin/api/admin/internal/handler/sms/homerecommendsubject"
	sysdept "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dept"
	sysdict_item "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dict_item"
	sysdict_type "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dict_type"
	syslog "github.com/feihua/zero-admin/api/admin/internal/handler/sys/log"
	sysmenu "github.com/feihua/zero-admin/api/admin/internal/handler/sys/menu"
	syspost "github.com/feihua/zero-admin/api/admin/internal/handler/sys/post"
	sysrole "github.com/feihua/zero-admin/api/admin/internal/handler/sys/role"
	sysupload "github.com/feihua/zero-admin/api/admin/internal/handler/sys/upload"
	sysuser "github.com/feihua/zero-admin/api/admin/internal/handler/sys/user"
	"github.com/feihua/zero-admin/api/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPreferredArea",
					Handler: cmsprefrenceArea.AddPreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePreferredArea",
					Handler: cmsprefrenceArea.DeletePreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPreferredAreaDetail",
					Handler: cmsprefrenceArea.QueryPreferredAreaDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPreferredAreaList",
					Handler: cmsprefrenceArea.QueryPreferredAreaListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePreferredArea",
					Handler: cmsprefrenceArea.UpdatePreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePreferredAreaStatus",
					Handler: cmsprefrenceArea.UpdatePreferredAreaStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/prefrenceArea"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSubject",
					Handler: cmssubject.AddSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSubject",
					Handler: cmssubject.DeleteSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectDetail",
					Handler: cmssubject.QuerySubjectDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectList",
					Handler: cmssubject.QuerySubjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubject",
					Handler: cmssubject.UpdateSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectStatus",
					Handler: cmssubject.UpdateSubjectStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/subject"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberAddressList",
					Handler: memberaddress.QueryMemberAddressListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addIntegrationConsumeSetting",
					Handler: memberintegrationconsumesetting.AddIntegrationConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteIntegrationConsumeSetting",
					Handler: memberintegrationconsumesetting.DeleteIntegrationConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryIntegrationConsumeSettingDetail",
					Handler: memberintegrationconsumesetting.QueryIntegrationConsumeSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryIntegrationConsumeSettingList",
					Handler: memberintegrationconsumesetting.QueryIntegrationConsumeSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateIntegrationConsumeSetting",
					Handler: memberintegrationconsumesetting.UpdateIntegrationConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateIntegrationConsumeSettingStatus",
					Handler: memberintegrationconsumesetting.UpdateIntegrationConsumeSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/integrationConsumeSetting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberLevel",
					Handler: memberlevel.AddMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberLevel",
					Handler: memberlevel.DeleteMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLevelDetail",
					Handler: memberlevel.QueryMemberLevelDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLevelList",
					Handler: memberlevel.QueryMemberLevelListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberLevel",
					Handler: memberlevel.UpdateMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberLevelStatus",
					Handler: memberlevel.UpdateMemberLevelStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/level"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteMember",
					Handler: membermember.DeleteMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryGrowthChangeHistoryList",
					Handler: membermember.QueryGrowthChangeHistoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryIntegrationChangeHistoryList",
					Handler: membermember.QueryIntegrationChangeHistoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberList",
					Handler: membermember.QueryMemberListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLoginLogList",
					Handler: membermember.QueryMemberLoginLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMember",
					Handler: membermember.UpdateMemberHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberRuleSetting",
					Handler: memberrulesetting.AddMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberRuleSetting",
					Handler: memberrulesetting.DeleteMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberRuleSettingDetail",
					Handler: memberrulesetting.QueryMemberRuleSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberRuleSettingList",
					Handler: memberrulesetting.QueryMemberRuleSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberRuleSetting",
					Handler: memberrulesetting.UpdateMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberRuleSettingStatus",
					Handler: memberrulesetting.UpdateMemberRuleSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/ruleSetting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberStatisticsInfoDetail",
					Handler: memberstatistics.QueryMemberStatisticsInfoDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberStatisticsInfoList",
					Handler: memberstatistics.QueryMemberStatisticsInfoListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/statistics"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberTag",
					Handler: membertag.AddMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberTag",
					Handler: membertag.DeleteMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTagDetail",
					Handler: membertag.QueryMemberTagDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTagList",
					Handler: membertag.QueryMemberTagListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTag",
					Handler: membertag.UpdateMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTagStatus",
					Handler: membertag.UpdateMemberTagStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/tag"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberTask",
					Handler: membertask.AddMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberTask",
					Handler: membertask.DeleteMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTaskDetail",
					Handler: membertask.QueryMemberTaskDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTaskList",
					Handler: membertask.QueryMemberTaskListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTask",
					Handler: membertask.UpdateMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTaskStatus",
					Handler: membertask.UpdateMemberTaskStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/task"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCompanyAddress",
					Handler: ordercompanyaddress.AddCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCompanyAddress",
					Handler: ordercompanyaddress.DeleteCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCompanyAddressDetail",
					Handler: ordercompanyaddress.QueryCompanyAddressDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCompanyAddressList",
					Handler: ordercompanyaddress.QueryCompanyAddressListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddress",
					Handler: ordercompanyaddress.UpdateCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddressReceiveStatus",
					Handler: ordercompanyaddress.UpdateCompanyAddressReceiveStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddressSendStatus",
					Handler: ordercompanyaddress.UpdateCompanyAddressSendStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order/companyAddress"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/closeOrder",
					Handler: orderorder.CloseOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrder",
					Handler: orderorder.OrderDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delivery",
					Handler: orderorder.DeliveryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/orderDetail",
					Handler: orderorder.OrderDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderList",
					Handler: orderorder.OrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMoneyInfo",
					Handler: orderorder.UpdateMoneyInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNote",
					Handler: orderorder.UpdateNoteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateReceiverInfo",
					Handler: orderorder.UpdateReceiverInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderReturnApply",
					Handler: orderreturnapply.DeleteOrderReturnApplyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnApplyDetail",
					Handler: orderreturnapply.QueryOrderReturnApplyDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnApplyList",
					Handler: orderreturnapply.QueryOrderReturnApplyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturnApplyStatus",
					Handler: orderreturnapply.UpdateOrderReturnApplyStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order/returnApply"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addOrderReturnReason",
					Handler: orderreturnreason.AddOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderReturnReason",
					Handler: orderreturnreason.DeleteOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnReasonDetail",
					Handler: orderreturnreason.QueryOrderReturnReasonDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnReasonList",
					Handler: orderreturnreason.QueryOrderReturnReasonListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturnReason",
					Handler: orderreturnreason.UpdateOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturnReasonStatus",
					Handler: orderreturnreason.UpdateOrderReturnReasonStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order/returnReason"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addOrderSetting",
					Handler: ordersetting.AddOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderSetting",
					Handler: ordersetting.DeleteOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderSettingDetail",
					Handler: ordersetting.QueryOrderSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderSettingList",
					Handler: ordersetting.QueryOrderSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSetting",
					Handler: ordersetting.UpdateOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSettingIsDefault",
					Handler: ordersetting.UpdateOrderSettingIsDefaultHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSettingStatus",
					Handler: ordersetting.UpdateOrderSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order/setting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductAttribute",
					Handler: productattribute.ProductAttributeAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductAttribute",
					Handler: productattribute.ProductAttributeDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryByproductCategoryId",
					Handler: productattribute.QueryByproductCategoryIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductAttributeList",
					Handler: productattribute.ProductAttributeListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product/attribute"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductAttributeCategory",
					Handler: productattributecategory.ProductAttributeCategoryAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductAttributeCategory",
					Handler: productattributecategory.ProductAttributeCategoryDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCategoryWithAttrList",
					Handler: productattributecategory.QueryCategoryWithAttrListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductAttributeCategoryList",
					Handler: productattributecategory.ProductAttributeCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductAttributeCategory",
					Handler: productattributecategory.ProductAttributeCategoryUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product/attributeCategory"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductBrand",
					Handler: productbrand.ProductBrandAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductBrand",
					Handler: productbrand.ProductBrandDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductBrandList",
					Handler: productbrand.ProductBrandListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateBrandFactoryStatus",
					Handler: productbrand.UpdateBrandFactoryStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateBrandShowStatus",
					Handler: productbrand.UpdateBrandShowStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductBrand",
					Handler: productbrand.ProductBrandUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product/brand"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductCategory",
					Handler: productcategory.ProductCategoryAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductCategory",
					Handler: productcategory.ProductCategoryDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductCategoryList",
					Handler: productcategory.ProductCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCategoryNavStatus",
					Handler: productcategory.UpdateCategoryNavStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCategoryShowStatus",
					Handler: productcategory.UpdateCategoryShowStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductCategory",
					Handler: productcategory.ProductCategoryUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product/category"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/updateDeleteStatus",
					Handler: productproduct.UpdateDeleteStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewStatus",
					Handler: productproduct.UpdateNewStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProduct",
					Handler: productproduct.ProductUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePublishStatus",
					Handler: productproduct.UpdatePublishStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendStatus",
					Handler: productproduct.UpdateRecommendStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateVerifyStatus",
					Handler: productproduct.UpdateVerifyStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProduct",
					Handler: productproduct.ProductAddHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryProductDetail",
					Handler: productproduct.QueryProductDetailHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryProductList",
					Handler: productproduct.QueryProductListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/querySkuStockList",
					Handler: productskustock.SkuStockListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSkuStock",
					Handler: productskustock.SkuStockUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/product/skuStock"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCoupon",
					Handler: smscoupon.CouponAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCoupon",
					Handler: smscoupon.CouponDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponDetail",
					Handler: smscoupon.CouponDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponList",
					Handler: smscoupon.CouponListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCoupon",
					Handler: smscoupon.CouponUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/coupon"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponHistoryList",
					Handler: smscouponhistory.CouponHistoryListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/couponHistory"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotion",
					Handler: smsflashpromotion.FlashPromotionAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotion",
					Handler: smsflashpromotion.FlashPromotionDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionList",
					Handler: smsflashpromotion.FlashPromotionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotion",
					Handler: smsflashpromotion.FlashPromotionUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotionStatus",
					Handler: smsflashpromotion.UpdateFlashPromotionStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotion"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotionLog",
					Handler: smsflashpromotionlog.FlashPromotionLogAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotionLog",
					Handler: smsflashpromotionlog.FlashPromotionLogDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionLogList",
					Handler: smsflashpromotionlog.FlashPromotionLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotionLog"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotionProductRelation",
					Handler: smsflashpromotionproductrelation.FlashPromotionProductRelationAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotionProductRelation",
					Handler: smsflashpromotionproductrelation.FlashPromotionProductRelationDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionProductRelationList",
					Handler: smsflashpromotionproductrelation.FlashPromotionProductRelationListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotionProductRelation",
					Handler: smsflashpromotionproductrelation.FlashPromotionProductRelationUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotionProductRelation"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotionSession",
					Handler: smsflashpromotionsession.FlashPromotionSessionAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotionSession",
					Handler: smsflashpromotionsession.FlashPromotionSessionDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionSessionList",
					Handler: smsflashpromotionsession.FlashPromotionSessionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotionSession",
					Handler: smsflashpromotionsession.FlashPromotionSessionUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSessionStatus",
					Handler: smsflashpromotionsession.UpdateFlashPromotionSessionStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotionSession"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeAdvertise",
					Handler: smshomeadvertise.HomeAdvertiseAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeAdvertise",
					Handler: smshomeadvertise.HomeAdvertiseDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeAdvertiseList",
					Handler: smshomeadvertise.HomeAdvertiseListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeAdvertise",
					Handler: smshomeadvertise.HomeAdvertiseUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeAdvertiseStatus",
					Handler: smshomeadvertise.UpdateHomeAdvertiseStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeAdvertise"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeBrand",
					Handler: smshomebrand.HomeBrandAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeBrand",
					Handler: smshomebrand.HomeBrandDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeBrandList",
					Handler: smshomebrand.HomeBrandListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeBrandSort",
					Handler: smshomebrand.UpdateHomeBrandSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeBrandStatus",
					Handler: smshomebrand.UpdateHomeBrandStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeBrand"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeNewProduct",
					Handler: smshomenewproduct.HomeNewProductAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeNewProduct",
					Handler: smshomenewproduct.HomeNewProductDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeNewProductList",
					Handler: smshomenewproduct.HomeNewProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewProductSort",
					Handler: smshomenewproduct.UpdateNewProductSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewProductStatus",
					Handler: smshomenewproduct.UpdateNewProductStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeNewProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeRecommendProduct",
					Handler: smshomerecommendproduct.HomeRecommendProductAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeRecommendProduct",
					Handler: smshomerecommendproduct.HomeRecommendProductDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeRecommendProductList",
					Handler: smshomerecommendproduct.HomeRecommendProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendProductSort",
					Handler: smshomerecommendproduct.UpdateRecommendProductSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendProductStatus",
					Handler: smshomerecommendproduct.UpdateRecommendProductStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeRecommendProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeRecommendSubject",
					Handler: smshomerecommendsubject.HomeRecommendSubjectAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeRecommendSubject",
					Handler: smshomerecommendsubject.HomeRecommendSubjectDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeRecommendSubjectList",
					Handler: smshomerecommendsubject.HomeRecommendSubjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendSubjectSort",
					Handler: smshomerecommendsubject.UpdateRecommendSubjectSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendSubjectStatus",
					Handler: smshomerecommendsubject.UpdateRecommendSubjectStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeRecommendSubject"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDept",
					Handler: sysdept.AddDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDept",
					Handler: sysdept.DeleteDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptDetail",
					Handler: sysdept.QueryDeptDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptList",
					Handler: sysdept.QueryDeptListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDept",
					Handler: sysdept.UpdateDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDeptStatus",
					Handler: sysdept.UpdateDeptStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dept"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictItem",
					Handler: sysdict_item.AddDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictItem",
					Handler: sysdict_item.DeleteDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemDetail",
					Handler: sysdict_item.QueryDictItemDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemList",
					Handler: sysdict_item.QueryDictItemListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItem",
					Handler: sysdict_item.UpdateDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItemStatus",
					Handler: sysdict_item.UpdateDictItemStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictItem"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictType",
					Handler: sysdict_type.AddDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictType",
					Handler: sysdict_type.DeleteDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeDetail",
					Handler: sysdict_type.QueryDictTypeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeList",
					Handler: sysdict_type.QueryDictTypeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictType",
					Handler: sysdict_type.UpdateDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictTypeStatus",
					Handler: sysdict_type.UpdateDictTypeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictType"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteOperateLog",
					Handler: syslog.DeleteOperateLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogDetail",
					Handler: syslog.QueryOperateLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogList",
					Handler: syslog.QueryOperateLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteLoginLog",
					Handler: syslog.DeleteLoginLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogDetail",
					Handler: syslog.QueryLoginLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogList",
					Handler: syslog.QueryLoginLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryStatisticsLoginLog",
					Handler: syslog.QueryStatisticsLoginLogHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMenu",
					Handler: sysmenu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMenu",
					Handler: sysmenu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuDetail",
					Handler: sysmenu.QueryMenuDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuList",
					Handler: sysmenu.QueryMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenu",
					Handler: sysmenu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenuStatus",
					Handler: sysmenu.UpdateMenuStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPost",
					Handler: syspost.AddPostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePost",
					Handler: syspost.DeletePostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostDetail",
					Handler: syspost.QueryPostDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostList",
					Handler: syspost.QueryPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePost",
					Handler: syspost.UpdatePostHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePostStatus",
					Handler: syspost.UpdatePostStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/post"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addRole",
					Handler: sysrole.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cancelAuthorization",
					Handler: sysrole.CancelAuthorizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteRole",
					Handler: sysrole.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleDetail",
					Handler: sysrole.QueryRoleDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleList",
					Handler: sysrole.QueryRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleMenuList",
					Handler: sysrole.QueryRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleUserList",
					Handler: sysrole.QueryRoleUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRole",
					Handler: sysrole.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleMenuList",
					Handler: sysrole.UpdateRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleStatus",
					Handler: sysrole.UpdateRoleStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: sysupload.UploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addUser",
					Handler: sysuser.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteUser",
					Handler: sysuser.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: sysuser.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptAndPostList",
					Handler: sysuser.QueryDeptAndPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserDetail",
					Handler: sysuser.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserList",
					Handler: sysuser.QueryUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserRoleList",
					Handler: sysuser.QueryUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reSetPassword",
					Handler: sysuser.ReSetPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUser",
					Handler: sysuser.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserRoleList",
					Handler: sysuser.UpdateUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserStatus",
					Handler: sysuser.UpdateUserStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/login",
				Handler: sysuser.UserLoginHandler(serverCtx),
			},
		},
	)
}

// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	brand "github.com/feihua/zero-admin/api/front/internal/handler/brand"
	cart "github.com/feihua/zero-admin/api/front/internal/handler/cart"
	category "github.com/feihua/zero-admin/api/front/internal/handler/category"
	collection "github.com/feihua/zero-admin/api/front/internal/handler/collection"
	history "github.com/feihua/zero-admin/api/front/internal/handler/history"
	home "github.com/feihua/zero-admin/api/front/internal/handler/home"
	memberaddress "github.com/feihua/zero-admin/api/front/internal/handler/member/address"
	memberattention "github.com/feihua/zero-admin/api/front/internal/handler/member/attention"
	membercoupon "github.com/feihua/zero-admin/api/front/internal/handler/member/coupon"
	membermember "github.com/feihua/zero-admin/api/front/internal/handler/member/member"
	order "github.com/feihua/zero-admin/api/front/internal/handler/order"
	product "github.com/feihua/zero-admin/api/front/internal/handler/product"
	"github.com/feihua/zero-admin/api/front/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/queryBrandList",
				Handler: brand.QueryBrandListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryBrandProductList",
				Handler: brand.QueryBrandProductListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/brand"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: cart.CartItemAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/clear",
				Handler: cart.CarItemClearHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: cart.CartItemDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: cart.CarItemListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/product/:productId",
				Handler: cart.CartProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/promotionList",
				Handler: cart.CarItemtListPromotionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateAttr",
				Handler: cart.CartUpdateAttrHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateQuantity",
				Handler: cart.CartUpdateQuantityHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cart"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/queryProductCateListById",
				Handler: category.QueryProductCateListByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryProductCateTreeList",
				Handler: category.QueryProductCateTreeListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/category"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addProductCollection",
				Handler: collection.AddProductCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteProductCollection",
				Handler: collection.DeleteProductCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryProductCollectionList",
				Handler: collection.QueryProductCollectionListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/collection"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addReadHistory",
				Handler: history.AddReadHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteReadHistory",
				Handler: history.DeleteReadHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryReadHistoryList",
				Handler: history.QueryReadHistoryListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/history"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/index",
				Handler: home.IndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/querySubjectList",
				Handler: home.QuerySubjectListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommendBrandList",
				Handler: home.RecommendBrandListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommendHotProductList",
				Handler: home.RecommendHotProductListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommendNewProductList",
				Handler: home.RecommendNewProductListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommendProductList",
				Handler: home.RecommendProductListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/home"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addMemberAddress",
				Handler: memberaddress.AddMemberAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteMemberAddress",
				Handler: memberaddress.DeleteMemberAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryMemberAddressList",
				Handler: memberaddress.QueryMemberAddressListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateMemberAddress",
				Handler: memberaddress.UpdateMemberAddressHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/address"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addAttention",
				Handler: memberattention.AddAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteAttention",
				Handler: memberattention.DeleteAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryAttentionList",
				Handler: memberattention.QueryAttentionListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/attention"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addCoupon",
				Handler: membercoupon.AddCouponHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCouponHistoryList",
				Handler: membercoupon.QueryCouponHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCouponList",
				Handler: membercoupon.QueryCouponListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCouponListByCart",
				Handler: membercoupon.QueryCouponListByCartHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCouponListByProductId",
				Handler: membercoupon.QueryCouponListByProductIdHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/coupon"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: membermember.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: membermember.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: membermember.InfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateMember",
				Handler: membermember.UpdateMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatePassword",
				Handler: membermember.UpdatePasswordHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/cancelUserOrder",
				Handler: order.CancelUserOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/confirmReceiveOrder",
				Handler: order.ConfirmReceiveOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteOrder",
				Handler: order.DeleteOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/generateConfirmOrder",
				Handler: order.GenerateConfirmOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/generateOrder",
				Handler: order.GenerateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orderDetail",
				Handler: order.OrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orderList",
				Handler: order.OrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/payCallback",
				Handler: order.PayCallbackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/returnApply",
				Handler: order.ReturnApplyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderPay",
				Handler: order.OrderPayHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orderPayQuery/:orderId",
				Handler: order.OrderPayQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pay"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/notify",
				Handler: order.NotifyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/pay"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/queryProduct",
				Handler: product.QueryProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryProductList",
				Handler: product.QueryProductListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/product"),
	)
}

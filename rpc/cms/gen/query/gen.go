// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                               = new(Query)
	CmsHelp                         *cmsHelp
	CmsHelpCategory                 *cmsHelpCategory
	CmsMemberReport                 *cmsMemberReport
	CmsPreferredArea                *cmsPreferredArea
	CmsPreferredAreaProductRelation *cmsPreferredAreaProductRelation
	CmsSubject                      *cmsSubject
	CmsSubjectCategory              *cmsSubjectCategory
	CmsSubjectComment               *cmsSubjectComment
	CmsSubjectProductRelation       *cmsSubjectProductRelation
	CmsTopic                        *cmsTopic
	CmsTopicCategory                *cmsTopicCategory
	CmsTopicComment                 *cmsTopicComment
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CmsHelp = &Q.CmsHelp
	CmsHelpCategory = &Q.CmsHelpCategory
	CmsMemberReport = &Q.CmsMemberReport
	CmsPreferredArea = &Q.CmsPreferredArea
	CmsPreferredAreaProductRelation = &Q.CmsPreferredAreaProductRelation
	CmsSubject = &Q.CmsSubject
	CmsSubjectCategory = &Q.CmsSubjectCategory
	CmsSubjectComment = &Q.CmsSubjectComment
	CmsSubjectProductRelation = &Q.CmsSubjectProductRelation
	CmsTopic = &Q.CmsTopic
	CmsTopicCategory = &Q.CmsTopicCategory
	CmsTopicComment = &Q.CmsTopicComment
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                              db,
		CmsHelp:                         newCmsHelp(db, opts...),
		CmsHelpCategory:                 newCmsHelpCategory(db, opts...),
		CmsMemberReport:                 newCmsMemberReport(db, opts...),
		CmsPreferredArea:                newCmsPreferredArea(db, opts...),
		CmsPreferredAreaProductRelation: newCmsPreferredAreaProductRelation(db, opts...),
		CmsSubject:                      newCmsSubject(db, opts...),
		CmsSubjectCategory:              newCmsSubjectCategory(db, opts...),
		CmsSubjectComment:               newCmsSubjectComment(db, opts...),
		CmsSubjectProductRelation:       newCmsSubjectProductRelation(db, opts...),
		CmsTopic:                        newCmsTopic(db, opts...),
		CmsTopicCategory:                newCmsTopicCategory(db, opts...),
		CmsTopicComment:                 newCmsTopicComment(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CmsHelp                         cmsHelp
	CmsHelpCategory                 cmsHelpCategory
	CmsMemberReport                 cmsMemberReport
	CmsPreferredArea                cmsPreferredArea
	CmsPreferredAreaProductRelation cmsPreferredAreaProductRelation
	CmsSubject                      cmsSubject
	CmsSubjectCategory              cmsSubjectCategory
	CmsSubjectComment               cmsSubjectComment
	CmsSubjectProductRelation       cmsSubjectProductRelation
	CmsTopic                        cmsTopic
	CmsTopicCategory                cmsTopicCategory
	CmsTopicComment                 cmsTopicComment
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                              db,
		CmsHelp:                         q.CmsHelp.clone(db),
		CmsHelpCategory:                 q.CmsHelpCategory.clone(db),
		CmsMemberReport:                 q.CmsMemberReport.clone(db),
		CmsPreferredArea:                q.CmsPreferredArea.clone(db),
		CmsPreferredAreaProductRelation: q.CmsPreferredAreaProductRelation.clone(db),
		CmsSubject:                      q.CmsSubject.clone(db),
		CmsSubjectCategory:              q.CmsSubjectCategory.clone(db),
		CmsSubjectComment:               q.CmsSubjectComment.clone(db),
		CmsSubjectProductRelation:       q.CmsSubjectProductRelation.clone(db),
		CmsTopic:                        q.CmsTopic.clone(db),
		CmsTopicCategory:                q.CmsTopicCategory.clone(db),
		CmsTopicComment:                 q.CmsTopicComment.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                              db,
		CmsHelp:                         q.CmsHelp.replaceDB(db),
		CmsHelpCategory:                 q.CmsHelpCategory.replaceDB(db),
		CmsMemberReport:                 q.CmsMemberReport.replaceDB(db),
		CmsPreferredArea:                q.CmsPreferredArea.replaceDB(db),
		CmsPreferredAreaProductRelation: q.CmsPreferredAreaProductRelation.replaceDB(db),
		CmsSubject:                      q.CmsSubject.replaceDB(db),
		CmsSubjectCategory:              q.CmsSubjectCategory.replaceDB(db),
		CmsSubjectComment:               q.CmsSubjectComment.replaceDB(db),
		CmsSubjectProductRelation:       q.CmsSubjectProductRelation.replaceDB(db),
		CmsTopic:                        q.CmsTopic.replaceDB(db),
		CmsTopicCategory:                q.CmsTopicCategory.replaceDB(db),
		CmsTopicComment:                 q.CmsTopicComment.replaceDB(db),
	}
}

type queryCtx struct {
	CmsHelp                         ICmsHelpDo
	CmsHelpCategory                 ICmsHelpCategoryDo
	CmsMemberReport                 ICmsMemberReportDo
	CmsPreferredArea                ICmsPreferredAreaDo
	CmsPreferredAreaProductRelation ICmsPreferredAreaProductRelationDo
	CmsSubject                      ICmsSubjectDo
	CmsSubjectCategory              ICmsSubjectCategoryDo
	CmsSubjectComment               ICmsSubjectCommentDo
	CmsSubjectProductRelation       ICmsSubjectProductRelationDo
	CmsTopic                        ICmsTopicDo
	CmsTopicCategory                ICmsTopicCategoryDo
	CmsTopicComment                 ICmsTopicCommentDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CmsHelp:                         q.CmsHelp.WithContext(ctx),
		CmsHelpCategory:                 q.CmsHelpCategory.WithContext(ctx),
		CmsMemberReport:                 q.CmsMemberReport.WithContext(ctx),
		CmsPreferredArea:                q.CmsPreferredArea.WithContext(ctx),
		CmsPreferredAreaProductRelation: q.CmsPreferredAreaProductRelation.WithContext(ctx),
		CmsSubject:                      q.CmsSubject.WithContext(ctx),
		CmsSubjectCategory:              q.CmsSubjectCategory.WithContext(ctx),
		CmsSubjectComment:               q.CmsSubjectComment.WithContext(ctx),
		CmsSubjectProductRelation:       q.CmsSubjectProductRelation.WithContext(ctx),
		CmsTopic:                        q.CmsTopic.WithContext(ctx),
		CmsTopicCategory:                q.CmsTopicCategory.WithContext(ctx),
		CmsTopicComment:                 q.CmsTopicComment.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

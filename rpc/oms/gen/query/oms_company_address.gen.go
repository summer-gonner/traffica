// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsCompanyAddress(db *gorm.DB, opts ...gen.DOOption) omsCompanyAddress {
	_omsCompanyAddress := omsCompanyAddress{}

	_omsCompanyAddress.omsCompanyAddressDo.UseDB(db, opts...)
	_omsCompanyAddress.omsCompanyAddressDo.UseModel(&model.OmsCompanyAddress{})

	tableName := _omsCompanyAddress.omsCompanyAddressDo.TableName()
	_omsCompanyAddress.ALL = field.NewAsterisk(tableName)
	_omsCompanyAddress.ID = field.NewInt64(tableName, "id")
	_omsCompanyAddress.AddressName = field.NewString(tableName, "address_name")
	_omsCompanyAddress.SendStatus = field.NewInt32(tableName, "send_status")
	_omsCompanyAddress.ReceiveStatus = field.NewInt32(tableName, "receive_status")
	_omsCompanyAddress.Name = field.NewString(tableName, "name")
	_omsCompanyAddress.Phone = field.NewString(tableName, "phone")
	_omsCompanyAddress.Province = field.NewString(tableName, "province")
	_omsCompanyAddress.City = field.NewString(tableName, "city")
	_omsCompanyAddress.Region = field.NewString(tableName, "region")
	_omsCompanyAddress.DetailAddress = field.NewString(tableName, "detail_address")
	_omsCompanyAddress.CreateBy = field.NewString(tableName, "create_by")
	_omsCompanyAddress.CreateTime = field.NewTime(tableName, "create_time")
	_omsCompanyAddress.UpdateBy = field.NewString(tableName, "update_by")
	_omsCompanyAddress.UpdateTime = field.NewTime(tableName, "update_time")

	_omsCompanyAddress.fillFieldMap()

	return _omsCompanyAddress
}

// omsCompanyAddress 公司收发货地址表
type omsCompanyAddress struct {
	omsCompanyAddressDo omsCompanyAddressDo

	ALL           field.Asterisk
	ID            field.Int64
	AddressName   field.String // 地址名称
	SendStatus    field.Int32  // 默认发货地址：0->否；1->是
	ReceiveStatus field.Int32  // 是否默认收货地址：0->否；1->是
	Name          field.String // 收发货人姓名
	Phone         field.String // 收货人电话
	Province      field.String // 省/直辖市
	City          field.String // 市
	Region        field.String // 区
	DetailAddress field.String // 详细地址
	CreateBy      field.String // 创建者
	CreateTime    field.Time   // 创建时间
	UpdateBy      field.String // 更新者
	UpdateTime    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (o omsCompanyAddress) Table(newTableName string) *omsCompanyAddress {
	o.omsCompanyAddressDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsCompanyAddress) As(alias string) *omsCompanyAddress {
	o.omsCompanyAddressDo.DO = *(o.omsCompanyAddressDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsCompanyAddress) updateTableName(table string) *omsCompanyAddress {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.AddressName = field.NewString(table, "address_name")
	o.SendStatus = field.NewInt32(table, "send_status")
	o.ReceiveStatus = field.NewInt32(table, "receive_status")
	o.Name = field.NewString(table, "name")
	o.Phone = field.NewString(table, "phone")
	o.Province = field.NewString(table, "province")
	o.City = field.NewString(table, "city")
	o.Region = field.NewString(table, "region")
	o.DetailAddress = field.NewString(table, "detail_address")
	o.CreateBy = field.NewString(table, "create_by")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateBy = field.NewString(table, "update_by")
	o.UpdateTime = field.NewTime(table, "update_time")

	o.fillFieldMap()

	return o
}

func (o *omsCompanyAddress) WithContext(ctx context.Context) IOmsCompanyAddressDo {
	return o.omsCompanyAddressDo.WithContext(ctx)
}

func (o omsCompanyAddress) TableName() string { return o.omsCompanyAddressDo.TableName() }

func (o omsCompanyAddress) Alias() string { return o.omsCompanyAddressDo.Alias() }

func (o omsCompanyAddress) Columns(cols ...field.Expr) gen.Columns {
	return o.omsCompanyAddressDo.Columns(cols...)
}

func (o *omsCompanyAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsCompanyAddress) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["address_name"] = o.AddressName
	o.fieldMap["send_status"] = o.SendStatus
	o.fieldMap["receive_status"] = o.ReceiveStatus
	o.fieldMap["name"] = o.Name
	o.fieldMap["phone"] = o.Phone
	o.fieldMap["province"] = o.Province
	o.fieldMap["city"] = o.City
	o.fieldMap["region"] = o.Region
	o.fieldMap["detail_address"] = o.DetailAddress
	o.fieldMap["create_by"] = o.CreateBy
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_by"] = o.UpdateBy
	o.fieldMap["update_time"] = o.UpdateTime
}

func (o omsCompanyAddress) clone(db *gorm.DB) omsCompanyAddress {
	o.omsCompanyAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsCompanyAddress) replaceDB(db *gorm.DB) omsCompanyAddress {
	o.omsCompanyAddressDo.ReplaceDB(db)
	return o
}

type omsCompanyAddressDo struct{ gen.DO }

type IOmsCompanyAddressDo interface {
	gen.SubQuery
	Debug() IOmsCompanyAddressDo
	WithContext(ctx context.Context) IOmsCompanyAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsCompanyAddressDo
	WriteDB() IOmsCompanyAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsCompanyAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsCompanyAddressDo
	Not(conds ...gen.Condition) IOmsCompanyAddressDo
	Or(conds ...gen.Condition) IOmsCompanyAddressDo
	Select(conds ...field.Expr) IOmsCompanyAddressDo
	Where(conds ...gen.Condition) IOmsCompanyAddressDo
	Order(conds ...field.Expr) IOmsCompanyAddressDo
	Distinct(cols ...field.Expr) IOmsCompanyAddressDo
	Omit(cols ...field.Expr) IOmsCompanyAddressDo
	Join(table schema.Tabler, on ...field.Expr) IOmsCompanyAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsCompanyAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsCompanyAddressDo
	Group(cols ...field.Expr) IOmsCompanyAddressDo
	Having(conds ...gen.Condition) IOmsCompanyAddressDo
	Limit(limit int) IOmsCompanyAddressDo
	Offset(offset int) IOmsCompanyAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsCompanyAddressDo
	Unscoped() IOmsCompanyAddressDo
	Create(values ...*model.OmsCompanyAddress) error
	CreateInBatches(values []*model.OmsCompanyAddress, batchSize int) error
	Save(values ...*model.OmsCompanyAddress) error
	First() (*model.OmsCompanyAddress, error)
	Take() (*model.OmsCompanyAddress, error)
	Last() (*model.OmsCompanyAddress, error)
	Find() ([]*model.OmsCompanyAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsCompanyAddress, err error)
	FindInBatches(result *[]*model.OmsCompanyAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsCompanyAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsCompanyAddressDo
	Assign(attrs ...field.AssignExpr) IOmsCompanyAddressDo
	Joins(fields ...field.RelationField) IOmsCompanyAddressDo
	Preload(fields ...field.RelationField) IOmsCompanyAddressDo
	FirstOrInit() (*model.OmsCompanyAddress, error)
	FirstOrCreate() (*model.OmsCompanyAddress, error)
	FindByPage(offset int, limit int) (result []*model.OmsCompanyAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsCompanyAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsCompanyAddressDo) Debug() IOmsCompanyAddressDo {
	return o.withDO(o.DO.Debug())
}

func (o omsCompanyAddressDo) WithContext(ctx context.Context) IOmsCompanyAddressDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsCompanyAddressDo) ReadDB() IOmsCompanyAddressDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsCompanyAddressDo) WriteDB() IOmsCompanyAddressDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsCompanyAddressDo) Session(config *gorm.Session) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsCompanyAddressDo) Clauses(conds ...clause.Expression) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsCompanyAddressDo) Returning(value interface{}, columns ...string) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsCompanyAddressDo) Not(conds ...gen.Condition) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsCompanyAddressDo) Or(conds ...gen.Condition) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsCompanyAddressDo) Select(conds ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsCompanyAddressDo) Where(conds ...gen.Condition) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsCompanyAddressDo) Order(conds ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsCompanyAddressDo) Distinct(cols ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsCompanyAddressDo) Omit(cols ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsCompanyAddressDo) Join(table schema.Tabler, on ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsCompanyAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsCompanyAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsCompanyAddressDo) Group(cols ...field.Expr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsCompanyAddressDo) Having(conds ...gen.Condition) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsCompanyAddressDo) Limit(limit int) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsCompanyAddressDo) Offset(offset int) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsCompanyAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsCompanyAddressDo) Unscoped() IOmsCompanyAddressDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsCompanyAddressDo) Create(values ...*model.OmsCompanyAddress) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsCompanyAddressDo) CreateInBatches(values []*model.OmsCompanyAddress, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsCompanyAddressDo) Save(values ...*model.OmsCompanyAddress) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsCompanyAddressDo) First() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) Take() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) Last() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) Find() ([]*model.OmsCompanyAddress, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsCompanyAddress), err
}

func (o omsCompanyAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsCompanyAddress, err error) {
	buf := make([]*model.OmsCompanyAddress, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsCompanyAddressDo) FindInBatches(result *[]*model.OmsCompanyAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsCompanyAddressDo) Attrs(attrs ...field.AssignExpr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsCompanyAddressDo) Assign(attrs ...field.AssignExpr) IOmsCompanyAddressDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsCompanyAddressDo) Joins(fields ...field.RelationField) IOmsCompanyAddressDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsCompanyAddressDo) Preload(fields ...field.RelationField) IOmsCompanyAddressDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsCompanyAddressDo) FirstOrInit() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) FirstOrCreate() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) FindByPage(offset int, limit int) (result []*model.OmsCompanyAddress, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsCompanyAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsCompanyAddressDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsCompanyAddressDo) Delete(models ...*model.OmsCompanyAddress) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsCompanyAddressDo) withDO(do gen.Dao) *omsCompanyAddressDo {
	o.DO = *do.(*gen.DO)
	return o
}

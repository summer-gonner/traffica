// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrder(db *gorm.DB, opts ...gen.DOOption) omsOrder {
	_omsOrder := omsOrder{}

	_omsOrder.omsOrderDo.UseDB(db, opts...)
	_omsOrder.omsOrderDo.UseModel(&model.OmsOrder{})

	tableName := _omsOrder.omsOrderDo.TableName()
	_omsOrder.ALL = field.NewAsterisk(tableName)
	_omsOrder.ID = field.NewInt64(tableName, "id")
	_omsOrder.MemberID = field.NewInt64(tableName, "member_id")
	_omsOrder.CouponID = field.NewInt64(tableName, "coupon_id")
	_omsOrder.OrderSn = field.NewString(tableName, "order_sn")
	_omsOrder.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrder.MemberUsername = field.NewString(tableName, "member_username")
	_omsOrder.TotalAmount = field.NewInt64(tableName, "total_amount")
	_omsOrder.PayAmount = field.NewInt64(tableName, "pay_amount")
	_omsOrder.FreightAmount = field.NewInt64(tableName, "freight_amount")
	_omsOrder.PromotionAmount = field.NewInt64(tableName, "promotion_amount")
	_omsOrder.IntegrationAmount = field.NewInt64(tableName, "integration_amount")
	_omsOrder.CouponAmount = field.NewInt64(tableName, "coupon_amount")
	_omsOrder.DiscountAmount = field.NewInt64(tableName, "discount_amount")
	_omsOrder.PayType = field.NewInt32(tableName, "pay_type")
	_omsOrder.SourceType = field.NewInt32(tableName, "source_type")
	_omsOrder.Status = field.NewInt32(tableName, "status")
	_omsOrder.OrderType = field.NewInt32(tableName, "order_type")
	_omsOrder.DeliveryCompany = field.NewString(tableName, "delivery_company")
	_omsOrder.DeliverySn = field.NewString(tableName, "delivery_sn")
	_omsOrder.AutoConfirmDay = field.NewInt32(tableName, "auto_confirm_day")
	_omsOrder.Integration = field.NewInt32(tableName, "integration")
	_omsOrder.Growth = field.NewInt32(tableName, "growth")
	_omsOrder.PromotionInfo = field.NewString(tableName, "promotion_info")
	_omsOrder.BillType = field.NewInt32(tableName, "bill_type")
	_omsOrder.BillHeader = field.NewString(tableName, "bill_header")
	_omsOrder.BillContent = field.NewString(tableName, "bill_content")
	_omsOrder.BillReceiverPhone = field.NewString(tableName, "bill_receiver_phone")
	_omsOrder.BillReceiverEmail = field.NewString(tableName, "bill_receiver_email")
	_omsOrder.ReceiverName = field.NewString(tableName, "receiver_name")
	_omsOrder.ReceiverPhone = field.NewString(tableName, "receiver_phone")
	_omsOrder.ReceiverPostCode = field.NewString(tableName, "receiver_post_code")
	_omsOrder.ReceiverProvince = field.NewString(tableName, "receiver_province")
	_omsOrder.ReceiverCity = field.NewString(tableName, "receiver_city")
	_omsOrder.ReceiverRegion = field.NewString(tableName, "receiver_region")
	_omsOrder.ReceiverDetailAddress = field.NewString(tableName, "receiver_detail_address")
	_omsOrder.Note = field.NewString(tableName, "note")
	_omsOrder.ConfirmStatus = field.NewInt32(tableName, "confirm_status")
	_omsOrder.DeleteStatus = field.NewInt32(tableName, "delete_status")
	_omsOrder.UseIntegration = field.NewInt32(tableName, "use_integration")
	_omsOrder.PaymentTime = field.NewTime(tableName, "payment_time")
	_omsOrder.DeliveryTime = field.NewTime(tableName, "delivery_time")
	_omsOrder.ReceiveTime = field.NewTime(tableName, "receive_time")
	_omsOrder.CommentTime = field.NewTime(tableName, "comment_time")
	_omsOrder.ModifyTime = field.NewTime(tableName, "modify_time")

	_omsOrder.fillFieldMap()

	return _omsOrder
}

// omsOrder 订单表
type omsOrder struct {
	omsOrderDo omsOrderDo

	ALL                   field.Asterisk
	ID                    field.Int64  // 订单id
	MemberID              field.Int64  // 会员id
	CouponID              field.Int64  // 优惠券id
	OrderSn               field.String // 订单编号
	CreateTime            field.Time   // 提交时间
	MemberUsername        field.String // 用户帐号
	TotalAmount           field.Int64  // 订单总金额
	PayAmount             field.Int64  // 应付金额（实际支付金额）
	FreightAmount         field.Int64  // 运费金额
	PromotionAmount       field.Int64  // 促销优化金额（促销价、满减、阶梯价）
	IntegrationAmount     field.Int64  // 积分抵扣金额
	CouponAmount          field.Int64  // 优惠券抵扣金额
	DiscountAmount        field.Int64  // 管理员后台调整订单使用的折扣金额
	PayType               field.Int32  // 支付方式：0->未支付；1->支付宝；2->微信
	SourceType            field.Int32  // 订单来源：0->PC订单；1->app订单
	Status                field.Int32  // 订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单
	OrderType             field.Int32  // 订单类型：0->正常订单；1->秒杀订单
	DeliveryCompany       field.String // 物流公司(配送方式)
	DeliverySn            field.String // 物流单号
	AutoConfirmDay        field.Int32  // 自动确认时间（天）
	Integration           field.Int32  // 可以获得的积分
	Growth                field.Int32  // 可以活动的成长值
	PromotionInfo         field.String // 活动信息
	BillType              field.Int32  // 发票类型：0->不开发票；1->电子发票；2->纸质发票
	BillHeader            field.String // 发票抬头
	BillContent           field.String // 发票内容
	BillReceiverPhone     field.String // 收票人电话
	BillReceiverEmail     field.String // 收票人邮箱
	ReceiverName          field.String // 收货人姓名
	ReceiverPhone         field.String // 收货人电话
	ReceiverPostCode      field.String // 收货人邮编
	ReceiverProvince      field.String // 省份/直辖市
	ReceiverCity          field.String // 城市
	ReceiverRegion        field.String // 区
	ReceiverDetailAddress field.String // 详细地址
	Note                  field.String // 订单备注
	ConfirmStatus         field.Int32  // 确认收货状态：0->未确认；1->已确认
	DeleteStatus          field.Int32  // 删除状态：0->未删除；1->已删除
	UseIntegration        field.Int32  // 下单时使用的积分
	PaymentTime           field.Time   // 支付时间
	DeliveryTime          field.Time   // 发货时间
	ReceiveTime           field.Time   // 确认收货时间
	CommentTime           field.Time   // 评价时间
	ModifyTime            field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (o omsOrder) Table(newTableName string) *omsOrder {
	o.omsOrderDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrder) As(alias string) *omsOrder {
	o.omsOrderDo.DO = *(o.omsOrderDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrder) updateTableName(table string) *omsOrder {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.MemberID = field.NewInt64(table, "member_id")
	o.CouponID = field.NewInt64(table, "coupon_id")
	o.OrderSn = field.NewString(table, "order_sn")
	o.CreateTime = field.NewTime(table, "create_time")
	o.MemberUsername = field.NewString(table, "member_username")
	o.TotalAmount = field.NewInt64(table, "total_amount")
	o.PayAmount = field.NewInt64(table, "pay_amount")
	o.FreightAmount = field.NewInt64(table, "freight_amount")
	o.PromotionAmount = field.NewInt64(table, "promotion_amount")
	o.IntegrationAmount = field.NewInt64(table, "integration_amount")
	o.CouponAmount = field.NewInt64(table, "coupon_amount")
	o.DiscountAmount = field.NewInt64(table, "discount_amount")
	o.PayType = field.NewInt32(table, "pay_type")
	o.SourceType = field.NewInt32(table, "source_type")
	o.Status = field.NewInt32(table, "status")
	o.OrderType = field.NewInt32(table, "order_type")
	o.DeliveryCompany = field.NewString(table, "delivery_company")
	o.DeliverySn = field.NewString(table, "delivery_sn")
	o.AutoConfirmDay = field.NewInt32(table, "auto_confirm_day")
	o.Integration = field.NewInt32(table, "integration")
	o.Growth = field.NewInt32(table, "growth")
	o.PromotionInfo = field.NewString(table, "promotion_info")
	o.BillType = field.NewInt32(table, "bill_type")
	o.BillHeader = field.NewString(table, "bill_header")
	o.BillContent = field.NewString(table, "bill_content")
	o.BillReceiverPhone = field.NewString(table, "bill_receiver_phone")
	o.BillReceiverEmail = field.NewString(table, "bill_receiver_email")
	o.ReceiverName = field.NewString(table, "receiver_name")
	o.ReceiverPhone = field.NewString(table, "receiver_phone")
	o.ReceiverPostCode = field.NewString(table, "receiver_post_code")
	o.ReceiverProvince = field.NewString(table, "receiver_province")
	o.ReceiverCity = field.NewString(table, "receiver_city")
	o.ReceiverRegion = field.NewString(table, "receiver_region")
	o.ReceiverDetailAddress = field.NewString(table, "receiver_detail_address")
	o.Note = field.NewString(table, "note")
	o.ConfirmStatus = field.NewInt32(table, "confirm_status")
	o.DeleteStatus = field.NewInt32(table, "delete_status")
	o.UseIntegration = field.NewInt32(table, "use_integration")
	o.PaymentTime = field.NewTime(table, "payment_time")
	o.DeliveryTime = field.NewTime(table, "delivery_time")
	o.ReceiveTime = field.NewTime(table, "receive_time")
	o.CommentTime = field.NewTime(table, "comment_time")
	o.ModifyTime = field.NewTime(table, "modify_time")

	o.fillFieldMap()

	return o
}

func (o *omsOrder) WithContext(ctx context.Context) IOmsOrderDo { return o.omsOrderDo.WithContext(ctx) }

func (o omsOrder) TableName() string { return o.omsOrderDo.TableName() }

func (o omsOrder) Alias() string { return o.omsOrderDo.Alias() }

func (o omsOrder) Columns(cols ...field.Expr) gen.Columns { return o.omsOrderDo.Columns(cols...) }

func (o *omsOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrder) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 44)
	o.fieldMap["id"] = o.ID
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["coupon_id"] = o.CouponID
	o.fieldMap["order_sn"] = o.OrderSn
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["member_username"] = o.MemberUsername
	o.fieldMap["total_amount"] = o.TotalAmount
	o.fieldMap["pay_amount"] = o.PayAmount
	o.fieldMap["freight_amount"] = o.FreightAmount
	o.fieldMap["promotion_amount"] = o.PromotionAmount
	o.fieldMap["integration_amount"] = o.IntegrationAmount
	o.fieldMap["coupon_amount"] = o.CouponAmount
	o.fieldMap["discount_amount"] = o.DiscountAmount
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["source_type"] = o.SourceType
	o.fieldMap["status"] = o.Status
	o.fieldMap["order_type"] = o.OrderType
	o.fieldMap["delivery_company"] = o.DeliveryCompany
	o.fieldMap["delivery_sn"] = o.DeliverySn
	o.fieldMap["auto_confirm_day"] = o.AutoConfirmDay
	o.fieldMap["integration"] = o.Integration
	o.fieldMap["growth"] = o.Growth
	o.fieldMap["promotion_info"] = o.PromotionInfo
	o.fieldMap["bill_type"] = o.BillType
	o.fieldMap["bill_header"] = o.BillHeader
	o.fieldMap["bill_content"] = o.BillContent
	o.fieldMap["bill_receiver_phone"] = o.BillReceiverPhone
	o.fieldMap["bill_receiver_email"] = o.BillReceiverEmail
	o.fieldMap["receiver_name"] = o.ReceiverName
	o.fieldMap["receiver_phone"] = o.ReceiverPhone
	o.fieldMap["receiver_post_code"] = o.ReceiverPostCode
	o.fieldMap["receiver_province"] = o.ReceiverProvince
	o.fieldMap["receiver_city"] = o.ReceiverCity
	o.fieldMap["receiver_region"] = o.ReceiverRegion
	o.fieldMap["receiver_detail_address"] = o.ReceiverDetailAddress
	o.fieldMap["note"] = o.Note
	o.fieldMap["confirm_status"] = o.ConfirmStatus
	o.fieldMap["delete_status"] = o.DeleteStatus
	o.fieldMap["use_integration"] = o.UseIntegration
	o.fieldMap["payment_time"] = o.PaymentTime
	o.fieldMap["delivery_time"] = o.DeliveryTime
	o.fieldMap["receive_time"] = o.ReceiveTime
	o.fieldMap["comment_time"] = o.CommentTime
	o.fieldMap["modify_time"] = o.ModifyTime
}

func (o omsOrder) clone(db *gorm.DB) omsOrder {
	o.omsOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrder) replaceDB(db *gorm.DB) omsOrder {
	o.omsOrderDo.ReplaceDB(db)
	return o
}

type omsOrderDo struct{ gen.DO }

type IOmsOrderDo interface {
	gen.SubQuery
	Debug() IOmsOrderDo
	WithContext(ctx context.Context) IOmsOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderDo
	WriteDB() IOmsOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderDo
	Not(conds ...gen.Condition) IOmsOrderDo
	Or(conds ...gen.Condition) IOmsOrderDo
	Select(conds ...field.Expr) IOmsOrderDo
	Where(conds ...gen.Condition) IOmsOrderDo
	Order(conds ...field.Expr) IOmsOrderDo
	Distinct(cols ...field.Expr) IOmsOrderDo
	Omit(cols ...field.Expr) IOmsOrderDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDo
	Group(cols ...field.Expr) IOmsOrderDo
	Having(conds ...gen.Condition) IOmsOrderDo
	Limit(limit int) IOmsOrderDo
	Offset(offset int) IOmsOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderDo
	Unscoped() IOmsOrderDo
	Create(values ...*model.OmsOrder) error
	CreateInBatches(values []*model.OmsOrder, batchSize int) error
	Save(values ...*model.OmsOrder) error
	First() (*model.OmsOrder, error)
	Take() (*model.OmsOrder, error)
	Last() (*model.OmsOrder, error)
	Find() ([]*model.OmsOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrder, err error)
	FindInBatches(result *[]*model.OmsOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderDo
	Assign(attrs ...field.AssignExpr) IOmsOrderDo
	Joins(fields ...field.RelationField) IOmsOrderDo
	Preload(fields ...field.RelationField) IOmsOrderDo
	FirstOrInit() (*model.OmsOrder, error)
	FirstOrCreate() (*model.OmsOrder, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderDo) Debug() IOmsOrderDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderDo) WithContext(ctx context.Context) IOmsOrderDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderDo) ReadDB() IOmsOrderDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderDo) WriteDB() IOmsOrderDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderDo) Session(config *gorm.Session) IOmsOrderDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderDo) Clauses(conds ...clause.Expression) IOmsOrderDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderDo) Returning(value interface{}, columns ...string) IOmsOrderDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderDo) Not(conds ...gen.Condition) IOmsOrderDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderDo) Or(conds ...gen.Condition) IOmsOrderDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderDo) Select(conds ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderDo) Where(conds ...gen.Condition) IOmsOrderDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderDo) Order(conds ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderDo) Distinct(cols ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderDo) Omit(cols ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderDo) Group(cols ...field.Expr) IOmsOrderDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderDo) Having(conds ...gen.Condition) IOmsOrderDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderDo) Limit(limit int) IOmsOrderDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderDo) Offset(offset int) IOmsOrderDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderDo) Unscoped() IOmsOrderDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderDo) Create(values ...*model.OmsOrder) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderDo) CreateInBatches(values []*model.OmsOrder, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderDo) Save(values ...*model.OmsOrder) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderDo) First() (*model.OmsOrder, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) Take() (*model.OmsOrder, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) Last() (*model.OmsOrder, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) Find() ([]*model.OmsOrder, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrder), err
}

func (o omsOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrder, err error) {
	buf := make([]*model.OmsOrder, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderDo) FindInBatches(result *[]*model.OmsOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderDo) Attrs(attrs ...field.AssignExpr) IOmsOrderDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderDo) Assign(attrs ...field.AssignExpr) IOmsOrderDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderDo) Joins(fields ...field.RelationField) IOmsOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderDo) Preload(fields ...field.RelationField) IOmsOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderDo) FirstOrInit() (*model.OmsOrder, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) FirstOrCreate() (*model.OmsOrder, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) FindByPage(offset int, limit int) (result []*model.OmsOrder, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderDo) Delete(models ...*model.OmsOrder) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderDo) withDO(do gen.Dao) *omsOrderDo {
	o.DO = *do.(*gen.DO)
	return o
}

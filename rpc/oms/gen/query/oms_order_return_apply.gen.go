// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderReturnApply(db *gorm.DB, opts ...gen.DOOption) omsOrderReturnApply {
	_omsOrderReturnApply := omsOrderReturnApply{}

	_omsOrderReturnApply.omsOrderReturnApplyDo.UseDB(db, opts...)
	_omsOrderReturnApply.omsOrderReturnApplyDo.UseModel(&model.OmsOrderReturnApply{})

	tableName := _omsOrderReturnApply.omsOrderReturnApplyDo.TableName()
	_omsOrderReturnApply.ALL = field.NewAsterisk(tableName)
	_omsOrderReturnApply.ID = field.NewInt64(tableName, "id")
	_omsOrderReturnApply.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderReturnApply.CompanyAddressID = field.NewInt64(tableName, "company_address_id")
	_omsOrderReturnApply.ProductID = field.NewInt64(tableName, "product_id")
	_omsOrderReturnApply.OrderSn = field.NewString(tableName, "order_sn")
	_omsOrderReturnApply.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrderReturnApply.MemberUsername = field.NewString(tableName, "member_username")
	_omsOrderReturnApply.ReturnAmount = field.NewInt64(tableName, "return_amount")
	_omsOrderReturnApply.ReturnName = field.NewString(tableName, "return_name")
	_omsOrderReturnApply.ReturnPhone = field.NewString(tableName, "return_phone")
	_omsOrderReturnApply.Status = field.NewInt32(tableName, "status")
	_omsOrderReturnApply.HandleTime = field.NewTime(tableName, "handle_time")
	_omsOrderReturnApply.ProductPic = field.NewString(tableName, "product_pic")
	_omsOrderReturnApply.ProductName = field.NewString(tableName, "product_name")
	_omsOrderReturnApply.ProductBrand = field.NewString(tableName, "product_brand")
	_omsOrderReturnApply.ProductAttr = field.NewString(tableName, "product_attr")
	_omsOrderReturnApply.ProductCount = field.NewInt32(tableName, "product_count")
	_omsOrderReturnApply.ProductPrice = field.NewInt64(tableName, "product_price")
	_omsOrderReturnApply.ProductRealPrice = field.NewInt64(tableName, "product_real_price")
	_omsOrderReturnApply.Reason = field.NewString(tableName, "reason")
	_omsOrderReturnApply.Description = field.NewString(tableName, "description")
	_omsOrderReturnApply.ProofPics = field.NewString(tableName, "proof_pics")
	_omsOrderReturnApply.HandleNote = field.NewString(tableName, "handle_note")
	_omsOrderReturnApply.HandleMan = field.NewString(tableName, "handle_man")
	_omsOrderReturnApply.ReceiveMan = field.NewString(tableName, "receive_man")
	_omsOrderReturnApply.ReceiveTime = field.NewTime(tableName, "receive_time")
	_omsOrderReturnApply.ReceiveNote = field.NewString(tableName, "receive_note")

	_omsOrderReturnApply.fillFieldMap()

	return _omsOrderReturnApply
}

// omsOrderReturnApply 订单退货申请
type omsOrderReturnApply struct {
	omsOrderReturnApplyDo omsOrderReturnApplyDo

	ALL              field.Asterisk
	ID               field.Int64
	OrderID          field.Int64  // 订单id
	CompanyAddressID field.Int64  // 收货地址表id
	ProductID        field.Int64  // 退货商品id
	OrderSn          field.String // 订单编号
	CreateTime       field.Time   // 申请时间
	MemberUsername   field.String // 会员用户名
	ReturnAmount     field.Int64  // 退款金额
	ReturnName       field.String // 退货人姓名
	ReturnPhone      field.String // 退货人电话
	Status           field.Int32  // 申请状态：0->待处理；1->退货中；2->已完成；3->已拒绝
	HandleTime       field.Time   // 处理时间
	ProductPic       field.String // 商品图片
	ProductName      field.String // 商品名称
	ProductBrand     field.String // 商品品牌
	ProductAttr      field.String // 商品销售属性：颜色：红色；尺码：xl;
	ProductCount     field.Int32  // 退货数量
	ProductPrice     field.Int64  // 商品单价
	ProductRealPrice field.Int64  // 商品实际支付单价
	Reason           field.String // 原因
	Description      field.String // 描述
	ProofPics        field.String // 凭证图片，以逗号隔开
	HandleNote       field.String // 处理备注
	HandleMan        field.String // 处理人员
	ReceiveMan       field.String // 收货人
	ReceiveTime      field.Time   // 收货时间
	ReceiveNote      field.String // 收货备注

	fieldMap map[string]field.Expr
}

func (o omsOrderReturnApply) Table(newTableName string) *omsOrderReturnApply {
	o.omsOrderReturnApplyDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderReturnApply) As(alias string) *omsOrderReturnApply {
	o.omsOrderReturnApplyDo.DO = *(o.omsOrderReturnApplyDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderReturnApply) updateTableName(table string) *omsOrderReturnApply {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.CompanyAddressID = field.NewInt64(table, "company_address_id")
	o.ProductID = field.NewInt64(table, "product_id")
	o.OrderSn = field.NewString(table, "order_sn")
	o.CreateTime = field.NewTime(table, "create_time")
	o.MemberUsername = field.NewString(table, "member_username")
	o.ReturnAmount = field.NewInt64(table, "return_amount")
	o.ReturnName = field.NewString(table, "return_name")
	o.ReturnPhone = field.NewString(table, "return_phone")
	o.Status = field.NewInt32(table, "status")
	o.HandleTime = field.NewTime(table, "handle_time")
	o.ProductPic = field.NewString(table, "product_pic")
	o.ProductName = field.NewString(table, "product_name")
	o.ProductBrand = field.NewString(table, "product_brand")
	o.ProductAttr = field.NewString(table, "product_attr")
	o.ProductCount = field.NewInt32(table, "product_count")
	o.ProductPrice = field.NewInt64(table, "product_price")
	o.ProductRealPrice = field.NewInt64(table, "product_real_price")
	o.Reason = field.NewString(table, "reason")
	o.Description = field.NewString(table, "description")
	o.ProofPics = field.NewString(table, "proof_pics")
	o.HandleNote = field.NewString(table, "handle_note")
	o.HandleMan = field.NewString(table, "handle_man")
	o.ReceiveMan = field.NewString(table, "receive_man")
	o.ReceiveTime = field.NewTime(table, "receive_time")
	o.ReceiveNote = field.NewString(table, "receive_note")

	o.fillFieldMap()

	return o
}

func (o *omsOrderReturnApply) WithContext(ctx context.Context) IOmsOrderReturnApplyDo {
	return o.omsOrderReturnApplyDo.WithContext(ctx)
}

func (o omsOrderReturnApply) TableName() string { return o.omsOrderReturnApplyDo.TableName() }

func (o omsOrderReturnApply) Alias() string { return o.omsOrderReturnApplyDo.Alias() }

func (o omsOrderReturnApply) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderReturnApplyDo.Columns(cols...)
}

func (o *omsOrderReturnApply) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderReturnApply) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 27)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["company_address_id"] = o.CompanyAddressID
	o.fieldMap["product_id"] = o.ProductID
	o.fieldMap["order_sn"] = o.OrderSn
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["member_username"] = o.MemberUsername
	o.fieldMap["return_amount"] = o.ReturnAmount
	o.fieldMap["return_name"] = o.ReturnName
	o.fieldMap["return_phone"] = o.ReturnPhone
	o.fieldMap["status"] = o.Status
	o.fieldMap["handle_time"] = o.HandleTime
	o.fieldMap["product_pic"] = o.ProductPic
	o.fieldMap["product_name"] = o.ProductName
	o.fieldMap["product_brand"] = o.ProductBrand
	o.fieldMap["product_attr"] = o.ProductAttr
	o.fieldMap["product_count"] = o.ProductCount
	o.fieldMap["product_price"] = o.ProductPrice
	o.fieldMap["product_real_price"] = o.ProductRealPrice
	o.fieldMap["reason"] = o.Reason
	o.fieldMap["description"] = o.Description
	o.fieldMap["proof_pics"] = o.ProofPics
	o.fieldMap["handle_note"] = o.HandleNote
	o.fieldMap["handle_man"] = o.HandleMan
	o.fieldMap["receive_man"] = o.ReceiveMan
	o.fieldMap["receive_time"] = o.ReceiveTime
	o.fieldMap["receive_note"] = o.ReceiveNote
}

func (o omsOrderReturnApply) clone(db *gorm.DB) omsOrderReturnApply {
	o.omsOrderReturnApplyDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderReturnApply) replaceDB(db *gorm.DB) omsOrderReturnApply {
	o.omsOrderReturnApplyDo.ReplaceDB(db)
	return o
}

type omsOrderReturnApplyDo struct{ gen.DO }

type IOmsOrderReturnApplyDo interface {
	gen.SubQuery
	Debug() IOmsOrderReturnApplyDo
	WithContext(ctx context.Context) IOmsOrderReturnApplyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderReturnApplyDo
	WriteDB() IOmsOrderReturnApplyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderReturnApplyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderReturnApplyDo
	Not(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Or(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Select(conds ...field.Expr) IOmsOrderReturnApplyDo
	Where(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Order(conds ...field.Expr) IOmsOrderReturnApplyDo
	Distinct(cols ...field.Expr) IOmsOrderReturnApplyDo
	Omit(cols ...field.Expr) IOmsOrderReturnApplyDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo
	Group(cols ...field.Expr) IOmsOrderReturnApplyDo
	Having(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Limit(limit int) IOmsOrderReturnApplyDo
	Offset(offset int) IOmsOrderReturnApplyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderReturnApplyDo
	Unscoped() IOmsOrderReturnApplyDo
	Create(values ...*model.OmsOrderReturnApply) error
	CreateInBatches(values []*model.OmsOrderReturnApply, batchSize int) error
	Save(values ...*model.OmsOrderReturnApply) error
	First() (*model.OmsOrderReturnApply, error)
	Take() (*model.OmsOrderReturnApply, error)
	Last() (*model.OmsOrderReturnApply, error)
	Find() ([]*model.OmsOrderReturnApply, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderReturnApply, err error)
	FindInBatches(result *[]*model.OmsOrderReturnApply, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderReturnApply) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo
	Assign(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo
	Joins(fields ...field.RelationField) IOmsOrderReturnApplyDo
	Preload(fields ...field.RelationField) IOmsOrderReturnApplyDo
	FirstOrInit() (*model.OmsOrderReturnApply, error)
	FirstOrCreate() (*model.OmsOrderReturnApply, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderReturnApply, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderReturnApplyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderReturnApplyDo) Debug() IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderReturnApplyDo) WithContext(ctx context.Context) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderReturnApplyDo) ReadDB() IOmsOrderReturnApplyDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderReturnApplyDo) WriteDB() IOmsOrderReturnApplyDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderReturnApplyDo) Session(config *gorm.Session) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderReturnApplyDo) Clauses(conds ...clause.Expression) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderReturnApplyDo) Returning(value interface{}, columns ...string) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderReturnApplyDo) Not(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderReturnApplyDo) Or(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderReturnApplyDo) Select(conds ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderReturnApplyDo) Where(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderReturnApplyDo) Order(conds ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderReturnApplyDo) Distinct(cols ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderReturnApplyDo) Omit(cols ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderReturnApplyDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderReturnApplyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderReturnApplyDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderReturnApplyDo) Group(cols ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderReturnApplyDo) Having(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderReturnApplyDo) Limit(limit int) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderReturnApplyDo) Offset(offset int) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderReturnApplyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderReturnApplyDo) Unscoped() IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderReturnApplyDo) Create(values ...*model.OmsOrderReturnApply) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderReturnApplyDo) CreateInBatches(values []*model.OmsOrderReturnApply, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderReturnApplyDo) Save(values ...*model.OmsOrderReturnApply) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderReturnApplyDo) First() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) Take() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) Last() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) Find() ([]*model.OmsOrderReturnApply, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderReturnApply), err
}

func (o omsOrderReturnApplyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderReturnApply, err error) {
	buf := make([]*model.OmsOrderReturnApply, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderReturnApplyDo) FindInBatches(result *[]*model.OmsOrderReturnApply, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderReturnApplyDo) Attrs(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderReturnApplyDo) Assign(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderReturnApplyDo) Joins(fields ...field.RelationField) IOmsOrderReturnApplyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderReturnApplyDo) Preload(fields ...field.RelationField) IOmsOrderReturnApplyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderReturnApplyDo) FirstOrInit() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) FirstOrCreate() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) FindByPage(offset int, limit int) (result []*model.OmsOrderReturnApply, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderReturnApplyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderReturnApplyDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderReturnApplyDo) Delete(models ...*model.OmsOrderReturnApply) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderReturnApplyDo) withDO(do gen.Dao) *omsOrderReturnApplyDo {
	o.DO = *do.(*gen.DO)
	return o
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                   = new(Query)
	PmsAlbum                            *pmsAlbum
	PmsAlbumPic                         *pmsAlbumPic
	PmsBrand                            *pmsBrand
	PmsComment                          *pmsComment
	PmsCommentReplay                    *pmsCommentReplay
	PmsFeightTemplate                   *pmsFeightTemplate
	PmsMemberPrice                      *pmsMemberPrice
	PmsProduct                          *pmsProduct
	PmsProductAttribute                 *pmsProductAttribute
	PmsProductAttributeCategory         *pmsProductAttributeCategory
	PmsProductAttributeValue            *pmsProductAttributeValue
	PmsProductCategory                  *pmsProductCategory
	PmsProductCategoryAttributeRelation *pmsProductCategoryAttributeRelation
	PmsProductCollect                   *pmsProductCollect
	PmsProductFullReduction             *pmsProductFullReduction
	PmsProductLadder                    *pmsProductLadder
	PmsProductOperateLog                *pmsProductOperateLog
	PmsProductVertifyRecord             *pmsProductVertifyRecord
	PmsSkuStock                         *pmsSkuStock
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	PmsAlbum = &Q.PmsAlbum
	PmsAlbumPic = &Q.PmsAlbumPic
	PmsBrand = &Q.PmsBrand
	PmsComment = &Q.PmsComment
	PmsCommentReplay = &Q.PmsCommentReplay
	PmsFeightTemplate = &Q.PmsFeightTemplate
	PmsMemberPrice = &Q.PmsMemberPrice
	PmsProduct = &Q.PmsProduct
	PmsProductAttribute = &Q.PmsProductAttribute
	PmsProductAttributeCategory = &Q.PmsProductAttributeCategory
	PmsProductAttributeValue = &Q.PmsProductAttributeValue
	PmsProductCategory = &Q.PmsProductCategory
	PmsProductCategoryAttributeRelation = &Q.PmsProductCategoryAttributeRelation
	PmsProductCollect = &Q.PmsProductCollect
	PmsProductFullReduction = &Q.PmsProductFullReduction
	PmsProductLadder = &Q.PmsProductLadder
	PmsProductOperateLog = &Q.PmsProductOperateLog
	PmsProductVertifyRecord = &Q.PmsProductVertifyRecord
	PmsSkuStock = &Q.PmsSkuStock
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                  db,
		PmsAlbum:                            newPmsAlbum(db, opts...),
		PmsAlbumPic:                         newPmsAlbumPic(db, opts...),
		PmsBrand:                            newPmsBrand(db, opts...),
		PmsComment:                          newPmsComment(db, opts...),
		PmsCommentReplay:                    newPmsCommentReplay(db, opts...),
		PmsFeightTemplate:                   newPmsFeightTemplate(db, opts...),
		PmsMemberPrice:                      newPmsMemberPrice(db, opts...),
		PmsProduct:                          newPmsProduct(db, opts...),
		PmsProductAttribute:                 newPmsProductAttribute(db, opts...),
		PmsProductAttributeCategory:         newPmsProductAttributeCategory(db, opts...),
		PmsProductAttributeValue:            newPmsProductAttributeValue(db, opts...),
		PmsProductCategory:                  newPmsProductCategory(db, opts...),
		PmsProductCategoryAttributeRelation: newPmsProductCategoryAttributeRelation(db, opts...),
		PmsProductCollect:                   newPmsProductCollect(db, opts...),
		PmsProductFullReduction:             newPmsProductFullReduction(db, opts...),
		PmsProductLadder:                    newPmsProductLadder(db, opts...),
		PmsProductOperateLog:                newPmsProductOperateLog(db, opts...),
		PmsProductVertifyRecord:             newPmsProductVertifyRecord(db, opts...),
		PmsSkuStock:                         newPmsSkuStock(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	PmsAlbum                            pmsAlbum
	PmsAlbumPic                         pmsAlbumPic
	PmsBrand                            pmsBrand
	PmsComment                          pmsComment
	PmsCommentReplay                    pmsCommentReplay
	PmsFeightTemplate                   pmsFeightTemplate
	PmsMemberPrice                      pmsMemberPrice
	PmsProduct                          pmsProduct
	PmsProductAttribute                 pmsProductAttribute
	PmsProductAttributeCategory         pmsProductAttributeCategory
	PmsProductAttributeValue            pmsProductAttributeValue
	PmsProductCategory                  pmsProductCategory
	PmsProductCategoryAttributeRelation pmsProductCategoryAttributeRelation
	PmsProductCollect                   pmsProductCollect
	PmsProductFullReduction             pmsProductFullReduction
	PmsProductLadder                    pmsProductLadder
	PmsProductOperateLog                pmsProductOperateLog
	PmsProductVertifyRecord             pmsProductVertifyRecord
	PmsSkuStock                         pmsSkuStock
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                  db,
		PmsAlbum:                            q.PmsAlbum.clone(db),
		PmsAlbumPic:                         q.PmsAlbumPic.clone(db),
		PmsBrand:                            q.PmsBrand.clone(db),
		PmsComment:                          q.PmsComment.clone(db),
		PmsCommentReplay:                    q.PmsCommentReplay.clone(db),
		PmsFeightTemplate:                   q.PmsFeightTemplate.clone(db),
		PmsMemberPrice:                      q.PmsMemberPrice.clone(db),
		PmsProduct:                          q.PmsProduct.clone(db),
		PmsProductAttribute:                 q.PmsProductAttribute.clone(db),
		PmsProductAttributeCategory:         q.PmsProductAttributeCategory.clone(db),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.clone(db),
		PmsProductCategory:                  q.PmsProductCategory.clone(db),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.clone(db),
		PmsProductCollect:                   q.PmsProductCollect.clone(db),
		PmsProductFullReduction:             q.PmsProductFullReduction.clone(db),
		PmsProductLadder:                    q.PmsProductLadder.clone(db),
		PmsProductOperateLog:                q.PmsProductOperateLog.clone(db),
		PmsProductVertifyRecord:             q.PmsProductVertifyRecord.clone(db),
		PmsSkuStock:                         q.PmsSkuStock.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                  db,
		PmsAlbum:                            q.PmsAlbum.replaceDB(db),
		PmsAlbumPic:                         q.PmsAlbumPic.replaceDB(db),
		PmsBrand:                            q.PmsBrand.replaceDB(db),
		PmsComment:                          q.PmsComment.replaceDB(db),
		PmsCommentReplay:                    q.PmsCommentReplay.replaceDB(db),
		PmsFeightTemplate:                   q.PmsFeightTemplate.replaceDB(db),
		PmsMemberPrice:                      q.PmsMemberPrice.replaceDB(db),
		PmsProduct:                          q.PmsProduct.replaceDB(db),
		PmsProductAttribute:                 q.PmsProductAttribute.replaceDB(db),
		PmsProductAttributeCategory:         q.PmsProductAttributeCategory.replaceDB(db),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.replaceDB(db),
		PmsProductCategory:                  q.PmsProductCategory.replaceDB(db),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.replaceDB(db),
		PmsProductCollect:                   q.PmsProductCollect.replaceDB(db),
		PmsProductFullReduction:             q.PmsProductFullReduction.replaceDB(db),
		PmsProductLadder:                    q.PmsProductLadder.replaceDB(db),
		PmsProductOperateLog:                q.PmsProductOperateLog.replaceDB(db),
		PmsProductVertifyRecord:             q.PmsProductVertifyRecord.replaceDB(db),
		PmsSkuStock:                         q.PmsSkuStock.replaceDB(db),
	}
}

type queryCtx struct {
	PmsAlbum                            IPmsAlbumDo
	PmsAlbumPic                         IPmsAlbumPicDo
	PmsBrand                            IPmsBrandDo
	PmsComment                          IPmsCommentDo
	PmsCommentReplay                    IPmsCommentReplayDo
	PmsFeightTemplate                   IPmsFeightTemplateDo
	PmsMemberPrice                      IPmsMemberPriceDo
	PmsProduct                          IPmsProductDo
	PmsProductAttribute                 IPmsProductAttributeDo
	PmsProductAttributeCategory         IPmsProductAttributeCategoryDo
	PmsProductAttributeValue            IPmsProductAttributeValueDo
	PmsProductCategory                  IPmsProductCategoryDo
	PmsProductCategoryAttributeRelation IPmsProductCategoryAttributeRelationDo
	PmsProductCollect                   IPmsProductCollectDo
	PmsProductFullReduction             IPmsProductFullReductionDo
	PmsProductLadder                    IPmsProductLadderDo
	PmsProductOperateLog                IPmsProductOperateLogDo
	PmsProductVertifyRecord             IPmsProductVertifyRecordDo
	PmsSkuStock                         IPmsSkuStockDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		PmsAlbum:                            q.PmsAlbum.WithContext(ctx),
		PmsAlbumPic:                         q.PmsAlbumPic.WithContext(ctx),
		PmsBrand:                            q.PmsBrand.WithContext(ctx),
		PmsComment:                          q.PmsComment.WithContext(ctx),
		PmsCommentReplay:                    q.PmsCommentReplay.WithContext(ctx),
		PmsFeightTemplate:                   q.PmsFeightTemplate.WithContext(ctx),
		PmsMemberPrice:                      q.PmsMemberPrice.WithContext(ctx),
		PmsProduct:                          q.PmsProduct.WithContext(ctx),
		PmsProductAttribute:                 q.PmsProductAttribute.WithContext(ctx),
		PmsProductAttributeCategory:         q.PmsProductAttributeCategory.WithContext(ctx),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.WithContext(ctx),
		PmsProductCategory:                  q.PmsProductCategory.WithContext(ctx),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.WithContext(ctx),
		PmsProductCollect:                   q.PmsProductCollect.WithContext(ctx),
		PmsProductFullReduction:             q.PmsProductFullReduction.WithContext(ctx),
		PmsProductLadder:                    q.PmsProductLadder.WithContext(ctx),
		PmsProductOperateLog:                q.PmsProductOperateLog.WithContext(ctx),
		PmsProductVertifyRecord:             q.PmsProductVertifyRecord.WithContext(ctx),
		PmsSkuStock:                         q.PmsSkuStock.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

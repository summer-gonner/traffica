// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsComment(db *gorm.DB, opts ...gen.DOOption) pmsComment {
	_pmsComment := pmsComment{}

	_pmsComment.pmsCommentDo.UseDB(db, opts...)
	_pmsComment.pmsCommentDo.UseModel(&model.PmsComment{})

	tableName := _pmsComment.pmsCommentDo.TableName()
	_pmsComment.ALL = field.NewAsterisk(tableName)
	_pmsComment.ID = field.NewInt64(tableName, "id")
	_pmsComment.ProductID = field.NewInt64(tableName, "product_id")
	_pmsComment.MemberNickName = field.NewString(tableName, "member_nick_name")
	_pmsComment.ProductName = field.NewString(tableName, "product_name")
	_pmsComment.Star = field.NewInt32(tableName, "star")
	_pmsComment.MemberIP = field.NewString(tableName, "member_ip")
	_pmsComment.CreateTime = field.NewTime(tableName, "create_time")
	_pmsComment.ShowStatus = field.NewInt32(tableName, "show_status")
	_pmsComment.ProductAttribute = field.NewString(tableName, "product_attribute")
	_pmsComment.CollectCount = field.NewInt32(tableName, "collect_count")
	_pmsComment.ReadCount = field.NewInt32(tableName, "read_count")
	_pmsComment.Content = field.NewString(tableName, "content")
	_pmsComment.Pics = field.NewString(tableName, "pics")
	_pmsComment.MemberIcon = field.NewString(tableName, "member_icon")
	_pmsComment.ReplayCount = field.NewInt32(tableName, "replay_count")

	_pmsComment.fillFieldMap()

	return _pmsComment
}

// pmsComment 商品评价表
type pmsComment struct {
	pmsCommentDo pmsCommentDo

	ALL              field.Asterisk
	ID               field.Int64
	ProductID        field.Int64
	MemberNickName   field.String
	ProductName      field.String
	Star             field.Int32  // 评价星数：0->5
	MemberIP         field.String // 评价的ip
	CreateTime       field.Time
	ShowStatus       field.Int32
	ProductAttribute field.String // 购买时的商品属性
	CollectCount     field.Int32
	ReadCount        field.Int32
	Content          field.String
	Pics             field.String // 上传图片地址，以逗号隔开
	MemberIcon       field.String // 评论用户头像
	ReplayCount      field.Int32

	fieldMap map[string]field.Expr
}

func (p pmsComment) Table(newTableName string) *pmsComment {
	p.pmsCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsComment) As(alias string) *pmsComment {
	p.pmsCommentDo.DO = *(p.pmsCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsComment) updateTableName(table string) *pmsComment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProductID = field.NewInt64(table, "product_id")
	p.MemberNickName = field.NewString(table, "member_nick_name")
	p.ProductName = field.NewString(table, "product_name")
	p.Star = field.NewInt32(table, "star")
	p.MemberIP = field.NewString(table, "member_ip")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ShowStatus = field.NewInt32(table, "show_status")
	p.ProductAttribute = field.NewString(table, "product_attribute")
	p.CollectCount = field.NewInt32(table, "collect_count")
	p.ReadCount = field.NewInt32(table, "read_count")
	p.Content = field.NewString(table, "content")
	p.Pics = field.NewString(table, "pics")
	p.MemberIcon = field.NewString(table, "member_icon")
	p.ReplayCount = field.NewInt32(table, "replay_count")

	p.fillFieldMap()

	return p
}

func (p *pmsComment) WithContext(ctx context.Context) IPmsCommentDo {
	return p.pmsCommentDo.WithContext(ctx)
}

func (p pmsComment) TableName() string { return p.pmsCommentDo.TableName() }

func (p pmsComment) Alias() string { return p.pmsCommentDo.Alias() }

func (p pmsComment) Columns(cols ...field.Expr) gen.Columns { return p.pmsCommentDo.Columns(cols...) }

func (p *pmsComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["member_nick_name"] = p.MemberNickName
	p.fieldMap["product_name"] = p.ProductName
	p.fieldMap["star"] = p.Star
	p.fieldMap["member_ip"] = p.MemberIP
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["show_status"] = p.ShowStatus
	p.fieldMap["product_attribute"] = p.ProductAttribute
	p.fieldMap["collect_count"] = p.CollectCount
	p.fieldMap["read_count"] = p.ReadCount
	p.fieldMap["content"] = p.Content
	p.fieldMap["pics"] = p.Pics
	p.fieldMap["member_icon"] = p.MemberIcon
	p.fieldMap["replay_count"] = p.ReplayCount
}

func (p pmsComment) clone(db *gorm.DB) pmsComment {
	p.pmsCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsComment) replaceDB(db *gorm.DB) pmsComment {
	p.pmsCommentDo.ReplaceDB(db)
	return p
}

type pmsCommentDo struct{ gen.DO }

type IPmsCommentDo interface {
	gen.SubQuery
	Debug() IPmsCommentDo
	WithContext(ctx context.Context) IPmsCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsCommentDo
	WriteDB() IPmsCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsCommentDo
	Not(conds ...gen.Condition) IPmsCommentDo
	Or(conds ...gen.Condition) IPmsCommentDo
	Select(conds ...field.Expr) IPmsCommentDo
	Where(conds ...gen.Condition) IPmsCommentDo
	Order(conds ...field.Expr) IPmsCommentDo
	Distinct(cols ...field.Expr) IPmsCommentDo
	Omit(cols ...field.Expr) IPmsCommentDo
	Join(table schema.Tabler, on ...field.Expr) IPmsCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsCommentDo
	Group(cols ...field.Expr) IPmsCommentDo
	Having(conds ...gen.Condition) IPmsCommentDo
	Limit(limit int) IPmsCommentDo
	Offset(offset int) IPmsCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCommentDo
	Unscoped() IPmsCommentDo
	Create(values ...*model.PmsComment) error
	CreateInBatches(values []*model.PmsComment, batchSize int) error
	Save(values ...*model.PmsComment) error
	First() (*model.PmsComment, error)
	Take() (*model.PmsComment, error)
	Last() (*model.PmsComment, error)
	Find() ([]*model.PmsComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsComment, err error)
	FindInBatches(result *[]*model.PmsComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsCommentDo
	Assign(attrs ...field.AssignExpr) IPmsCommentDo
	Joins(fields ...field.RelationField) IPmsCommentDo
	Preload(fields ...field.RelationField) IPmsCommentDo
	FirstOrInit() (*model.PmsComment, error)
	FirstOrCreate() (*model.PmsComment, error)
	FindByPage(offset int, limit int) (result []*model.PmsComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsCommentDo) Debug() IPmsCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsCommentDo) WithContext(ctx context.Context) IPmsCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsCommentDo) ReadDB() IPmsCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsCommentDo) WriteDB() IPmsCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsCommentDo) Session(config *gorm.Session) IPmsCommentDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsCommentDo) Clauses(conds ...clause.Expression) IPmsCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsCommentDo) Returning(value interface{}, columns ...string) IPmsCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsCommentDo) Not(conds ...gen.Condition) IPmsCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsCommentDo) Or(conds ...gen.Condition) IPmsCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsCommentDo) Select(conds ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsCommentDo) Where(conds ...gen.Condition) IPmsCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsCommentDo) Order(conds ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsCommentDo) Distinct(cols ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsCommentDo) Omit(cols ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsCommentDo) Join(table schema.Tabler, on ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsCommentDo) Group(cols ...field.Expr) IPmsCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsCommentDo) Having(conds ...gen.Condition) IPmsCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsCommentDo) Limit(limit int) IPmsCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsCommentDo) Offset(offset int) IPmsCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsCommentDo) Unscoped() IPmsCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsCommentDo) Create(values ...*model.PmsComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsCommentDo) CreateInBatches(values []*model.PmsComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsCommentDo) Save(values ...*model.PmsComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsCommentDo) First() (*model.PmsComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsComment), nil
	}
}

func (p pmsCommentDo) Take() (*model.PmsComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsComment), nil
	}
}

func (p pmsCommentDo) Last() (*model.PmsComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsComment), nil
	}
}

func (p pmsCommentDo) Find() ([]*model.PmsComment, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsComment), err
}

func (p pmsCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsComment, err error) {
	buf := make([]*model.PmsComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsCommentDo) FindInBatches(result *[]*model.PmsComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsCommentDo) Attrs(attrs ...field.AssignExpr) IPmsCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsCommentDo) Assign(attrs ...field.AssignExpr) IPmsCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsCommentDo) Joins(fields ...field.RelationField) IPmsCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsCommentDo) Preload(fields ...field.RelationField) IPmsCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsCommentDo) FirstOrInit() (*model.PmsComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsComment), nil
	}
}

func (p pmsCommentDo) FirstOrCreate() (*model.PmsComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsComment), nil
	}
}

func (p pmsCommentDo) FindByPage(offset int, limit int) (result []*model.PmsComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsCommentDo) Delete(models ...*model.PmsComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsCommentDo) withDO(do gen.Dao) *pmsCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}

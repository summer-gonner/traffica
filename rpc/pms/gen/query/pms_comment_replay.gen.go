// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsCommentReplay(db *gorm.DB, opts ...gen.DOOption) pmsCommentReplay {
	_pmsCommentReplay := pmsCommentReplay{}

	_pmsCommentReplay.pmsCommentReplayDo.UseDB(db, opts...)
	_pmsCommentReplay.pmsCommentReplayDo.UseModel(&model.PmsCommentReplay{})

	tableName := _pmsCommentReplay.pmsCommentReplayDo.TableName()
	_pmsCommentReplay.ALL = field.NewAsterisk(tableName)
	_pmsCommentReplay.ID = field.NewInt64(tableName, "id")
	_pmsCommentReplay.CommentID = field.NewInt64(tableName, "comment_id")
	_pmsCommentReplay.MemberNickName = field.NewString(tableName, "member_nick_name")
	_pmsCommentReplay.MemberIcon = field.NewString(tableName, "member_icon")
	_pmsCommentReplay.Content = field.NewString(tableName, "content")
	_pmsCommentReplay.CreateTime = field.NewTime(tableName, "create_time")
	_pmsCommentReplay.Type = field.NewInt32(tableName, "type")

	_pmsCommentReplay.fillFieldMap()

	return _pmsCommentReplay
}

// pmsCommentReplay 产品评价回复表
type pmsCommentReplay struct {
	pmsCommentReplayDo pmsCommentReplayDo

	ALL            field.Asterisk
	ID             field.Int64
	CommentID      field.Int64
	MemberNickName field.String
	MemberIcon     field.String
	Content        field.String
	CreateTime     field.Time
	Type           field.Int32 // 评论人员类型；0->会员；1->管理员

	fieldMap map[string]field.Expr
}

func (p pmsCommentReplay) Table(newTableName string) *pmsCommentReplay {
	p.pmsCommentReplayDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsCommentReplay) As(alias string) *pmsCommentReplay {
	p.pmsCommentReplayDo.DO = *(p.pmsCommentReplayDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsCommentReplay) updateTableName(table string) *pmsCommentReplay {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CommentID = field.NewInt64(table, "comment_id")
	p.MemberNickName = field.NewString(table, "member_nick_name")
	p.MemberIcon = field.NewString(table, "member_icon")
	p.Content = field.NewString(table, "content")
	p.CreateTime = field.NewTime(table, "create_time")
	p.Type = field.NewInt32(table, "type")

	p.fillFieldMap()

	return p
}

func (p *pmsCommentReplay) WithContext(ctx context.Context) IPmsCommentReplayDo {
	return p.pmsCommentReplayDo.WithContext(ctx)
}

func (p pmsCommentReplay) TableName() string { return p.pmsCommentReplayDo.TableName() }

func (p pmsCommentReplay) Alias() string { return p.pmsCommentReplayDo.Alias() }

func (p pmsCommentReplay) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsCommentReplayDo.Columns(cols...)
}

func (p *pmsCommentReplay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsCommentReplay) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["comment_id"] = p.CommentID
	p.fieldMap["member_nick_name"] = p.MemberNickName
	p.fieldMap["member_icon"] = p.MemberIcon
	p.fieldMap["content"] = p.Content
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["type"] = p.Type
}

func (p pmsCommentReplay) clone(db *gorm.DB) pmsCommentReplay {
	p.pmsCommentReplayDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsCommentReplay) replaceDB(db *gorm.DB) pmsCommentReplay {
	p.pmsCommentReplayDo.ReplaceDB(db)
	return p
}

type pmsCommentReplayDo struct{ gen.DO }

type IPmsCommentReplayDo interface {
	gen.SubQuery
	Debug() IPmsCommentReplayDo
	WithContext(ctx context.Context) IPmsCommentReplayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsCommentReplayDo
	WriteDB() IPmsCommentReplayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsCommentReplayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsCommentReplayDo
	Not(conds ...gen.Condition) IPmsCommentReplayDo
	Or(conds ...gen.Condition) IPmsCommentReplayDo
	Select(conds ...field.Expr) IPmsCommentReplayDo
	Where(conds ...gen.Condition) IPmsCommentReplayDo
	Order(conds ...field.Expr) IPmsCommentReplayDo
	Distinct(cols ...field.Expr) IPmsCommentReplayDo
	Omit(cols ...field.Expr) IPmsCommentReplayDo
	Join(table schema.Tabler, on ...field.Expr) IPmsCommentReplayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCommentReplayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsCommentReplayDo
	Group(cols ...field.Expr) IPmsCommentReplayDo
	Having(conds ...gen.Condition) IPmsCommentReplayDo
	Limit(limit int) IPmsCommentReplayDo
	Offset(offset int) IPmsCommentReplayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCommentReplayDo
	Unscoped() IPmsCommentReplayDo
	Create(values ...*model.PmsCommentReplay) error
	CreateInBatches(values []*model.PmsCommentReplay, batchSize int) error
	Save(values ...*model.PmsCommentReplay) error
	First() (*model.PmsCommentReplay, error)
	Take() (*model.PmsCommentReplay, error)
	Last() (*model.PmsCommentReplay, error)
	Find() ([]*model.PmsCommentReplay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCommentReplay, err error)
	FindInBatches(result *[]*model.PmsCommentReplay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsCommentReplay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsCommentReplayDo
	Assign(attrs ...field.AssignExpr) IPmsCommentReplayDo
	Joins(fields ...field.RelationField) IPmsCommentReplayDo
	Preload(fields ...field.RelationField) IPmsCommentReplayDo
	FirstOrInit() (*model.PmsCommentReplay, error)
	FirstOrCreate() (*model.PmsCommentReplay, error)
	FindByPage(offset int, limit int) (result []*model.PmsCommentReplay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsCommentReplayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsCommentReplayDo) Debug() IPmsCommentReplayDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsCommentReplayDo) WithContext(ctx context.Context) IPmsCommentReplayDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsCommentReplayDo) ReadDB() IPmsCommentReplayDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsCommentReplayDo) WriteDB() IPmsCommentReplayDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsCommentReplayDo) Session(config *gorm.Session) IPmsCommentReplayDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsCommentReplayDo) Clauses(conds ...clause.Expression) IPmsCommentReplayDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsCommentReplayDo) Returning(value interface{}, columns ...string) IPmsCommentReplayDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsCommentReplayDo) Not(conds ...gen.Condition) IPmsCommentReplayDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsCommentReplayDo) Or(conds ...gen.Condition) IPmsCommentReplayDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsCommentReplayDo) Select(conds ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsCommentReplayDo) Where(conds ...gen.Condition) IPmsCommentReplayDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsCommentReplayDo) Order(conds ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsCommentReplayDo) Distinct(cols ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsCommentReplayDo) Omit(cols ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsCommentReplayDo) Join(table schema.Tabler, on ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsCommentReplayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsCommentReplayDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsCommentReplayDo) Group(cols ...field.Expr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsCommentReplayDo) Having(conds ...gen.Condition) IPmsCommentReplayDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsCommentReplayDo) Limit(limit int) IPmsCommentReplayDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsCommentReplayDo) Offset(offset int) IPmsCommentReplayDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsCommentReplayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCommentReplayDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsCommentReplayDo) Unscoped() IPmsCommentReplayDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsCommentReplayDo) Create(values ...*model.PmsCommentReplay) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsCommentReplayDo) CreateInBatches(values []*model.PmsCommentReplay, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsCommentReplayDo) Save(values ...*model.PmsCommentReplay) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsCommentReplayDo) First() (*model.PmsCommentReplay, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCommentReplay), nil
	}
}

func (p pmsCommentReplayDo) Take() (*model.PmsCommentReplay, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCommentReplay), nil
	}
}

func (p pmsCommentReplayDo) Last() (*model.PmsCommentReplay, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCommentReplay), nil
	}
}

func (p pmsCommentReplayDo) Find() ([]*model.PmsCommentReplay, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsCommentReplay), err
}

func (p pmsCommentReplayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCommentReplay, err error) {
	buf := make([]*model.PmsCommentReplay, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsCommentReplayDo) FindInBatches(result *[]*model.PmsCommentReplay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsCommentReplayDo) Attrs(attrs ...field.AssignExpr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsCommentReplayDo) Assign(attrs ...field.AssignExpr) IPmsCommentReplayDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsCommentReplayDo) Joins(fields ...field.RelationField) IPmsCommentReplayDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsCommentReplayDo) Preload(fields ...field.RelationField) IPmsCommentReplayDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsCommentReplayDo) FirstOrInit() (*model.PmsCommentReplay, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCommentReplay), nil
	}
}

func (p pmsCommentReplayDo) FirstOrCreate() (*model.PmsCommentReplay, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCommentReplay), nil
	}
}

func (p pmsCommentReplayDo) FindByPage(offset int, limit int) (result []*model.PmsCommentReplay, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsCommentReplayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsCommentReplayDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsCommentReplayDo) Delete(models ...*model.PmsCommentReplay) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsCommentReplayDo) withDO(do gen.Dao) *pmsCommentReplayDo {
	p.DO = *do.(*gen.DO)
	return p
}

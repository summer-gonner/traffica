// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsMemberPrice(db *gorm.DB, opts ...gen.DOOption) pmsMemberPrice {
	_pmsMemberPrice := pmsMemberPrice{}

	_pmsMemberPrice.pmsMemberPriceDo.UseDB(db, opts...)
	_pmsMemberPrice.pmsMemberPriceDo.UseModel(&model.PmsMemberPrice{})

	tableName := _pmsMemberPrice.pmsMemberPriceDo.TableName()
	_pmsMemberPrice.ALL = field.NewAsterisk(tableName)
	_pmsMemberPrice.ID = field.NewInt64(tableName, "id")
	_pmsMemberPrice.ProductID = field.NewInt64(tableName, "product_id")
	_pmsMemberPrice.MemberLevelID = field.NewInt64(tableName, "member_level_id")
	_pmsMemberPrice.MemberPrice = field.NewInt64(tableName, "member_price")
	_pmsMemberPrice.MemberLevelName = field.NewString(tableName, "member_level_name")

	_pmsMemberPrice.fillFieldMap()

	return _pmsMemberPrice
}

// pmsMemberPrice 商品会员价格表
type pmsMemberPrice struct {
	pmsMemberPriceDo pmsMemberPriceDo

	ALL             field.Asterisk
	ID              field.Int64
	ProductID       field.Int64  // 商品id
	MemberLevelID   field.Int64  // 会员等级id
	MemberPrice     field.Int64  // 会员价格
	MemberLevelName field.String // 会员等级名称

	fieldMap map[string]field.Expr
}

func (p pmsMemberPrice) Table(newTableName string) *pmsMemberPrice {
	p.pmsMemberPriceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsMemberPrice) As(alias string) *pmsMemberPrice {
	p.pmsMemberPriceDo.DO = *(p.pmsMemberPriceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsMemberPrice) updateTableName(table string) *pmsMemberPrice {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProductID = field.NewInt64(table, "product_id")
	p.MemberLevelID = field.NewInt64(table, "member_level_id")
	p.MemberPrice = field.NewInt64(table, "member_price")
	p.MemberLevelName = field.NewString(table, "member_level_name")

	p.fillFieldMap()

	return p
}

func (p *pmsMemberPrice) WithContext(ctx context.Context) IPmsMemberPriceDo {
	return p.pmsMemberPriceDo.WithContext(ctx)
}

func (p pmsMemberPrice) TableName() string { return p.pmsMemberPriceDo.TableName() }

func (p pmsMemberPrice) Alias() string { return p.pmsMemberPriceDo.Alias() }

func (p pmsMemberPrice) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsMemberPriceDo.Columns(cols...)
}

func (p *pmsMemberPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsMemberPrice) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["member_level_id"] = p.MemberLevelID
	p.fieldMap["member_price"] = p.MemberPrice
	p.fieldMap["member_level_name"] = p.MemberLevelName
}

func (p pmsMemberPrice) clone(db *gorm.DB) pmsMemberPrice {
	p.pmsMemberPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsMemberPrice) replaceDB(db *gorm.DB) pmsMemberPrice {
	p.pmsMemberPriceDo.ReplaceDB(db)
	return p
}

type pmsMemberPriceDo struct{ gen.DO }

type IPmsMemberPriceDo interface {
	gen.SubQuery
	Debug() IPmsMemberPriceDo
	WithContext(ctx context.Context) IPmsMemberPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsMemberPriceDo
	WriteDB() IPmsMemberPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsMemberPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsMemberPriceDo
	Not(conds ...gen.Condition) IPmsMemberPriceDo
	Or(conds ...gen.Condition) IPmsMemberPriceDo
	Select(conds ...field.Expr) IPmsMemberPriceDo
	Where(conds ...gen.Condition) IPmsMemberPriceDo
	Order(conds ...field.Expr) IPmsMemberPriceDo
	Distinct(cols ...field.Expr) IPmsMemberPriceDo
	Omit(cols ...field.Expr) IPmsMemberPriceDo
	Join(table schema.Tabler, on ...field.Expr) IPmsMemberPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsMemberPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsMemberPriceDo
	Group(cols ...field.Expr) IPmsMemberPriceDo
	Having(conds ...gen.Condition) IPmsMemberPriceDo
	Limit(limit int) IPmsMemberPriceDo
	Offset(offset int) IPmsMemberPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsMemberPriceDo
	Unscoped() IPmsMemberPriceDo
	Create(values ...*model.PmsMemberPrice) error
	CreateInBatches(values []*model.PmsMemberPrice, batchSize int) error
	Save(values ...*model.PmsMemberPrice) error
	First() (*model.PmsMemberPrice, error)
	Take() (*model.PmsMemberPrice, error)
	Last() (*model.PmsMemberPrice, error)
	Find() ([]*model.PmsMemberPrice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsMemberPrice, err error)
	FindInBatches(result *[]*model.PmsMemberPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsMemberPrice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsMemberPriceDo
	Assign(attrs ...field.AssignExpr) IPmsMemberPriceDo
	Joins(fields ...field.RelationField) IPmsMemberPriceDo
	Preload(fields ...field.RelationField) IPmsMemberPriceDo
	FirstOrInit() (*model.PmsMemberPrice, error)
	FirstOrCreate() (*model.PmsMemberPrice, error)
	FindByPage(offset int, limit int) (result []*model.PmsMemberPrice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsMemberPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsMemberPriceDo) Debug() IPmsMemberPriceDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsMemberPriceDo) WithContext(ctx context.Context) IPmsMemberPriceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsMemberPriceDo) ReadDB() IPmsMemberPriceDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsMemberPriceDo) WriteDB() IPmsMemberPriceDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsMemberPriceDo) Session(config *gorm.Session) IPmsMemberPriceDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsMemberPriceDo) Clauses(conds ...clause.Expression) IPmsMemberPriceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsMemberPriceDo) Returning(value interface{}, columns ...string) IPmsMemberPriceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsMemberPriceDo) Not(conds ...gen.Condition) IPmsMemberPriceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsMemberPriceDo) Or(conds ...gen.Condition) IPmsMemberPriceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsMemberPriceDo) Select(conds ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsMemberPriceDo) Where(conds ...gen.Condition) IPmsMemberPriceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsMemberPriceDo) Order(conds ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsMemberPriceDo) Distinct(cols ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsMemberPriceDo) Omit(cols ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsMemberPriceDo) Join(table schema.Tabler, on ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsMemberPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsMemberPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsMemberPriceDo) Group(cols ...field.Expr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsMemberPriceDo) Having(conds ...gen.Condition) IPmsMemberPriceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsMemberPriceDo) Limit(limit int) IPmsMemberPriceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsMemberPriceDo) Offset(offset int) IPmsMemberPriceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsMemberPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsMemberPriceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsMemberPriceDo) Unscoped() IPmsMemberPriceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsMemberPriceDo) Create(values ...*model.PmsMemberPrice) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsMemberPriceDo) CreateInBatches(values []*model.PmsMemberPrice, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsMemberPriceDo) Save(values ...*model.PmsMemberPrice) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsMemberPriceDo) First() (*model.PmsMemberPrice, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsMemberPrice), nil
	}
}

func (p pmsMemberPriceDo) Take() (*model.PmsMemberPrice, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsMemberPrice), nil
	}
}

func (p pmsMemberPriceDo) Last() (*model.PmsMemberPrice, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsMemberPrice), nil
	}
}

func (p pmsMemberPriceDo) Find() ([]*model.PmsMemberPrice, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsMemberPrice), err
}

func (p pmsMemberPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsMemberPrice, err error) {
	buf := make([]*model.PmsMemberPrice, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsMemberPriceDo) FindInBatches(result *[]*model.PmsMemberPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsMemberPriceDo) Attrs(attrs ...field.AssignExpr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsMemberPriceDo) Assign(attrs ...field.AssignExpr) IPmsMemberPriceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsMemberPriceDo) Joins(fields ...field.RelationField) IPmsMemberPriceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsMemberPriceDo) Preload(fields ...field.RelationField) IPmsMemberPriceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsMemberPriceDo) FirstOrInit() (*model.PmsMemberPrice, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsMemberPrice), nil
	}
}

func (p pmsMemberPriceDo) FirstOrCreate() (*model.PmsMemberPrice, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsMemberPrice), nil
	}
}

func (p pmsMemberPriceDo) FindByPage(offset int, limit int) (result []*model.PmsMemberPrice, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsMemberPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsMemberPriceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsMemberPriceDo) Delete(models ...*model.PmsMemberPrice) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsMemberPriceDo) withDO(do gen.Dao) *pmsMemberPriceDo {
	p.DO = *do.(*gen.DO)
	return p
}

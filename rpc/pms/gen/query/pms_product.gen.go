// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProduct(db *gorm.DB, opts ...gen.DOOption) pmsProduct {
	_pmsProduct := pmsProduct{}

	_pmsProduct.pmsProductDo.UseDB(db, opts...)
	_pmsProduct.pmsProductDo.UseModel(&model.PmsProduct{})

	tableName := _pmsProduct.pmsProductDo.TableName()
	_pmsProduct.ALL = field.NewAsterisk(tableName)
	_pmsProduct.ID = field.NewInt64(tableName, "id")
	_pmsProduct.BrandID = field.NewInt64(tableName, "brand_id")
	_pmsProduct.ProductCategoryID = field.NewInt64(tableName, "product_category_id")
	_pmsProduct.FeightTemplateID = field.NewInt64(tableName, "feight_template_id")
	_pmsProduct.ProductAttributeCategoryID = field.NewInt64(tableName, "product_attribute_category_id")
	_pmsProduct.Name = field.NewString(tableName, "name")
	_pmsProduct.Pic = field.NewString(tableName, "pic")
	_pmsProduct.ProductSn = field.NewString(tableName, "product_sn")
	_pmsProduct.DeleteStatus = field.NewInt32(tableName, "delete_status")
	_pmsProduct.PublishStatus = field.NewInt32(tableName, "publish_status")
	_pmsProduct.NewStatus = field.NewInt32(tableName, "new_status")
	_pmsProduct.RecommandStatus = field.NewInt32(tableName, "recommand_status")
	_pmsProduct.VerifyStatus = field.NewInt32(tableName, "verify_status")
	_pmsProduct.Sort = field.NewInt32(tableName, "sort")
	_pmsProduct.Sale = field.NewInt32(tableName, "sale")
	_pmsProduct.Price = field.NewInt64(tableName, "price")
	_pmsProduct.PromotionPrice = field.NewInt64(tableName, "promotion_price")
	_pmsProduct.GiftGrowth = field.NewInt32(tableName, "gift_growth")
	_pmsProduct.GiftPoint = field.NewInt32(tableName, "gift_point")
	_pmsProduct.UsePointLimit = field.NewInt32(tableName, "use_point_limit")
	_pmsProduct.SubTitle = field.NewString(tableName, "sub_title")
	_pmsProduct.Description = field.NewString(tableName, "description")
	_pmsProduct.OriginalPrice = field.NewInt64(tableName, "original_price")
	_pmsProduct.Stock = field.NewInt32(tableName, "stock")
	_pmsProduct.LowStock = field.NewInt32(tableName, "low_stock")
	_pmsProduct.Unit = field.NewString(tableName, "unit")
	_pmsProduct.Weight = field.NewInt64(tableName, "weight")
	_pmsProduct.PreviewStatus = field.NewInt32(tableName, "preview_status")
	_pmsProduct.ServiceIds = field.NewString(tableName, "service_ids")
	_pmsProduct.Keywords = field.NewString(tableName, "keywords")
	_pmsProduct.Note = field.NewString(tableName, "note")
	_pmsProduct.AlbumPics = field.NewString(tableName, "album_pics")
	_pmsProduct.DetailTitle = field.NewString(tableName, "detail_title")
	_pmsProduct.DetailDesc = field.NewString(tableName, "detail_desc")
	_pmsProduct.DetailHTML = field.NewString(tableName, "detail_html")
	_pmsProduct.DetailMobileHTML = field.NewString(tableName, "detail_mobile_html")
	_pmsProduct.PromotionStartTime = field.NewTime(tableName, "promotion_start_time")
	_pmsProduct.PromotionEndTime = field.NewTime(tableName, "promotion_end_time")
	_pmsProduct.PromotionPerLimit = field.NewInt32(tableName, "promotion_per_limit")
	_pmsProduct.PromotionType = field.NewInt32(tableName, "promotion_type")
	_pmsProduct.BrandName = field.NewString(tableName, "brand_name")
	_pmsProduct.ProductCategoryName = field.NewString(tableName, "product_category_name")
	_pmsProduct.ProductCategoryIDArray = field.NewString(tableName, "product_category_id_Array")

	_pmsProduct.fillFieldMap()

	return _pmsProduct
}

// pmsProduct 商品信息
type pmsProduct struct {
	pmsProductDo pmsProductDo

	ALL                        field.Asterisk
	ID                         field.Int64
	BrandID                    field.Int64  // 品牌id
	ProductCategoryID          field.Int64  // 商品分类id
	FeightTemplateID           field.Int64  // 商品运费模板id
	ProductAttributeCategoryID field.Int64  // 商品属性分类id
	Name                       field.String // 商品名称
	Pic                        field.String // 商品图片
	ProductSn                  field.String // 货号
	DeleteStatus               field.Int32  // 删除状态：0->未删除；1->已删除
	PublishStatus              field.Int32  // 上架状态：0->下架；1->上架
	NewStatus                  field.Int32  // 新品状态:0->不是新品；1->新品
	RecommandStatus            field.Int32  // 推荐状态；0->不推荐；1->推荐
	VerifyStatus               field.Int32  // 审核状态：0->未审核；1->审核通过
	Sort                       field.Int32  // 排序
	Sale                       field.Int32  // 销量
	Price                      field.Int64  // 商品价格
	PromotionPrice             field.Int64  // 促销价格
	GiftGrowth                 field.Int32  // 赠送的成长值
	GiftPoint                  field.Int32  // 赠送的积分
	UsePointLimit              field.Int32  // 限制使用的积分数
	SubTitle                   field.String // 副标题
	Description                field.String // 商品描述
	OriginalPrice              field.Int64  // 市场价
	Stock                      field.Int32  // 库存
	LowStock                   field.Int32  // 库存预警值
	Unit                       field.String // 单位
	Weight                     field.Int64  // 商品重量，默认为克
	PreviewStatus              field.Int32  // 是否为预告商品：0->不是；1->是
	ServiceIds                 field.String // 以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
	Keywords                   field.String // 搜索关键字
	Note                       field.String // 备注
	AlbumPics                  field.String // 画册图片，连产品图片限制为5张，以逗号分割
	DetailTitle                field.String // 详情标题
	DetailDesc                 field.String // 详情描述
	DetailHTML                 field.String // 产品详情网页内容
	DetailMobileHTML           field.String // 移动端网页详情
	PromotionStartTime         field.Time   // 促销开始时间
	PromotionEndTime           field.Time   // 促销结束时间
	PromotionPerLimit          field.Int32  // 活动限购数量
	PromotionType              field.Int32  // 促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购
	BrandName                  field.String // 品牌名称
	ProductCategoryName        field.String // 商品分类名称
	ProductCategoryIDArray     field.String // 商品分类id字符串

	fieldMap map[string]field.Expr
}

func (p pmsProduct) Table(newTableName string) *pmsProduct {
	p.pmsProductDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProduct) As(alias string) *pmsProduct {
	p.pmsProductDo.DO = *(p.pmsProductDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProduct) updateTableName(table string) *pmsProduct {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.BrandID = field.NewInt64(table, "brand_id")
	p.ProductCategoryID = field.NewInt64(table, "product_category_id")
	p.FeightTemplateID = field.NewInt64(table, "feight_template_id")
	p.ProductAttributeCategoryID = field.NewInt64(table, "product_attribute_category_id")
	p.Name = field.NewString(table, "name")
	p.Pic = field.NewString(table, "pic")
	p.ProductSn = field.NewString(table, "product_sn")
	p.DeleteStatus = field.NewInt32(table, "delete_status")
	p.PublishStatus = field.NewInt32(table, "publish_status")
	p.NewStatus = field.NewInt32(table, "new_status")
	p.RecommandStatus = field.NewInt32(table, "recommand_status")
	p.VerifyStatus = field.NewInt32(table, "verify_status")
	p.Sort = field.NewInt32(table, "sort")
	p.Sale = field.NewInt32(table, "sale")
	p.Price = field.NewInt64(table, "price")
	p.PromotionPrice = field.NewInt64(table, "promotion_price")
	p.GiftGrowth = field.NewInt32(table, "gift_growth")
	p.GiftPoint = field.NewInt32(table, "gift_point")
	p.UsePointLimit = field.NewInt32(table, "use_point_limit")
	p.SubTitle = field.NewString(table, "sub_title")
	p.Description = field.NewString(table, "description")
	p.OriginalPrice = field.NewInt64(table, "original_price")
	p.Stock = field.NewInt32(table, "stock")
	p.LowStock = field.NewInt32(table, "low_stock")
	p.Unit = field.NewString(table, "unit")
	p.Weight = field.NewInt64(table, "weight")
	p.PreviewStatus = field.NewInt32(table, "preview_status")
	p.ServiceIds = field.NewString(table, "service_ids")
	p.Keywords = field.NewString(table, "keywords")
	p.Note = field.NewString(table, "note")
	p.AlbumPics = field.NewString(table, "album_pics")
	p.DetailTitle = field.NewString(table, "detail_title")
	p.DetailDesc = field.NewString(table, "detail_desc")
	p.DetailHTML = field.NewString(table, "detail_html")
	p.DetailMobileHTML = field.NewString(table, "detail_mobile_html")
	p.PromotionStartTime = field.NewTime(table, "promotion_start_time")
	p.PromotionEndTime = field.NewTime(table, "promotion_end_time")
	p.PromotionPerLimit = field.NewInt32(table, "promotion_per_limit")
	p.PromotionType = field.NewInt32(table, "promotion_type")
	p.BrandName = field.NewString(table, "brand_name")
	p.ProductCategoryName = field.NewString(table, "product_category_name")
	p.ProductCategoryIDArray = field.NewString(table, "product_category_id_Array")

	p.fillFieldMap()

	return p
}

func (p *pmsProduct) WithContext(ctx context.Context) IPmsProductDo {
	return p.pmsProductDo.WithContext(ctx)
}

func (p pmsProduct) TableName() string { return p.pmsProductDo.TableName() }

func (p pmsProduct) Alias() string { return p.pmsProductDo.Alias() }

func (p pmsProduct) Columns(cols ...field.Expr) gen.Columns { return p.pmsProductDo.Columns(cols...) }

func (p *pmsProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProduct) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 43)
	p.fieldMap["id"] = p.ID
	p.fieldMap["brand_id"] = p.BrandID
	p.fieldMap["product_category_id"] = p.ProductCategoryID
	p.fieldMap["feight_template_id"] = p.FeightTemplateID
	p.fieldMap["product_attribute_category_id"] = p.ProductAttributeCategoryID
	p.fieldMap["name"] = p.Name
	p.fieldMap["pic"] = p.Pic
	p.fieldMap["product_sn"] = p.ProductSn
	p.fieldMap["delete_status"] = p.DeleteStatus
	p.fieldMap["publish_status"] = p.PublishStatus
	p.fieldMap["new_status"] = p.NewStatus
	p.fieldMap["recommand_status"] = p.RecommandStatus
	p.fieldMap["verify_status"] = p.VerifyStatus
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["sale"] = p.Sale
	p.fieldMap["price"] = p.Price
	p.fieldMap["promotion_price"] = p.PromotionPrice
	p.fieldMap["gift_growth"] = p.GiftGrowth
	p.fieldMap["gift_point"] = p.GiftPoint
	p.fieldMap["use_point_limit"] = p.UsePointLimit
	p.fieldMap["sub_title"] = p.SubTitle
	p.fieldMap["description"] = p.Description
	p.fieldMap["original_price"] = p.OriginalPrice
	p.fieldMap["stock"] = p.Stock
	p.fieldMap["low_stock"] = p.LowStock
	p.fieldMap["unit"] = p.Unit
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["preview_status"] = p.PreviewStatus
	p.fieldMap["service_ids"] = p.ServiceIds
	p.fieldMap["keywords"] = p.Keywords
	p.fieldMap["note"] = p.Note
	p.fieldMap["album_pics"] = p.AlbumPics
	p.fieldMap["detail_title"] = p.DetailTitle
	p.fieldMap["detail_desc"] = p.DetailDesc
	p.fieldMap["detail_html"] = p.DetailHTML
	p.fieldMap["detail_mobile_html"] = p.DetailMobileHTML
	p.fieldMap["promotion_start_time"] = p.PromotionStartTime
	p.fieldMap["promotion_end_time"] = p.PromotionEndTime
	p.fieldMap["promotion_per_limit"] = p.PromotionPerLimit
	p.fieldMap["promotion_type"] = p.PromotionType
	p.fieldMap["brand_name"] = p.BrandName
	p.fieldMap["product_category_name"] = p.ProductCategoryName
	p.fieldMap["product_category_id_Array"] = p.ProductCategoryIDArray
}

func (p pmsProduct) clone(db *gorm.DB) pmsProduct {
	p.pmsProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProduct) replaceDB(db *gorm.DB) pmsProduct {
	p.pmsProductDo.ReplaceDB(db)
	return p
}

type pmsProductDo struct{ gen.DO }

type IPmsProductDo interface {
	gen.SubQuery
	Debug() IPmsProductDo
	WithContext(ctx context.Context) IPmsProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductDo
	WriteDB() IPmsProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductDo
	Not(conds ...gen.Condition) IPmsProductDo
	Or(conds ...gen.Condition) IPmsProductDo
	Select(conds ...field.Expr) IPmsProductDo
	Where(conds ...gen.Condition) IPmsProductDo
	Order(conds ...field.Expr) IPmsProductDo
	Distinct(cols ...field.Expr) IPmsProductDo
	Omit(cols ...field.Expr) IPmsProductDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductDo
	Group(cols ...field.Expr) IPmsProductDo
	Having(conds ...gen.Condition) IPmsProductDo
	Limit(limit int) IPmsProductDo
	Offset(offset int) IPmsProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductDo
	Unscoped() IPmsProductDo
	Create(values ...*model.PmsProduct) error
	CreateInBatches(values []*model.PmsProduct, batchSize int) error
	Save(values ...*model.PmsProduct) error
	First() (*model.PmsProduct, error)
	Take() (*model.PmsProduct, error)
	Last() (*model.PmsProduct, error)
	Find() ([]*model.PmsProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProduct, err error)
	FindInBatches(result *[]*model.PmsProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductDo
	Assign(attrs ...field.AssignExpr) IPmsProductDo
	Joins(fields ...field.RelationField) IPmsProductDo
	Preload(fields ...field.RelationField) IPmsProductDo
	FirstOrInit() (*model.PmsProduct, error)
	FirstOrCreate() (*model.PmsProduct, error)
	FindByPage(offset int, limit int) (result []*model.PmsProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductDo) Debug() IPmsProductDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductDo) WithContext(ctx context.Context) IPmsProductDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductDo) ReadDB() IPmsProductDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductDo) WriteDB() IPmsProductDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductDo) Session(config *gorm.Session) IPmsProductDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductDo) Clauses(conds ...clause.Expression) IPmsProductDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductDo) Returning(value interface{}, columns ...string) IPmsProductDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductDo) Not(conds ...gen.Condition) IPmsProductDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductDo) Or(conds ...gen.Condition) IPmsProductDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductDo) Select(conds ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductDo) Where(conds ...gen.Condition) IPmsProductDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductDo) Order(conds ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductDo) Distinct(cols ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductDo) Omit(cols ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductDo) Group(cols ...field.Expr) IPmsProductDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductDo) Having(conds ...gen.Condition) IPmsProductDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductDo) Limit(limit int) IPmsProductDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductDo) Offset(offset int) IPmsProductDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductDo) Unscoped() IPmsProductDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductDo) Create(values ...*model.PmsProduct) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductDo) CreateInBatches(values []*model.PmsProduct, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductDo) Save(values ...*model.PmsProduct) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductDo) First() (*model.PmsProduct, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProduct), nil
	}
}

func (p pmsProductDo) Take() (*model.PmsProduct, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProduct), nil
	}
}

func (p pmsProductDo) Last() (*model.PmsProduct, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProduct), nil
	}
}

func (p pmsProductDo) Find() ([]*model.PmsProduct, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProduct), err
}

func (p pmsProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProduct, err error) {
	buf := make([]*model.PmsProduct, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductDo) FindInBatches(result *[]*model.PmsProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductDo) Attrs(attrs ...field.AssignExpr) IPmsProductDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductDo) Assign(attrs ...field.AssignExpr) IPmsProductDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductDo) Joins(fields ...field.RelationField) IPmsProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductDo) Preload(fields ...field.RelationField) IPmsProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductDo) FirstOrInit() (*model.PmsProduct, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProduct), nil
	}
}

func (p pmsProductDo) FirstOrCreate() (*model.PmsProduct, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProduct), nil
	}
}

func (p pmsProductDo) FindByPage(offset int, limit int) (result []*model.PmsProduct, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductDo) Delete(models ...*model.PmsProduct) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductDo) withDO(do gen.Dao) *pmsProductDo {
	p.DO = *do.(*gen.DO)
	return p
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductCollect(db *gorm.DB, opts ...gen.DOOption) pmsProductCollect {
	_pmsProductCollect := pmsProductCollect{}

	_pmsProductCollect.pmsProductCollectDo.UseDB(db, opts...)
	_pmsProductCollect.pmsProductCollectDo.UseModel(&model.PmsProductCollect{})

	tableName := _pmsProductCollect.pmsProductCollectDo.TableName()
	_pmsProductCollect.ALL = field.NewAsterisk(tableName)
	_pmsProductCollect.ID = field.NewInt32(tableName, "id")
	_pmsProductCollect.UserID = field.NewInt32(tableName, "user_id")
	_pmsProductCollect.ValueID = field.NewInt32(tableName, "value_id")
	_pmsProductCollect.CollectType = field.NewBool(tableName, "collect_type")
	_pmsProductCollect.AddTime = field.NewTime(tableName, "add_time")
	_pmsProductCollect.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductCollect.Deleted = field.NewBool(tableName, "deleted")

	_pmsProductCollect.fillFieldMap()

	return _pmsProductCollect
}

// pmsProductCollect 收藏表
type pmsProductCollect struct {
	pmsProductCollectDo pmsProductCollectDo

	ALL         field.Asterisk
	ID          field.Int32
	UserID      field.Int32 // 用户表的用户ID
	ValueID     field.Int32 // 如果type=0，则是商品ID；如果type=1，则是专题ID
	CollectType field.Bool  // 收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	AddTime     field.Time  // 创建时间
	UpdateTime  field.Time  // 更新时间
	Deleted     field.Bool  // 逻辑删除

	fieldMap map[string]field.Expr
}

func (p pmsProductCollect) Table(newTableName string) *pmsProductCollect {
	p.pmsProductCollectDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductCollect) As(alias string) *pmsProductCollect {
	p.pmsProductCollectDo.DO = *(p.pmsProductCollectDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductCollect) updateTableName(table string) *pmsProductCollect {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.UserID = field.NewInt32(table, "user_id")
	p.ValueID = field.NewInt32(table, "value_id")
	p.CollectType = field.NewBool(table, "collect_type")
	p.AddTime = field.NewTime(table, "add_time")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.Deleted = field.NewBool(table, "deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductCollect) WithContext(ctx context.Context) IPmsProductCollectDo {
	return p.pmsProductCollectDo.WithContext(ctx)
}

func (p pmsProductCollect) TableName() string { return p.pmsProductCollectDo.TableName() }

func (p pmsProductCollect) Alias() string { return p.pmsProductCollectDo.Alias() }

func (p pmsProductCollect) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductCollectDo.Columns(cols...)
}

func (p *pmsProductCollect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductCollect) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["value_id"] = p.ValueID
	p.fieldMap["collect_type"] = p.CollectType
	p.fieldMap["add_time"] = p.AddTime
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["deleted"] = p.Deleted
}

func (p pmsProductCollect) clone(db *gorm.DB) pmsProductCollect {
	p.pmsProductCollectDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductCollect) replaceDB(db *gorm.DB) pmsProductCollect {
	p.pmsProductCollectDo.ReplaceDB(db)
	return p
}

type pmsProductCollectDo struct{ gen.DO }

type IPmsProductCollectDo interface {
	gen.SubQuery
	Debug() IPmsProductCollectDo
	WithContext(ctx context.Context) IPmsProductCollectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductCollectDo
	WriteDB() IPmsProductCollectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductCollectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductCollectDo
	Not(conds ...gen.Condition) IPmsProductCollectDo
	Or(conds ...gen.Condition) IPmsProductCollectDo
	Select(conds ...field.Expr) IPmsProductCollectDo
	Where(conds ...gen.Condition) IPmsProductCollectDo
	Order(conds ...field.Expr) IPmsProductCollectDo
	Distinct(cols ...field.Expr) IPmsProductCollectDo
	Omit(cols ...field.Expr) IPmsProductCollectDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductCollectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductCollectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductCollectDo
	Group(cols ...field.Expr) IPmsProductCollectDo
	Having(conds ...gen.Condition) IPmsProductCollectDo
	Limit(limit int) IPmsProductCollectDo
	Offset(offset int) IPmsProductCollectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductCollectDo
	Unscoped() IPmsProductCollectDo
	Create(values ...*model.PmsProductCollect) error
	CreateInBatches(values []*model.PmsProductCollect, batchSize int) error
	Save(values ...*model.PmsProductCollect) error
	First() (*model.PmsProductCollect, error)
	Take() (*model.PmsProductCollect, error)
	Last() (*model.PmsProductCollect, error)
	Find() ([]*model.PmsProductCollect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductCollect, err error)
	FindInBatches(result *[]*model.PmsProductCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductCollect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductCollectDo
	Assign(attrs ...field.AssignExpr) IPmsProductCollectDo
	Joins(fields ...field.RelationField) IPmsProductCollectDo
	Preload(fields ...field.RelationField) IPmsProductCollectDo
	FirstOrInit() (*model.PmsProductCollect, error)
	FirstOrCreate() (*model.PmsProductCollect, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductCollect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductCollectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductCollectDo) Debug() IPmsProductCollectDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductCollectDo) WithContext(ctx context.Context) IPmsProductCollectDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductCollectDo) ReadDB() IPmsProductCollectDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductCollectDo) WriteDB() IPmsProductCollectDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductCollectDo) Session(config *gorm.Session) IPmsProductCollectDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductCollectDo) Clauses(conds ...clause.Expression) IPmsProductCollectDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductCollectDo) Returning(value interface{}, columns ...string) IPmsProductCollectDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductCollectDo) Not(conds ...gen.Condition) IPmsProductCollectDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductCollectDo) Or(conds ...gen.Condition) IPmsProductCollectDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductCollectDo) Select(conds ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductCollectDo) Where(conds ...gen.Condition) IPmsProductCollectDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductCollectDo) Order(conds ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductCollectDo) Distinct(cols ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductCollectDo) Omit(cols ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductCollectDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductCollectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductCollectDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductCollectDo) Group(cols ...field.Expr) IPmsProductCollectDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductCollectDo) Having(conds ...gen.Condition) IPmsProductCollectDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductCollectDo) Limit(limit int) IPmsProductCollectDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductCollectDo) Offset(offset int) IPmsProductCollectDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductCollectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductCollectDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductCollectDo) Unscoped() IPmsProductCollectDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductCollectDo) Create(values ...*model.PmsProductCollect) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductCollectDo) CreateInBatches(values []*model.PmsProductCollect, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductCollectDo) Save(values ...*model.PmsProductCollect) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductCollectDo) First() (*model.PmsProductCollect, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductCollect), nil
	}
}

func (p pmsProductCollectDo) Take() (*model.PmsProductCollect, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductCollect), nil
	}
}

func (p pmsProductCollectDo) Last() (*model.PmsProductCollect, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductCollect), nil
	}
}

func (p pmsProductCollectDo) Find() ([]*model.PmsProductCollect, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductCollect), err
}

func (p pmsProductCollectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductCollect, err error) {
	buf := make([]*model.PmsProductCollect, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductCollectDo) FindInBatches(result *[]*model.PmsProductCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductCollectDo) Attrs(attrs ...field.AssignExpr) IPmsProductCollectDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductCollectDo) Assign(attrs ...field.AssignExpr) IPmsProductCollectDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductCollectDo) Joins(fields ...field.RelationField) IPmsProductCollectDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductCollectDo) Preload(fields ...field.RelationField) IPmsProductCollectDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductCollectDo) FirstOrInit() (*model.PmsProductCollect, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductCollect), nil
	}
}

func (p pmsProductCollectDo) FirstOrCreate() (*model.PmsProductCollect, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductCollect), nil
	}
}

func (p pmsProductCollectDo) FindByPage(offset int, limit int) (result []*model.PmsProductCollect, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductCollectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductCollectDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductCollectDo) Delete(models ...*model.PmsProductCollect) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductCollectDo) withDO(do gen.Dao) *pmsProductCollectDo {
	p.DO = *do.(*gen.DO)
	return p
}

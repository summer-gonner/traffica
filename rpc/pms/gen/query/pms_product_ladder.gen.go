// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductLadder(db *gorm.DB, opts ...gen.DOOption) pmsProductLadder {
	_pmsProductLadder := pmsProductLadder{}

	_pmsProductLadder.pmsProductLadderDo.UseDB(db, opts...)
	_pmsProductLadder.pmsProductLadderDo.UseModel(&model.PmsProductLadder{})

	tableName := _pmsProductLadder.pmsProductLadderDo.TableName()
	_pmsProductLadder.ALL = field.NewAsterisk(tableName)
	_pmsProductLadder.ID = field.NewInt64(tableName, "id")
	_pmsProductLadder.ProductID = field.NewInt64(tableName, "product_id")
	_pmsProductLadder.Count = field.NewInt32(tableName, "count")
	_pmsProductLadder.Discount = field.NewInt64(tableName, "discount")
	_pmsProductLadder.Price = field.NewInt64(tableName, "price")

	_pmsProductLadder.fillFieldMap()

	return _pmsProductLadder
}

// pmsProductLadder 产品阶梯价格表(只针对同商品)
type pmsProductLadder struct {
	pmsProductLadderDo pmsProductLadderDo

	ALL       field.Asterisk
	ID        field.Int64
	ProductID field.Int64
	Count     field.Int32 // 满足的商品数量
	Discount  field.Int64 // 折扣
	Price     field.Int64 // 折后价格

	fieldMap map[string]field.Expr
}

func (p pmsProductLadder) Table(newTableName string) *pmsProductLadder {
	p.pmsProductLadderDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductLadder) As(alias string) *pmsProductLadder {
	p.pmsProductLadderDo.DO = *(p.pmsProductLadderDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductLadder) updateTableName(table string) *pmsProductLadder {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProductID = field.NewInt64(table, "product_id")
	p.Count = field.NewInt32(table, "count")
	p.Discount = field.NewInt64(table, "discount")
	p.Price = field.NewInt64(table, "price")

	p.fillFieldMap()

	return p
}

func (p *pmsProductLadder) WithContext(ctx context.Context) IPmsProductLadderDo {
	return p.pmsProductLadderDo.WithContext(ctx)
}

func (p pmsProductLadder) TableName() string { return p.pmsProductLadderDo.TableName() }

func (p pmsProductLadder) Alias() string { return p.pmsProductLadderDo.Alias() }

func (p pmsProductLadder) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductLadderDo.Columns(cols...)
}

func (p *pmsProductLadder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductLadder) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["count"] = p.Count
	p.fieldMap["discount"] = p.Discount
	p.fieldMap["price"] = p.Price
}

func (p pmsProductLadder) clone(db *gorm.DB) pmsProductLadder {
	p.pmsProductLadderDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductLadder) replaceDB(db *gorm.DB) pmsProductLadder {
	p.pmsProductLadderDo.ReplaceDB(db)
	return p
}

type pmsProductLadderDo struct{ gen.DO }

type IPmsProductLadderDo interface {
	gen.SubQuery
	Debug() IPmsProductLadderDo
	WithContext(ctx context.Context) IPmsProductLadderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductLadderDo
	WriteDB() IPmsProductLadderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductLadderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductLadderDo
	Not(conds ...gen.Condition) IPmsProductLadderDo
	Or(conds ...gen.Condition) IPmsProductLadderDo
	Select(conds ...field.Expr) IPmsProductLadderDo
	Where(conds ...gen.Condition) IPmsProductLadderDo
	Order(conds ...field.Expr) IPmsProductLadderDo
	Distinct(cols ...field.Expr) IPmsProductLadderDo
	Omit(cols ...field.Expr) IPmsProductLadderDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductLadderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductLadderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductLadderDo
	Group(cols ...field.Expr) IPmsProductLadderDo
	Having(conds ...gen.Condition) IPmsProductLadderDo
	Limit(limit int) IPmsProductLadderDo
	Offset(offset int) IPmsProductLadderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductLadderDo
	Unscoped() IPmsProductLadderDo
	Create(values ...*model.PmsProductLadder) error
	CreateInBatches(values []*model.PmsProductLadder, batchSize int) error
	Save(values ...*model.PmsProductLadder) error
	First() (*model.PmsProductLadder, error)
	Take() (*model.PmsProductLadder, error)
	Last() (*model.PmsProductLadder, error)
	Find() ([]*model.PmsProductLadder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductLadder, err error)
	FindInBatches(result *[]*model.PmsProductLadder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductLadder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductLadderDo
	Assign(attrs ...field.AssignExpr) IPmsProductLadderDo
	Joins(fields ...field.RelationField) IPmsProductLadderDo
	Preload(fields ...field.RelationField) IPmsProductLadderDo
	FirstOrInit() (*model.PmsProductLadder, error)
	FirstOrCreate() (*model.PmsProductLadder, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductLadder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductLadderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductLadderDo) Debug() IPmsProductLadderDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductLadderDo) WithContext(ctx context.Context) IPmsProductLadderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductLadderDo) ReadDB() IPmsProductLadderDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductLadderDo) WriteDB() IPmsProductLadderDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductLadderDo) Session(config *gorm.Session) IPmsProductLadderDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductLadderDo) Clauses(conds ...clause.Expression) IPmsProductLadderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductLadderDo) Returning(value interface{}, columns ...string) IPmsProductLadderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductLadderDo) Not(conds ...gen.Condition) IPmsProductLadderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductLadderDo) Or(conds ...gen.Condition) IPmsProductLadderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductLadderDo) Select(conds ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductLadderDo) Where(conds ...gen.Condition) IPmsProductLadderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductLadderDo) Order(conds ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductLadderDo) Distinct(cols ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductLadderDo) Omit(cols ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductLadderDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductLadderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductLadderDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductLadderDo) Group(cols ...field.Expr) IPmsProductLadderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductLadderDo) Having(conds ...gen.Condition) IPmsProductLadderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductLadderDo) Limit(limit int) IPmsProductLadderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductLadderDo) Offset(offset int) IPmsProductLadderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductLadderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductLadderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductLadderDo) Unscoped() IPmsProductLadderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductLadderDo) Create(values ...*model.PmsProductLadder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductLadderDo) CreateInBatches(values []*model.PmsProductLadder, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductLadderDo) Save(values ...*model.PmsProductLadder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductLadderDo) First() (*model.PmsProductLadder, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) Take() (*model.PmsProductLadder, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) Last() (*model.PmsProductLadder, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) Find() ([]*model.PmsProductLadder, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductLadder), err
}

func (p pmsProductLadderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductLadder, err error) {
	buf := make([]*model.PmsProductLadder, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductLadderDo) FindInBatches(result *[]*model.PmsProductLadder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductLadderDo) Attrs(attrs ...field.AssignExpr) IPmsProductLadderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductLadderDo) Assign(attrs ...field.AssignExpr) IPmsProductLadderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductLadderDo) Joins(fields ...field.RelationField) IPmsProductLadderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductLadderDo) Preload(fields ...field.RelationField) IPmsProductLadderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductLadderDo) FirstOrInit() (*model.PmsProductLadder, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) FirstOrCreate() (*model.PmsProductLadder, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) FindByPage(offset int, limit int) (result []*model.PmsProductLadder, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductLadderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductLadderDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductLadderDo) Delete(models ...*model.PmsProductLadder) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductLadderDo) withDO(do gen.Dao) *pmsProductLadderDo {
	p.DO = *do.(*gen.DO)
	return p
}

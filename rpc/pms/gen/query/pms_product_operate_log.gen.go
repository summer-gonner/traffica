// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductOperateLog(db *gorm.DB, opts ...gen.DOOption) pmsProductOperateLog {
	_pmsProductOperateLog := pmsProductOperateLog{}

	_pmsProductOperateLog.pmsProductOperateLogDo.UseDB(db, opts...)
	_pmsProductOperateLog.pmsProductOperateLogDo.UseModel(&model.PmsProductOperateLog{})

	tableName := _pmsProductOperateLog.pmsProductOperateLogDo.TableName()
	_pmsProductOperateLog.ALL = field.NewAsterisk(tableName)
	_pmsProductOperateLog.ID = field.NewInt64(tableName, "id")
	_pmsProductOperateLog.ProductID = field.NewInt64(tableName, "product_id")
	_pmsProductOperateLog.PriceOld = field.NewInt64(tableName, "price_old")
	_pmsProductOperateLog.PriceNew = field.NewInt64(tableName, "price_new")
	_pmsProductOperateLog.SalePriceOld = field.NewInt64(tableName, "sale_price_old")
	_pmsProductOperateLog.SalePriceNew = field.NewInt64(tableName, "sale_price_new")
	_pmsProductOperateLog.GiftPointOld = field.NewInt32(tableName, "gift_point_old")
	_pmsProductOperateLog.GiftPointNew = field.NewInt32(tableName, "gift_point_new")
	_pmsProductOperateLog.UsePointLimitOld = field.NewInt32(tableName, "use_point_limit_old")
	_pmsProductOperateLog.UsePointLimitNew = field.NewInt32(tableName, "use_point_limit_new")
	_pmsProductOperateLog.OperateMan = field.NewString(tableName, "operate_man")
	_pmsProductOperateLog.CreateTime = field.NewTime(tableName, "create_time")

	_pmsProductOperateLog.fillFieldMap()

	return _pmsProductOperateLog
}

type pmsProductOperateLog struct {
	pmsProductOperateLogDo pmsProductOperateLogDo

	ALL              field.Asterisk
	ID               field.Int64
	ProductID        field.Int64
	PriceOld         field.Int64
	PriceNew         field.Int64
	SalePriceOld     field.Int64
	SalePriceNew     field.Int64
	GiftPointOld     field.Int32 // 赠送的积分
	GiftPointNew     field.Int32
	UsePointLimitOld field.Int32
	UsePointLimitNew field.Int32
	OperateMan       field.String // 操作人
	CreateTime       field.Time

	fieldMap map[string]field.Expr
}

func (p pmsProductOperateLog) Table(newTableName string) *pmsProductOperateLog {
	p.pmsProductOperateLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductOperateLog) As(alias string) *pmsProductOperateLog {
	p.pmsProductOperateLogDo.DO = *(p.pmsProductOperateLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductOperateLog) updateTableName(table string) *pmsProductOperateLog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProductID = field.NewInt64(table, "product_id")
	p.PriceOld = field.NewInt64(table, "price_old")
	p.PriceNew = field.NewInt64(table, "price_new")
	p.SalePriceOld = field.NewInt64(table, "sale_price_old")
	p.SalePriceNew = field.NewInt64(table, "sale_price_new")
	p.GiftPointOld = field.NewInt32(table, "gift_point_old")
	p.GiftPointNew = field.NewInt32(table, "gift_point_new")
	p.UsePointLimitOld = field.NewInt32(table, "use_point_limit_old")
	p.UsePointLimitNew = field.NewInt32(table, "use_point_limit_new")
	p.OperateMan = field.NewString(table, "operate_man")
	p.CreateTime = field.NewTime(table, "create_time")

	p.fillFieldMap()

	return p
}

func (p *pmsProductOperateLog) WithContext(ctx context.Context) IPmsProductOperateLogDo {
	return p.pmsProductOperateLogDo.WithContext(ctx)
}

func (p pmsProductOperateLog) TableName() string { return p.pmsProductOperateLogDo.TableName() }

func (p pmsProductOperateLog) Alias() string { return p.pmsProductOperateLogDo.Alias() }

func (p pmsProductOperateLog) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductOperateLogDo.Columns(cols...)
}

func (p *pmsProductOperateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductOperateLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["price_old"] = p.PriceOld
	p.fieldMap["price_new"] = p.PriceNew
	p.fieldMap["sale_price_old"] = p.SalePriceOld
	p.fieldMap["sale_price_new"] = p.SalePriceNew
	p.fieldMap["gift_point_old"] = p.GiftPointOld
	p.fieldMap["gift_point_new"] = p.GiftPointNew
	p.fieldMap["use_point_limit_old"] = p.UsePointLimitOld
	p.fieldMap["use_point_limit_new"] = p.UsePointLimitNew
	p.fieldMap["operate_man"] = p.OperateMan
	p.fieldMap["create_time"] = p.CreateTime
}

func (p pmsProductOperateLog) clone(db *gorm.DB) pmsProductOperateLog {
	p.pmsProductOperateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductOperateLog) replaceDB(db *gorm.DB) pmsProductOperateLog {
	p.pmsProductOperateLogDo.ReplaceDB(db)
	return p
}

type pmsProductOperateLogDo struct{ gen.DO }

type IPmsProductOperateLogDo interface {
	gen.SubQuery
	Debug() IPmsProductOperateLogDo
	WithContext(ctx context.Context) IPmsProductOperateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductOperateLogDo
	WriteDB() IPmsProductOperateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductOperateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductOperateLogDo
	Not(conds ...gen.Condition) IPmsProductOperateLogDo
	Or(conds ...gen.Condition) IPmsProductOperateLogDo
	Select(conds ...field.Expr) IPmsProductOperateLogDo
	Where(conds ...gen.Condition) IPmsProductOperateLogDo
	Order(conds ...field.Expr) IPmsProductOperateLogDo
	Distinct(cols ...field.Expr) IPmsProductOperateLogDo
	Omit(cols ...field.Expr) IPmsProductOperateLogDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductOperateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductOperateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductOperateLogDo
	Group(cols ...field.Expr) IPmsProductOperateLogDo
	Having(conds ...gen.Condition) IPmsProductOperateLogDo
	Limit(limit int) IPmsProductOperateLogDo
	Offset(offset int) IPmsProductOperateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductOperateLogDo
	Unscoped() IPmsProductOperateLogDo
	Create(values ...*model.PmsProductOperateLog) error
	CreateInBatches(values []*model.PmsProductOperateLog, batchSize int) error
	Save(values ...*model.PmsProductOperateLog) error
	First() (*model.PmsProductOperateLog, error)
	Take() (*model.PmsProductOperateLog, error)
	Last() (*model.PmsProductOperateLog, error)
	Find() ([]*model.PmsProductOperateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductOperateLog, err error)
	FindInBatches(result *[]*model.PmsProductOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductOperateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductOperateLogDo
	Assign(attrs ...field.AssignExpr) IPmsProductOperateLogDo
	Joins(fields ...field.RelationField) IPmsProductOperateLogDo
	Preload(fields ...field.RelationField) IPmsProductOperateLogDo
	FirstOrInit() (*model.PmsProductOperateLog, error)
	FirstOrCreate() (*model.PmsProductOperateLog, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductOperateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductOperateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductOperateLogDo) Debug() IPmsProductOperateLogDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductOperateLogDo) WithContext(ctx context.Context) IPmsProductOperateLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductOperateLogDo) ReadDB() IPmsProductOperateLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductOperateLogDo) WriteDB() IPmsProductOperateLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductOperateLogDo) Session(config *gorm.Session) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductOperateLogDo) Clauses(conds ...clause.Expression) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductOperateLogDo) Returning(value interface{}, columns ...string) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductOperateLogDo) Not(conds ...gen.Condition) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductOperateLogDo) Or(conds ...gen.Condition) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductOperateLogDo) Select(conds ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductOperateLogDo) Where(conds ...gen.Condition) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductOperateLogDo) Order(conds ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductOperateLogDo) Distinct(cols ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductOperateLogDo) Omit(cols ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductOperateLogDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductOperateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductOperateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductOperateLogDo) Group(cols ...field.Expr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductOperateLogDo) Having(conds ...gen.Condition) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductOperateLogDo) Limit(limit int) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductOperateLogDo) Offset(offset int) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductOperateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductOperateLogDo) Unscoped() IPmsProductOperateLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductOperateLogDo) Create(values ...*model.PmsProductOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductOperateLogDo) CreateInBatches(values []*model.PmsProductOperateLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductOperateLogDo) Save(values ...*model.PmsProductOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductOperateLogDo) First() (*model.PmsProductOperateLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductOperateLog), nil
	}
}

func (p pmsProductOperateLogDo) Take() (*model.PmsProductOperateLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductOperateLog), nil
	}
}

func (p pmsProductOperateLogDo) Last() (*model.PmsProductOperateLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductOperateLog), nil
	}
}

func (p pmsProductOperateLogDo) Find() ([]*model.PmsProductOperateLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductOperateLog), err
}

func (p pmsProductOperateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductOperateLog, err error) {
	buf := make([]*model.PmsProductOperateLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductOperateLogDo) FindInBatches(result *[]*model.PmsProductOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductOperateLogDo) Attrs(attrs ...field.AssignExpr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductOperateLogDo) Assign(attrs ...field.AssignExpr) IPmsProductOperateLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductOperateLogDo) Joins(fields ...field.RelationField) IPmsProductOperateLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductOperateLogDo) Preload(fields ...field.RelationField) IPmsProductOperateLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductOperateLogDo) FirstOrInit() (*model.PmsProductOperateLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductOperateLog), nil
	}
}

func (p pmsProductOperateLogDo) FirstOrCreate() (*model.PmsProductOperateLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductOperateLog), nil
	}
}

func (p pmsProductOperateLogDo) FindByPage(offset int, limit int) (result []*model.PmsProductOperateLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductOperateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductOperateLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductOperateLogDo) Delete(models ...*model.PmsProductOperateLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductOperateLogDo) withDO(do gen.Dao) *pmsProductOperateLogDo {
	p.DO = *do.(*gen.DO)
	return p
}

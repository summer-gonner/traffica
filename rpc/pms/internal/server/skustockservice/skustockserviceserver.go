// Code generated by goctl. DO NOT EDIT.
// Source: pms.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/pms/internal/logic/skustockservice"
	"github.com/feihua/zero-admin/rpc/pms/internal/svc"
	"github.com/feihua/zero-admin/rpc/pms/pmsclient"
)

type SkuStockServiceServer struct {
	svcCtx *svc.ServiceContext
	pmsclient.UnimplementedSkuStockServiceServer
}

func NewSkuStockServiceServer(svcCtx *svc.ServiceContext) *SkuStockServiceServer {
	return &SkuStockServiceServer{
		svcCtx: svcCtx,
	}
}

// 添加sku的库存
func (s *SkuStockServiceServer) AddSkuStock(ctx context.Context, in *pmsclient.AddSkuStockReq) (*pmsclient.AddSkuStockResp, error) {
	l := skustockservicelogic.NewAddSkuStockLogic(ctx, s.svcCtx)
	return l.AddSkuStock(in)
}

// 删除sku的库存
func (s *SkuStockServiceServer) DeleteSkuStock(ctx context.Context, in *pmsclient.DeleteSkuStockReq) (*pmsclient.DeleteSkuStockResp, error) {
	l := skustockservicelogic.NewDeleteSkuStockLogic(ctx, s.svcCtx)
	return l.DeleteSkuStock(in)
}

// 更新sku的库存
func (s *SkuStockServiceServer) UpdateSkuStock(ctx context.Context, in *pmsclient.UpdateSkuStockReq) (*pmsclient.UpdateSkuStockResp, error) {
	l := skustockservicelogic.NewUpdateSkuStockLogic(ctx, s.svcCtx)
	return l.UpdateSkuStock(in)
}

// 查询sku的库存详情
func (s *SkuStockServiceServer) QuerySkuStockDetail(ctx context.Context, in *pmsclient.QuerySkuStockDetailReq) (*pmsclient.QuerySkuStockDetailResp, error) {
	l := skustockservicelogic.NewQuerySkuStockDetailLogic(ctx, s.svcCtx)
	return l.QuerySkuStockDetail(in)
}

// 查询sku的库存列表
func (s *SkuStockServiceServer) QuerySkuStockList(ctx context.Context, in *pmsclient.QuerySkuStockListReq) (*pmsclient.QuerySkuStockListResp, error) {
	l := skustockservicelogic.NewQuerySkuStockListLogic(ctx, s.svcCtx)
	return l.QuerySkuStockList(in)
}

// 取消订单的时候,释放库存
func (s *SkuStockServiceServer) ReleaseSkuStockLock(ctx context.Context, in *pmsclient.ReleaseSkuStockLockReq) (*pmsclient.ReleaseSkuStockLockResp, error) {
	l := skustockservicelogic.NewReleaseSkuStockLockLogic(ctx, s.svcCtx)
	return l.ReleaseSkuStockLock(in)
}

// 下单的时候,锁定库存
func (s *SkuStockServiceServer) LockSkuStockLock(ctx context.Context, in *pmsclient.LockSkuStockLockReq) (*pmsclient.LockSkuStockLockResp, error) {
	l := skustockservicelogic.NewLockSkuStockLockLogic(ctx, s.svcCtx)
	return l.LockSkuStockLock(in)
}

// 根据ProductSkuId查询sku
func (s *SkuStockServiceServer) QuerySkuStockByProductSkuId(ctx context.Context, in *pmsclient.QuerySkuStockByProductSkuIdReq) (*pmsclient.SkuStockListData, error) {
	l := skustockservicelogic.NewQuerySkuStockByProductSkuIdLogic(ctx, s.svcCtx)
	return l.QuerySkuStockByProductSkuId(in)
}

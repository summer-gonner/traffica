// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: rpc/pms/pms.proto

package pmsclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加品牌表
type AddBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigPic              string `protobuf:"bytes,1,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	BrandStory          string `protobuf:"bytes,2,opt,name=brand_story,json=brandStory,proto3" json:"brand_story,omitempty"`                                //品牌故事
	CreateBy            string `protobuf:"bytes,3,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                      //创建者
	Sort                int32  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	FactoryStatus       int32  `protobuf:"varint,5,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"`                      //是否为品牌制造商：0->不是；1->是
	FirstLetter         string `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	ShowStatus          int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                               //品牌显示状态
	Logo                string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	Name                string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	ProductCommentCount int32  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	ProductCount        int32  `protobuf:"varint,11,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                        //产品数量
	RecommendStatus     int32  `protobuf:"varint,12,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态
}

func (x *AddBrandReq) Reset() {
	*x = AddBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBrandReq) ProtoMessage() {}

func (x *AddBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBrandReq.ProtoReflect.Descriptor instead.
func (*AddBrandReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{0}
}

func (x *AddBrandReq) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *AddBrandReq) GetBrandStory() string {
	if x != nil {
		return x.BrandStory
	}
	return ""
}

func (x *AddBrandReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AddBrandReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddBrandReq) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *AddBrandReq) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *AddBrandReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddBrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AddBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBrandReq) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *AddBrandReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *AddBrandReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

type AddBrandResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddBrandResp) Reset() {
	*x = AddBrandResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBrandResp) ProtoMessage() {}

func (x *AddBrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBrandResp.ProtoReflect.Descriptor instead.
func (*AddBrandResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{1}
}

func (x *AddBrandResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除品牌表
type DeleteBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteBrandReq) Reset() {
	*x = DeleteBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBrandReq) ProtoMessage() {}

func (x *DeleteBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBrandReq.ProtoReflect.Descriptor instead.
func (*DeleteBrandReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteBrandReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteBrandResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteBrandResp) Reset() {
	*x = DeleteBrandResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBrandResp) ProtoMessage() {}

func (x *DeleteBrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBrandResp.ProtoReflect.Descriptor instead.
func (*DeleteBrandResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteBrandResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新品牌表
type UpdateBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigPic              string `protobuf:"bytes,1,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	BrandStory          string `protobuf:"bytes,2,opt,name=brand_story,json=brandStory,proto3" json:"brand_story,omitempty"`                                //品牌故事
	Sort                int32  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	UpdateBy            string `protobuf:"bytes,4,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                      //更新者
	FactoryStatus       int32  `protobuf:"varint,5,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"`                      //是否为品牌制造商：0->不是；1->是
	FirstLetter         string `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Id                  int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Logo                string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	Name                string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	ProductCommentCount int32  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	ProductCount        int32  `protobuf:"varint,11,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                        //产品数量
	RecommendStatus     int32  `protobuf:"varint,12,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态
	ShowStatus          int32  `protobuf:"varint,13,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                              //品牌显示状态
}

func (x *UpdateBrandReq) Reset() {
	*x = UpdateBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandReq) ProtoMessage() {}

func (x *UpdateBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandReq.ProtoReflect.Descriptor instead.
func (*UpdateBrandReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBrandReq) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *UpdateBrandReq) GetBrandStory() string {
	if x != nil {
		return x.BrandStory
	}
	return ""
}

func (x *UpdateBrandReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateBrandReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UpdateBrandReq) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *UpdateBrandReq) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *UpdateBrandReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdateBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBrandReq) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *UpdateBrandReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *UpdateBrandReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *UpdateBrandReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateBrandResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateBrandResp) Reset() {
	*x = UpdateBrandResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandResp) ProtoMessage() {}

func (x *UpdateBrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandResp.ProtoReflect.Descriptor instead.
func (*UpdateBrandResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBrandResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询品牌表详情
type QueryBrandDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryBrandDetailReq) Reset() {
	*x = QueryBrandDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBrandDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBrandDetailReq) ProtoMessage() {}

func (x *QueryBrandDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBrandDetailReq.ProtoReflect.Descriptor instead.
func (*QueryBrandDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{6}
}

func (x *QueryBrandDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryBrandDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigPic              string `protobuf:"bytes,1,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	BrandStory          string `protobuf:"bytes,2,opt,name=brand_story,json=brandStory,proto3" json:"brand_story,omitempty"`                                //品牌故事
	CreateBy            string `protobuf:"bytes,3,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                      //创建者
	CreateTime          string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                //创建时间
	FactoryStatus       int32  `protobuf:"varint,5,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"`                      //是否为品牌制造商：0->不是；1->是
	FirstLetter         string `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Id                  int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Logo                string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	Name                string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	ProductCommentCount int32  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	ProductCount        int32  `protobuf:"varint,11,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                        //产品数量
	RecommendStatus     int32  `protobuf:"varint,12,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态
	ShowStatus          int32  `protobuf:"varint,13,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                              //品牌显示状态
	Sort                int32  `protobuf:"varint,14,opt,name=sort,proto3" json:"sort,omitempty"`                                                            //排序
	UpdateBy            string `protobuf:"bytes,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                     //更新者
	UpdateTime          string `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
}

func (x *QueryBrandDetailResp) Reset() {
	*x = QueryBrandDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBrandDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBrandDetailResp) ProtoMessage() {}

func (x *QueryBrandDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBrandDetailResp.ProtoReflect.Descriptor instead.
func (*QueryBrandDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{7}
}

func (x *QueryBrandDetailResp) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *QueryBrandDetailResp) GetBrandStory() string {
	if x != nil {
		return x.BrandStory
	}
	return ""
}

func (x *QueryBrandDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QueryBrandDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryBrandDetailResp) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *QueryBrandDetailResp) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *QueryBrandDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryBrandDetailResp) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *QueryBrandDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryBrandDetailResp) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *QueryBrandDetailResp) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *QueryBrandDetailResp) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QueryBrandDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryBrandDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryBrandDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QueryBrandDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询品牌表列表
type QueryBrandListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum         int64  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                         //第几页
	PageSize        int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                      //每页的数量
	FactoryStatus   int32  `protobuf:"varint,3,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"`       //是否为品牌制造商：0->不是；1->是
	RecommendStatus int32  `protobuf:"varint,4,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态
	ShowStatus      int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                //品牌显示状态
	Name            string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                               //品牌名称
}

func (x *QueryBrandListReq) Reset() {
	*x = QueryBrandListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBrandListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBrandListReq) ProtoMessage() {}

func (x *QueryBrandListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBrandListReq.ProtoReflect.Descriptor instead.
func (*QueryBrandListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{8}
}

func (x *QueryBrandListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryBrandListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBrandListReq) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *QueryBrandListReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QueryBrandListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryBrandListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BrandListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigPic              string `protobuf:"bytes,1,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	BrandStory          string `protobuf:"bytes,2,opt,name=brand_story,json=brandStory,proto3" json:"brand_story,omitempty"`                                //品牌故事
	CreateBy            string `protobuf:"bytes,3,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                      //创建者
	CreateTime          string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                //创建时间
	FactoryStatus       int32  `protobuf:"varint,5,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"`                      //是否为品牌制造商：0->不是；1->是
	FirstLetter         string `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Id                  int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Logo                string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	Name                string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	ProductCommentCount int32  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	ProductCount        int32  `protobuf:"varint,11,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                        //产品数量
	RecommendStatus     int32  `protobuf:"varint,12,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态
	ShowStatus          int32  `protobuf:"varint,13,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                              //品牌显示状态
	Sort                int32  `protobuf:"varint,14,opt,name=sort,proto3" json:"sort,omitempty"`                                                            //排序
	UpdateBy            string `protobuf:"bytes,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                     //更新者
	UpdateTime          string `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
}

func (x *BrandListData) Reset() {
	*x = BrandListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandListData) ProtoMessage() {}

func (x *BrandListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandListData.ProtoReflect.Descriptor instead.
func (*BrandListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{9}
}

func (x *BrandListData) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *BrandListData) GetBrandStory() string {
	if x != nil {
		return x.BrandStory
	}
	return ""
}

func (x *BrandListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *BrandListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BrandListData) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *BrandListData) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *BrandListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandListData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *BrandListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandListData) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *BrandListData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *BrandListData) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *BrandListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *BrandListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BrandListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *BrandListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryBrandListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*BrandListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryBrandListResp) Reset() {
	*x = QueryBrandListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBrandListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBrandListResp) ProtoMessage() {}

func (x *QueryBrandListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBrandListResp.ProtoReflect.Descriptor instead.
func (*QueryBrandListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{10}
}

func (x *QueryBrandListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryBrandListResp) GetList() []*BrandListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryBrandListByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *QueryBrandListByIdsReq) Reset() {
	*x = QueryBrandListByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBrandListByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBrandListByIdsReq) ProtoMessage() {}

func (x *QueryBrandListByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBrandListByIdsReq.ProtoReflect.Descriptor instead.
func (*QueryBrandListByIdsReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{11}
}

func (x *QueryBrandListByIdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UpdateBrandShowStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	ShowStatus int32   `protobuf:"varint,2,opt,name=ShowStatus,proto3" json:"ShowStatus,omitempty"`
}

func (x *UpdateBrandShowStatusReq) Reset() {
	*x = UpdateBrandShowStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandShowStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandShowStatusReq) ProtoMessage() {}

func (x *UpdateBrandShowStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandShowStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateBrandShowStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBrandShowStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateBrandShowStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateBrandFactoryStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids           []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	FactoryStatus int32   `protobuf:"varint,2,opt,name=FactoryStatus,proto3" json:"FactoryStatus,omitempty"`
}

func (x *UpdateBrandFactoryStatusReq) Reset() {
	*x = UpdateBrandFactoryStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandFactoryStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandFactoryStatusReq) ProtoMessage() {}

func (x *UpdateBrandFactoryStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandFactoryStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateBrandFactoryStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateBrandFactoryStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateBrandFactoryStatusReq) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

type UpdateBrandRecommendStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids             []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	RecommendStatus int32   `protobuf:"varint,2,opt,name=RecommendStatus,proto3" json:"RecommendStatus,omitempty"`
}

func (x *UpdateBrandRecommendStatusReq) Reset() {
	*x = UpdateBrandRecommendStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandRecommendStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandRecommendStatusReq) ProtoMessage() {}

func (x *UpdateBrandRecommendStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandRecommendStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateBrandRecommendStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateBrandRecommendStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateBrandRecommendStatusReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

type UpdateBrandStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateBrandStatusResp) Reset() {
	*x = UpdateBrandStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandStatusResp) ProtoMessage() {}

func (x *UpdateBrandStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateBrandStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateBrandStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 添加商品评价表
type AddCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectCount     int32  `protobuf:"varint,1,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`            //
	Content          string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                           //
	Star             int32  `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty"`                                                //评价星数：0->5
	ShowStatus       int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                  //
	MemberIcon       string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                   //评论用户头像
	MemberIp         string `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	MemberNickName   string `protobuf:"bytes,7,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //
	Pics             string `protobuf:"bytes,8,opt,name=pics,proto3" json:"pics,omitempty"`                                                 //上传图片地址，以逗号隔开
	ProductAttribute string `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	ProductId        int64  `protobuf:"varint,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    //
	ProductName      string `protobuf:"bytes,11,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`               //
	ReadCount        int32  `protobuf:"varint,12,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //
	ReplayCount      int32  `protobuf:"varint,13,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //
}

func (x *AddCommentReq) Reset() {
	*x = AddCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReq) ProtoMessage() {}

func (x *AddCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReq.ProtoReflect.Descriptor instead.
func (*AddCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{16}
}

func (x *AddCommentReq) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *AddCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddCommentReq) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *AddCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *AddCommentReq) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *AddCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *AddCommentReq) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *AddCommentReq) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *AddCommentReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddCommentReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AddCommentReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *AddCommentReq) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

type AddCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddCommentResp) Reset() {
	*x = AddCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentResp) ProtoMessage() {}

func (x *AddCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentResp.ProtoReflect.Descriptor instead.
func (*AddCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{17}
}

func (x *AddCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品评价表
type DeleteCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCommentReq) Reset() {
	*x = DeleteCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReq) ProtoMessage() {}

func (x *DeleteCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteCommentReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteCommentResp) Reset() {
	*x = DeleteCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentResp) ProtoMessage() {}

func (x *DeleteCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品评价表
type UpdateCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectCount     int32  `protobuf:"varint,1,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`            //
	Content          string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                           //
	Star             int32  `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty"`                                                //评价星数：0->5
	Id               int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                    //
	MemberIcon       string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                   //评论用户头像
	MemberIp         string `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	MemberNickName   string `protobuf:"bytes,7,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //
	Pics             string `protobuf:"bytes,8,opt,name=pics,proto3" json:"pics,omitempty"`                                                 //上传图片地址，以逗号隔开
	ProductAttribute string `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	ProductId        int64  `protobuf:"varint,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    //
	ProductName      string `protobuf:"bytes,11,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`               //
	ReadCount        int32  `protobuf:"varint,12,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //
	ReplayCount      int32  `protobuf:"varint,13,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //
	ShowStatus       int32  `protobuf:"varint,14,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                 //
}

func (x *UpdateCommentReq) Reset() {
	*x = UpdateCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReq) ProtoMessage() {}

func (x *UpdateCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReq.ProtoReflect.Descriptor instead.
func (*UpdateCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateCommentReq) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *UpdateCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateCommentReq) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *UpdateCommentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *UpdateCommentReq) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *UpdateCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *UpdateCommentReq) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *UpdateCommentReq) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *UpdateCommentReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateCommentReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UpdateCommentReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *UpdateCommentReq) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

func (x *UpdateCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCommentResp) Reset() {
	*x = UpdateCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentResp) ProtoMessage() {}

func (x *UpdateCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentResp.ProtoReflect.Descriptor instead.
func (*UpdateCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品评价表详情
type QueryCommentDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryCommentDetailReq) Reset() {
	*x = QueryCommentDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentDetailReq) ProtoMessage() {}

func (x *QueryCommentDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCommentDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{22}
}

func (x *QueryCommentDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCommentDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectCount     int32  `protobuf:"varint,1,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`            //
	Content          string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                           //
	CreateTime       string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                   //
	Id               int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                    //
	MemberIcon       string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                   //评论用户头像
	MemberIp         string `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	MemberNickName   string `protobuf:"bytes,7,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //
	Pics             string `protobuf:"bytes,8,opt,name=pics,proto3" json:"pics,omitempty"`                                                 //上传图片地址，以逗号隔开
	ProductAttribute string `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	ProductId        int64  `protobuf:"varint,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    //
	ProductName      string `protobuf:"bytes,11,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`               //
	ReadCount        int32  `protobuf:"varint,12,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //
	ReplayCount      int32  `protobuf:"varint,13,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //
	ShowStatus       int32  `protobuf:"varint,14,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                 //
	Star             int32  `protobuf:"varint,15,opt,name=star,proto3" json:"star,omitempty"`                                               //评价星数：0->5
}

func (x *QueryCommentDetailResp) Reset() {
	*x = QueryCommentDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentDetailResp) ProtoMessage() {}

func (x *QueryCommentDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCommentDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{23}
}

func (x *QueryCommentDetailResp) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *QueryCommentDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryCommentDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryCommentDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCommentDetailResp) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QueryCommentDetailResp) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *QueryCommentDetailResp) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QueryCommentDetailResp) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *QueryCommentDetailResp) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *QueryCommentDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryCommentDetailResp) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *QueryCommentDetailResp) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QueryCommentDetailResp) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

func (x *QueryCommentDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryCommentDetailResp) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

// 分页查询商品评价表列表
type QueryCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum   int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize  int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
	ProductId int64 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QueryCommentListReq) Reset() {
	*x = QueryCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentListReq) ProtoMessage() {}

func (x *QueryCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentListReq.ProtoReflect.Descriptor instead.
func (*QueryCommentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{24}
}

func (x *QueryCommentListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCommentListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryCommentListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type CommentListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectCount     int32  `protobuf:"varint,1,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`            //
	Content          string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                           //
	CreateTime       string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                   //
	Id               int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                    //
	MemberIcon       string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                   //评论用户头像
	MemberIp         string `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	MemberNickName   string `protobuf:"bytes,7,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //
	Pics             string `protobuf:"bytes,8,opt,name=pics,proto3" json:"pics,omitempty"`                                                 //上传图片地址，以逗号隔开
	ProductAttribute string `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	ProductId        int64  `protobuf:"varint,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    //
	ProductName      string `protobuf:"bytes,11,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`               //
	ReadCount        int32  `protobuf:"varint,12,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //
	ReplayCount      int32  `protobuf:"varint,13,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //
	ShowStatus       int32  `protobuf:"varint,14,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                 //
	Star             int32  `protobuf:"varint,15,opt,name=star,proto3" json:"star,omitempty"`                                               //评价星数：0->5
}

func (x *CommentListData) Reset() {
	*x = CommentListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListData) ProtoMessage() {}

func (x *CommentListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListData.ProtoReflect.Descriptor instead.
func (*CommentListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{25}
}

func (x *CommentListData) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *CommentListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CommentListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentListData) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *CommentListData) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *CommentListData) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *CommentListData) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *CommentListData) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *CommentListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *CommentListData) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *CommentListData) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *CommentListData) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

func (x *CommentListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *CommentListData) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

type QueryCommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CommentListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCommentListResp) Reset() {
	*x = QueryCommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentListResp) ProtoMessage() {}

func (x *QueryCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentListResp.ProtoReflect.Descriptor instead.
func (*QueryCommentListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{26}
}

func (x *QueryCommentListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCommentListResp) GetList() []*CommentListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品评价回复表
type AddCommentReplayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId      int64  `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //
	Content        string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                       //
	CreateTime     string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //
	Id             int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                //
	MemberIcon     string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //
	MemberNickName string `protobuf:"bytes,6,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //
	Type           int32  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
}

func (x *AddCommentReplayReq) Reset() {
	*x = AddCommentReplayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentReplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReplayReq) ProtoMessage() {}

func (x *AddCommentReplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReplayReq.ProtoReflect.Descriptor instead.
func (*AddCommentReplayReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{27}
}

func (x *AddCommentReplayReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *AddCommentReplayReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddCommentReplayReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AddCommentReplayReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddCommentReplayReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *AddCommentReplayReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *AddCommentReplayReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddCommentReplayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddCommentReplayResp) Reset() {
	*x = AddCommentReplayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentReplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReplayResp) ProtoMessage() {}

func (x *AddCommentReplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReplayResp.ProtoReflect.Descriptor instead.
func (*AddCommentReplayResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{28}
}

func (x *AddCommentReplayResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品评价回复表
type DeleteCommentReplayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCommentReplayReq) Reset() {
	*x = DeleteCommentReplayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentReplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReplayReq) ProtoMessage() {}

func (x *DeleteCommentReplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReplayReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReplayReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteCommentReplayReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteCommentReplayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteCommentReplayResp) Reset() {
	*x = DeleteCommentReplayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentReplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReplayResp) ProtoMessage() {}

func (x *DeleteCommentReplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReplayResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentReplayResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteCommentReplayResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品评价回复表
type UpdateCommentReplayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId      int64  `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //
	Content        string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                       //
	CreateTime     string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //
	Id             int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                //
	MemberIcon     string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //
	MemberNickName string `protobuf:"bytes,6,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //
	Type           int32  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
}

func (x *UpdateCommentReplayReq) Reset() {
	*x = UpdateCommentReplayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentReplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReplayReq) ProtoMessage() {}

func (x *UpdateCommentReplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReplayReq.ProtoReflect.Descriptor instead.
func (*UpdateCommentReplayReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateCommentReplayReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *UpdateCommentReplayReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCommentReplayReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type UpdateCommentReplayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCommentReplayResp) Reset() {
	*x = UpdateCommentReplayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentReplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReplayResp) ProtoMessage() {}

func (x *UpdateCommentReplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReplayResp.ProtoReflect.Descriptor instead.
func (*UpdateCommentReplayResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateCommentReplayResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询产品评价回复表详情
type QueryCommentReplayDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryCommentReplayDetailReq) Reset() {
	*x = QueryCommentReplayDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentReplayDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayDetailReq) ProtoMessage() {}

func (x *QueryCommentReplayDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{33}
}

func (x *QueryCommentReplayDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCommentReplayDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId      int64  `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //
	Content        string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                       //
	CreateTime     string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //
	Id             int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                //
	MemberIcon     string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //
	MemberNickName string `protobuf:"bytes,6,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //
	Type           int32  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
}

func (x *QueryCommentReplayDetailResp) Reset() {
	*x = QueryCommentReplayDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentReplayDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayDetailResp) ProtoMessage() {}

func (x *QueryCommentReplayDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{34}
}

func (x *QueryCommentReplayDetailResp) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *QueryCommentReplayDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCommentReplayDetailResp) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 分页查询产品评价回复表列表
type QueryCommentReplayListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum   int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize  int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
	CommentId int64 `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` //
}

func (x *QueryCommentReplayListReq) Reset() {
	*x = QueryCommentReplayListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentReplayListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayListReq) ProtoMessage() {}

func (x *QueryCommentReplayListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayListReq.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{35}
}

func (x *QueryCommentReplayListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCommentReplayListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryCommentReplayListReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type CommentReplayListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId      int64  `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //
	Content        string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                       //
	CreateTime     string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //
	Id             int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                //
	MemberIcon     string `protobuf:"bytes,5,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //
	MemberNickName string `protobuf:"bytes,6,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //
	Type           int32  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
}

func (x *CommentReplayListData) Reset() {
	*x = CommentReplayListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReplayListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReplayListData) ProtoMessage() {}

func (x *CommentReplayListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReplayListData.ProtoReflect.Descriptor instead.
func (*CommentReplayListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{36}
}

func (x *CommentReplayListData) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *CommentReplayListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentReplayListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CommentReplayListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentReplayListData) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *CommentReplayListData) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *CommentReplayListData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryCommentReplayListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CommentReplayListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCommentReplayListResp) Reset() {
	*x = QueryCommentReplayListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCommentReplayListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayListResp) ProtoMessage() {}

func (x *QueryCommentReplayListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayListResp.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{37}
}

func (x *QueryCommentReplayListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCommentReplayListResp) GetList() []*CommentReplayListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加运费模版
type AddFeightTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeType     int32  `protobuf:"varint,1,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	ContinueFee    int64  `protobuf:"varint,2,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //
	ContinueWeight int64  `protobuf:"varint,3,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //
	Dest           string `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	FirstFee       int64  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	FirstWeight    int64  `protobuf:"varint,6,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	Id             int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
}

func (x *AddFeightTemplateReq) Reset() {
	*x = AddFeightTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeightTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeightTemplateReq) ProtoMessage() {}

func (x *AddFeightTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeightTemplateReq.ProtoReflect.Descriptor instead.
func (*AddFeightTemplateReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{38}
}

func (x *AddFeightTemplateReq) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *AddFeightTemplateReq) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *AddFeightTemplateReq) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *AddFeightTemplateReq) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *AddFeightTemplateReq) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *AddFeightTemplateReq) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *AddFeightTemplateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddFeightTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddFeightTemplateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddFeightTemplateResp) Reset() {
	*x = AddFeightTemplateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeightTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeightTemplateResp) ProtoMessage() {}

func (x *AddFeightTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeightTemplateResp.ProtoReflect.Descriptor instead.
func (*AddFeightTemplateResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{39}
}

func (x *AddFeightTemplateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除运费模版
type DeleteFeightTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteFeightTemplateReq) Reset() {
	*x = DeleteFeightTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeightTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeightTemplateReq) ProtoMessage() {}

func (x *DeleteFeightTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeightTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteFeightTemplateReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteFeightTemplateReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteFeightTemplateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteFeightTemplateResp) Reset() {
	*x = DeleteFeightTemplateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeightTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeightTemplateResp) ProtoMessage() {}

func (x *DeleteFeightTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeightTemplateResp.ProtoReflect.Descriptor instead.
func (*DeleteFeightTemplateResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteFeightTemplateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新运费模版
type UpdateFeightTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeType     int32  `protobuf:"varint,1,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	ContinueFee    int64  `protobuf:"varint,2,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //
	ContinueWeight int64  `protobuf:"varint,3,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //
	Dest           string `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	FirstFee       int64  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	FirstWeight    int64  `protobuf:"varint,6,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	Id             int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
}

func (x *UpdateFeightTemplateReq) Reset() {
	*x = UpdateFeightTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeightTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeightTemplateReq) ProtoMessage() {}

func (x *UpdateFeightTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeightTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateFeightTemplateReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateFeightTemplateReq) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *UpdateFeightTemplateReq) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateFeightTemplateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateFeightTemplateResp) Reset() {
	*x = UpdateFeightTemplateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeightTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeightTemplateResp) ProtoMessage() {}

func (x *UpdateFeightTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeightTemplateResp.ProtoReflect.Descriptor instead.
func (*UpdateFeightTemplateResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateFeightTemplateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询运费模版详情
type QueryFeightTemplateDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryFeightTemplateDetailReq) Reset() {
	*x = QueryFeightTemplateDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeightTemplateDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateDetailReq) ProtoMessage() {}

func (x *QueryFeightTemplateDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateDetailReq.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{44}
}

func (x *QueryFeightTemplateDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryFeightTemplateDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeType     int32  `protobuf:"varint,1,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	ContinueFee    int64  `protobuf:"varint,2,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //
	ContinueWeight int64  `protobuf:"varint,3,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //
	Dest           string `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	FirstFee       int64  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	FirstWeight    int64  `protobuf:"varint,6,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	Id             int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
}

func (x *QueryFeightTemplateDetailResp) Reset() {
	*x = QueryFeightTemplateDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeightTemplateDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateDetailResp) ProtoMessage() {}

func (x *QueryFeightTemplateDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateDetailResp.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{45}
}

func (x *QueryFeightTemplateDetailResp) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *QueryFeightTemplateDetailResp) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 分页查询运费模版列表
type QueryFeightTemplateListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
}

func (x *QueryFeightTemplateListReq) Reset() {
	*x = QueryFeightTemplateListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeightTemplateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateListReq) ProtoMessage() {}

func (x *QueryFeightTemplateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateListReq.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{46}
}

func (x *QueryFeightTemplateListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryFeightTemplateListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FeightTemplateListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeType     int32  `protobuf:"varint,1,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	ContinueFee    int64  `protobuf:"varint,2,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //
	ContinueWeight int64  `protobuf:"varint,3,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //
	Dest           string `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	FirstFee       int64  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	FirstWeight    int64  `protobuf:"varint,6,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	Id             int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
}

func (x *FeightTemplateListData) Reset() {
	*x = FeightTemplateListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeightTemplateListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeightTemplateListData) ProtoMessage() {}

func (x *FeightTemplateListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeightTemplateListData.ProtoReflect.Descriptor instead.
func (*FeightTemplateListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{47}
}

func (x *FeightTemplateListData) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *FeightTemplateListData) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *FeightTemplateListData) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *FeightTemplateListData) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *FeightTemplateListData) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *FeightTemplateListData) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *FeightTemplateListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeightTemplateListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryFeightTemplateListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*FeightTemplateListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryFeightTemplateListResp) Reset() {
	*x = QueryFeightTemplateListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeightTemplateListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateListResp) ProtoMessage() {}

func (x *QueryFeightTemplateListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateListResp.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{48}
}

func (x *QueryFeightTemplateListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryFeightTemplateListResp) GetList() []*FeightTemplateListData {
	if x != nil {
		return x.List
	}
	return nil
}

type MemberPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberLevelId   int64  `protobuf:"varint,1,opt,name=MemberLevelId,proto3" json:"MemberLevelId,omitempty"`
	MemberPrice     int64  `protobuf:"varint,2,opt,name=MemberPrice,proto3" json:"MemberPrice,omitempty"`
	MemberLevelName string `protobuf:"bytes,3,opt,name=MemberLevelName,proto3" json:"MemberLevelName,omitempty"`
}

func (x *MemberPriceList) Reset() {
	*x = MemberPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPriceList) ProtoMessage() {}

func (x *MemberPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPriceList.ProtoReflect.Descriptor instead.
func (*MemberPriceList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{49}
}

func (x *MemberPriceList) GetMemberLevelId() int64 {
	if x != nil {
		return x.MemberLevelId
	}
	return 0
}

func (x *MemberPriceList) GetMemberPrice() int64 {
	if x != nil {
		return x.MemberPrice
	}
	return 0
}

func (x *MemberPriceList) GetMemberLevelName() string {
	if x != nil {
		return x.MemberLevelName
	}
	return ""
}

type ProductAttributeValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAttributeId int64  `protobuf:"varint,1,opt,name=ProductAttributeId,proto3" json:"ProductAttributeId,omitempty"`
	AttributeValues    string `protobuf:"bytes,2,opt,name=AttributeValues,proto3" json:"AttributeValues,omitempty"`
}

func (x *ProductAttributeValueList) Reset() {
	*x = ProductAttributeValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeValueList) ProtoMessage() {}

func (x *ProductAttributeValueList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeValueList.ProtoReflect.Descriptor instead.
func (*ProductAttributeValueList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{50}
}

func (x *ProductAttributeValueList) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *ProductAttributeValueList) GetAttributeValues() string {
	if x != nil {
		return x.AttributeValues
	}
	return ""
}

type ProductFullReductionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullPrice   int64 `protobuf:"varint,1,opt,name=FullPrice,proto3" json:"FullPrice,omitempty"`
	ReducePrice int64 `protobuf:"varint,2,opt,name=ReducePrice,proto3" json:"ReducePrice,omitempty"`
}

func (x *ProductFullReductionList) Reset() {
	*x = ProductFullReductionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFullReductionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFullReductionList) ProtoMessage() {}

func (x *ProductFullReductionList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFullReductionList.ProtoReflect.Descriptor instead.
func (*ProductFullReductionList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{51}
}

func (x *ProductFullReductionList) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *ProductFullReductionList) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type ProductLadderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Discount int64 `protobuf:"varint,3,opt,name=Discount,proto3" json:"Discount,omitempty"`
	Price    int64 `protobuf:"varint,4,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *ProductLadderList) Reset() {
	*x = ProductLadderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductLadderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLadderList) ProtoMessage() {}

func (x *ProductLadderList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLadderList.ProtoReflect.Descriptor instead.
func (*ProductLadderList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{52}
}

func (x *ProductLadderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductLadderList) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ProductLadderList) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type SkuStockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuCode        string `protobuf:"bytes,1,opt,name=SkuCode,proto3" json:"SkuCode,omitempty"`
	Price          int64  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Stock          int32  `protobuf:"varint,3,opt,name=Stock,proto3" json:"Stock,omitempty"`
	LowStock       int32  `protobuf:"varint,4,opt,name=LowStock,proto3" json:"LowStock,omitempty"`
	Pic            string `protobuf:"bytes,5,opt,name=Pic,proto3" json:"Pic,omitempty"`
	Sale           int32  `protobuf:"varint,6,opt,name=Sale,proto3" json:"Sale,omitempty"`
	PromotionPrice int64  `protobuf:"varint,7,opt,name=PromotionPrice,proto3" json:"PromotionPrice,omitempty"`
	LockStock      int32  `protobuf:"varint,8,opt,name=LockStock,proto3" json:"LockStock,omitempty"`
	SpData         string `protobuf:"bytes,9,opt,name=SpData,proto3" json:"SpData,omitempty"`
}

func (x *SkuStockList) Reset() {
	*x = SkuStockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuStockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuStockList) ProtoMessage() {}

func (x *SkuStockList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuStockList.ProtoReflect.Descriptor instead.
func (*SkuStockList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{53}
}

func (x *SkuStockList) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *SkuStockList) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuStockList) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SkuStockList) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *SkuStockList) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *SkuStockList) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *SkuStockList) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *SkuStockList) GetLockStock() int32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

func (x *SkuStockList) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

type AddProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumPics                  string                       `protobuf:"bytes,1,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                                                          //画册图片，连产品图片限制为5张，以逗号分割
	BrandId                    int64                        `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                                               //品牌id
	BrandName                  string                       `protobuf:"bytes,3,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                                                          //品牌名称
	DeleteStatus               int32                        `protobuf:"varint,4,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"`                                                //删除状态：0->未删除；1->已删除
	Description                string                       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                                       //商品描述
	DetailDesc                 string                       `protobuf:"bytes,6,opt,name=detail_desc,json=detailDesc,proto3" json:"detail_desc,omitempty"`                                                       //详情描述
	DetailHtml                 string                       `protobuf:"bytes,7,opt,name=detail_html,json=detailHtml,proto3" json:"detail_html,omitempty"`                                                       //产品详情网页内容
	DetailMobileHtml           string                       `protobuf:"bytes,8,opt,name=detail_mobile_html,json=detailMobileHtml,proto3" json:"detail_mobile_html,omitempty"`                                   //移动端网页详情
	DetailTitle                string                       `protobuf:"bytes,9,opt,name=detail_title,json=detailTitle,proto3" json:"detail_title,omitempty"`                                                    //详情标题
	FeightTemplateId           int64                        `protobuf:"varint,10,opt,name=feight_template_id,json=feightTemplateId,proto3" json:"feight_template_id,omitempty"`                                 //商品运费模板id
	GiftGrowth                 int32                        `protobuf:"varint,11,opt,name=gift_growth,json=giftGrowth,proto3" json:"gift_growth,omitempty"`                                                     //赠送的成长值
	GiftPoint                  int32                        `protobuf:"varint,12,opt,name=gift_point,json=giftPoint,proto3" json:"gift_point,omitempty"`                                                        //赠送的积分
	Weight                     int64                        `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`                                                                               //商品重量，默认为克
	Keywords                   string                       `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                                            //搜索关键字
	LowStock                   int32                        `protobuf:"varint,15,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                                                           //库存预警值
	Name                       string                       `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //商品名称
	NewStatus                  int32                        `protobuf:"varint,17,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                                                        //新品状态:0->不是新品；1->新品
	Note                       string                       `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`                                                                                    //备注
	OriginalPrice              int64                        `protobuf:"varint,19,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`                                            //市场价
	Pic                        string                       `protobuf:"bytes,20,opt,name=pic,proto3" json:"pic,omitempty"`                                                                                      //商品图片
	PreviewStatus              int32                        `protobuf:"varint,21,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`                                            //是否为预告商品：0->不是；1->是
	Price                      int64                        `protobuf:"varint,22,opt,name=price,proto3" json:"price,omitempty"`                                                                                 //商品价格
	ProductAttributeCategoryId int64                        `protobuf:"varint,23,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //商品属性分类id
	ProductCategoryId          int64                        `protobuf:"varint,24,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`                              //商品分类id
	ProductCategoryIdArray     string                       `protobuf:"bytes,25,opt,name=product_category_id_array,json=productCategoryIdArray,proto3" json:"product_category_id_array,omitempty"`              //商品分类id字符串
	ProductCategoryName        string                       `protobuf:"bytes,26,opt,name=product_category_name,json=productCategoryName,proto3" json:"product_category_name,omitempty"`                         //商品分类名称
	ProductSn                  string                       `protobuf:"bytes,27,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                                                         //货号
	PromotionEndTime           string                       `protobuf:"bytes,28,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`                                  //促销结束时间
	PromotionPerLimit          int32                        `protobuf:"varint,29,opt,name=promotion_per_limit,json=promotionPerLimit,proto3" json:"promotion_per_limit,omitempty"`                              //活动限购数量
	PromotionPrice             int64                        `protobuf:"varint,30,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`                                         //促销价格
	PromotionStartTime         string                       `protobuf:"bytes,31,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"`                            //促销开始时间
	PromotionType              int32                        `protobuf:"varint,32,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type,omitempty"`                                            //促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购
	PublishStatus              int32                        `protobuf:"varint,33,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                                            //上架状态：0->下架；1->上架
	RecommandStatus            int32                        `protobuf:"varint,34,opt,name=recommand_status,json=recommandStatus,proto3" json:"recommand_status,omitempty"`                                      //推荐状态；0->不推荐；1->推荐
	Sale                       int32                        `protobuf:"varint,35,opt,name=sale,proto3" json:"sale,omitempty"`                                                                                   //销量
	ServiceIds                 string                       `protobuf:"bytes,36,opt,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`                                                      //以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
	Sort                       int32                        `protobuf:"varint,37,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                   //排序
	Stock                      int32                        `protobuf:"varint,38,opt,name=stock,proto3" json:"stock,omitempty"`                                                                                 //库存
	SubTitle                   string                       `protobuf:"bytes,39,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                                            //副标题
	Unit                       string                       `protobuf:"bytes,40,opt,name=unit,proto3" json:"unit,omitempty"`                                                                                    //单位
	UsePointLimit              int32                        `protobuf:"varint,41,opt,name=use_point_limit,json=usePointLimit,proto3" json:"use_point_limit,omitempty"`                                          //限制使用的积分数
	VerifyStatus               int32                        `protobuf:"varint,42,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                                               //审核状态：0->未审核；1->审核通过
	MemberPriceList            []*MemberPriceList           `protobuf:"bytes,43,rep,name=MemberPriceList,proto3" json:"MemberPriceList,omitempty"`
	ProductAttributeValueList  []*ProductAttributeValueList `protobuf:"bytes,44,rep,name=ProductAttributeValueList,proto3" json:"ProductAttributeValueList,omitempty"`
	ProductFullReductionList   []*ProductFullReductionList  `protobuf:"bytes,45,rep,name=ProductFullReductionList,proto3" json:"ProductFullReductionList,omitempty"`
	ProductLadderList          []*ProductLadderList         `protobuf:"bytes,46,rep,name=ProductLadderList,proto3" json:"ProductLadderList,omitempty"`
	SkuStockList               []*SkuStockList              `protobuf:"bytes,47,rep,name=SkuStockList,proto3" json:"SkuStockList,omitempty"`
}

func (x *AddProductReq) Reset() {
	*x = AddProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductReq) ProtoMessage() {}

func (x *AddProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductReq.ProtoReflect.Descriptor instead.
func (*AddProductReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{54}
}

func (x *AddProductReq) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *AddProductReq) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *AddProductReq) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *AddProductReq) GetDeleteStatus() int32 {
	if x != nil {
		return x.DeleteStatus
	}
	return 0
}

func (x *AddProductReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddProductReq) GetDetailDesc() string {
	if x != nil {
		return x.DetailDesc
	}
	return ""
}

func (x *AddProductReq) GetDetailHtml() string {
	if x != nil {
		return x.DetailHtml
	}
	return ""
}

func (x *AddProductReq) GetDetailMobileHtml() string {
	if x != nil {
		return x.DetailMobileHtml
	}
	return ""
}

func (x *AddProductReq) GetDetailTitle() string {
	if x != nil {
		return x.DetailTitle
	}
	return ""
}

func (x *AddProductReq) GetFeightTemplateId() int64 {
	if x != nil {
		return x.FeightTemplateId
	}
	return 0
}

func (x *AddProductReq) GetGiftGrowth() int32 {
	if x != nil {
		return x.GiftGrowth
	}
	return 0
}

func (x *AddProductReq) GetGiftPoint() int32 {
	if x != nil {
		return x.GiftPoint
	}
	return 0
}

func (x *AddProductReq) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AddProductReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *AddProductReq) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *AddProductReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductReq) GetNewStatus() int32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *AddProductReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AddProductReq) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *AddProductReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *AddProductReq) GetPreviewStatus() int32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *AddProductReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddProductReq) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *AddProductReq) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *AddProductReq) GetProductCategoryIdArray() string {
	if x != nil {
		return x.ProductCategoryIdArray
	}
	return ""
}

func (x *AddProductReq) GetProductCategoryName() string {
	if x != nil {
		return x.ProductCategoryName
	}
	return ""
}

func (x *AddProductReq) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *AddProductReq) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *AddProductReq) GetPromotionPerLimit() int32 {
	if x != nil {
		return x.PromotionPerLimit
	}
	return 0
}

func (x *AddProductReq) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *AddProductReq) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *AddProductReq) GetPromotionType() int32 {
	if x != nil {
		return x.PromotionType
	}
	return 0
}

func (x *AddProductReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *AddProductReq) GetRecommandStatus() int32 {
	if x != nil {
		return x.RecommandStatus
	}
	return 0
}

func (x *AddProductReq) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *AddProductReq) GetServiceIds() string {
	if x != nil {
		return x.ServiceIds
	}
	return ""
}

func (x *AddProductReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *AddProductReq) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *AddProductReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *AddProductReq) GetUsePointLimit() int32 {
	if x != nil {
		return x.UsePointLimit
	}
	return 0
}

func (x *AddProductReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *AddProductReq) GetMemberPriceList() []*MemberPriceList {
	if x != nil {
		return x.MemberPriceList
	}
	return nil
}

func (x *AddProductReq) GetProductAttributeValueList() []*ProductAttributeValueList {
	if x != nil {
		return x.ProductAttributeValueList
	}
	return nil
}

func (x *AddProductReq) GetProductFullReductionList() []*ProductFullReductionList {
	if x != nil {
		return x.ProductFullReductionList
	}
	return nil
}

func (x *AddProductReq) GetProductLadderList() []*ProductLadderList {
	if x != nil {
		return x.ProductLadderList
	}
	return nil
}

func (x *AddProductReq) GetSkuStockList() []*SkuStockList {
	if x != nil {
		return x.SkuStockList
	}
	return nil
}

type AddProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *AddProductResp) Reset() {
	*x = AddProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductResp) ProtoMessage() {}

func (x *AddProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductResp.ProtoReflect.Descriptor instead.
func (*AddProductResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{55}
}

func (x *AddProductResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type QueryProductListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current           int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PageSize          int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	VerifyStatus      int32  `protobuf:"varint,4,opt,name=VerifyStatus,proto3" json:"VerifyStatus,omitempty"`
	ProductCategoryId int64  `protobuf:"varint,5,opt,name=ProductCategoryId,proto3" json:"ProductCategoryId,omitempty"`
	PublishStatus     int32  `protobuf:"varint,6,opt,name=PublishStatus,proto3" json:"PublishStatus,omitempty"`
	DeleteStatus      int32  `protobuf:"varint,7,opt,name=DeleteStatus,proto3" json:"DeleteStatus,omitempty"`
	BrandId           int64  `protobuf:"varint,8,opt,name=BrandId,proto3" json:"BrandId,omitempty"`
	ProductSn         string `protobuf:"bytes,9,opt,name=ProductSn,proto3" json:"ProductSn,omitempty"`
}

func (x *QueryProductListReq) Reset() {
	*x = QueryProductListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductListReq) ProtoMessage() {}

func (x *QueryProductListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductListReq.ProtoReflect.Descriptor instead.
func (*QueryProductListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{56}
}

func (x *QueryProductListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *QueryProductListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductListReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *QueryProductListReq) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *QueryProductListReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *QueryProductListReq) GetDeleteStatus() int32 {
	if x != nil {
		return x.DeleteStatus
	}
	return 0
}

func (x *QueryProductListReq) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *QueryProductListReq) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

type QueryProductByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *QueryProductByIdsReq) Reset() {
	*x = QueryProductByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductByIdsReq) ProtoMessage() {}

func (x *QueryProductByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductByIdsReq.ProtoReflect.Descriptor instead.
func (*QueryProductByIdsReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{57}
}

func (x *QueryProductByIdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ProductListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumPics                  string `protobuf:"bytes,1,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                                                          //画册图片，连产品图片限制为5张，以逗号分割
	BrandId                    int64  `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                                               //品牌id
	BrandName                  string `protobuf:"bytes,3,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                                                          //品牌名称
	DeleteStatus               int32  `protobuf:"varint,4,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"`                                                //删除状态：0->未删除；1->已删除
	Description                string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                                       //商品描述
	DetailDesc                 string `protobuf:"bytes,6,opt,name=detail_desc,json=detailDesc,proto3" json:"detail_desc,omitempty"`                                                       //详情描述
	DetailHtml                 string `protobuf:"bytes,7,opt,name=detail_html,json=detailHtml,proto3" json:"detail_html,omitempty"`                                                       //产品详情网页内容
	DetailMobileHtml           string `protobuf:"bytes,8,opt,name=detail_mobile_html,json=detailMobileHtml,proto3" json:"detail_mobile_html,omitempty"`                                   //移动端网页详情
	DetailTitle                string `protobuf:"bytes,9,opt,name=detail_title,json=detailTitle,proto3" json:"detail_title,omitempty"`                                                    //详情标题
	FeightTemplateId           int64  `protobuf:"varint,10,opt,name=feight_template_id,json=feightTemplateId,proto3" json:"feight_template_id,omitempty"`                                 //商品运费模板id
	GiftGrowth                 int32  `protobuf:"varint,11,opt,name=gift_growth,json=giftGrowth,proto3" json:"gift_growth,omitempty"`                                                     //赠送的成长值
	GiftPoint                  int32  `protobuf:"varint,12,opt,name=gift_point,json=giftPoint,proto3" json:"gift_point,omitempty"`                                                        //赠送的积分
	Id                         int64  `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`                                                                                       //
	Keywords                   string `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                                            //搜索关键字
	LowStock                   int32  `protobuf:"varint,15,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                                                           //库存预警值
	Name                       string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //商品名称
	NewStatus                  int32  `protobuf:"varint,17,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                                                        //新品状态:0->不是新品；1->新品
	Note                       string `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`                                                                                    //备注
	OriginalPrice              int64  `protobuf:"varint,19,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`                                            //市场价
	Pic                        string `protobuf:"bytes,20,opt,name=pic,proto3" json:"pic,omitempty"`                                                                                      //商品图片
	PreviewStatus              int32  `protobuf:"varint,21,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`                                            //是否为预告商品：0->不是；1->是
	Price                      int64  `protobuf:"varint,22,opt,name=price,proto3" json:"price,omitempty"`                                                                                 //商品价格
	ProductAttributeCategoryId int64  `protobuf:"varint,23,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //商品属性分类id
	ProductCategoryId          int64  `protobuf:"varint,24,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`                              //商品分类id
	ProductCategoryIdArray     string `protobuf:"bytes,25,opt,name=product_category_id_array,json=productCategoryIdArray,proto3" json:"product_category_id_array,omitempty"`              //商品分类id字符串
	ProductCategoryName        string `protobuf:"bytes,26,opt,name=product_category_name,json=productCategoryName,proto3" json:"product_category_name,omitempty"`                         //商品分类名称
	ProductSn                  string `protobuf:"bytes,27,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                                                         //货号
	PromotionEndTime           string `protobuf:"bytes,28,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`                                  //促销结束时间
	PromotionPerLimit          int32  `protobuf:"varint,29,opt,name=promotion_per_limit,json=promotionPerLimit,proto3" json:"promotion_per_limit,omitempty"`                              //活动限购数量
	PromotionPrice             int64  `protobuf:"varint,30,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`                                         //促销价格
	PromotionStartTime         string `protobuf:"bytes,31,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"`                            //促销开始时间
	PromotionType              int32  `protobuf:"varint,32,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type,omitempty"`                                            //促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购
	PublishStatus              int32  `protobuf:"varint,33,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                                            //上架状态：0->下架；1->上架
	RecommandStatus            int32  `protobuf:"varint,34,opt,name=recommand_status,json=recommandStatus,proto3" json:"recommand_status,omitempty"`                                      //推荐状态；0->不推荐；1->推荐
	Sale                       int32  `protobuf:"varint,35,opt,name=sale,proto3" json:"sale,omitempty"`                                                                                   //销量
	ServiceIds                 string `protobuf:"bytes,36,opt,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`                                                      //以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
	Sort                       int32  `protobuf:"varint,37,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                   //排序
	Stock                      int32  `protobuf:"varint,38,opt,name=stock,proto3" json:"stock,omitempty"`                                                                                 //库存
	SubTitle                   string `protobuf:"bytes,39,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                                            //副标题
	Unit                       string `protobuf:"bytes,40,opt,name=unit,proto3" json:"unit,omitempty"`                                                                                    //单位
	UsePointLimit              int32  `protobuf:"varint,41,opt,name=use_point_limit,json=usePointLimit,proto3" json:"use_point_limit,omitempty"`                                          //限制使用的积分数
	VerifyStatus               int32  `protobuf:"varint,42,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                                               //审核状态：0->未审核；1->审核通过
	Weight                     int64  `protobuf:"varint,43,opt,name=weight,proto3" json:"weight,omitempty"`                                                                               //商品重量，默认为克
}

func (x *ProductListData) Reset() {
	*x = ProductListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListData) ProtoMessage() {}

func (x *ProductListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListData.ProtoReflect.Descriptor instead.
func (*ProductListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{58}
}

func (x *ProductListData) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *ProductListData) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductListData) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *ProductListData) GetDeleteStatus() int32 {
	if x != nil {
		return x.DeleteStatus
	}
	return 0
}

func (x *ProductListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductListData) GetDetailDesc() string {
	if x != nil {
		return x.DetailDesc
	}
	return ""
}

func (x *ProductListData) GetDetailHtml() string {
	if x != nil {
		return x.DetailHtml
	}
	return ""
}

func (x *ProductListData) GetDetailMobileHtml() string {
	if x != nil {
		return x.DetailMobileHtml
	}
	return ""
}

func (x *ProductListData) GetDetailTitle() string {
	if x != nil {
		return x.DetailTitle
	}
	return ""
}

func (x *ProductListData) GetFeightTemplateId() int64 {
	if x != nil {
		return x.FeightTemplateId
	}
	return 0
}

func (x *ProductListData) GetGiftGrowth() int32 {
	if x != nil {
		return x.GiftGrowth
	}
	return 0
}

func (x *ProductListData) GetGiftPoint() int32 {
	if x != nil {
		return x.GiftPoint
	}
	return 0
}

func (x *ProductListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductListData) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductListData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *ProductListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductListData) GetNewStatus() int32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *ProductListData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ProductListData) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *ProductListData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *ProductListData) GetPreviewStatus() int32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *ProductListData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductListData) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *ProductListData) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *ProductListData) GetProductCategoryIdArray() string {
	if x != nil {
		return x.ProductCategoryIdArray
	}
	return ""
}

func (x *ProductListData) GetProductCategoryName() string {
	if x != nil {
		return x.ProductCategoryName
	}
	return ""
}

func (x *ProductListData) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *ProductListData) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *ProductListData) GetPromotionPerLimit() int32 {
	if x != nil {
		return x.PromotionPerLimit
	}
	return 0
}

func (x *ProductListData) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *ProductListData) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *ProductListData) GetPromotionType() int32 {
	if x != nil {
		return x.PromotionType
	}
	return 0
}

func (x *ProductListData) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *ProductListData) GetRecommandStatus() int32 {
	if x != nil {
		return x.RecommandStatus
	}
	return 0
}

func (x *ProductListData) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *ProductListData) GetServiceIds() string {
	if x != nil {
		return x.ServiceIds
	}
	return ""
}

func (x *ProductListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductListData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductListData) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *ProductListData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductListData) GetUsePointLimit() int32 {
	if x != nil {
		return x.UsePointLimit
	}
	return 0
}

func (x *ProductListData) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *ProductListData) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type QueryProductListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductListResp) Reset() {
	*x = QueryProductListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductListResp) ProtoMessage() {}

func (x *QueryProductListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductListResp.ProtoReflect.Descriptor instead.
func (*QueryProductListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{59}
}

func (x *QueryProductListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductListResp) GetList() []*ProductListData {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumPics                  string                       `protobuf:"bytes,1,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                                                          //画册图片，连产品图片限制为5张，以逗号分割
	BrandId                    int64                        `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                                               //品牌id
	BrandName                  string                       `protobuf:"bytes,3,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                                                          //品牌名称
	DeleteStatus               int32                        `protobuf:"varint,4,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"`                                                //删除状态：0->未删除；1->已删除
	Description                string                       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                                       //商品描述
	DetailDesc                 string                       `protobuf:"bytes,6,opt,name=detail_desc,json=detailDesc,proto3" json:"detail_desc,omitempty"`                                                       //详情描述
	DetailHtml                 string                       `protobuf:"bytes,7,opt,name=detail_html,json=detailHtml,proto3" json:"detail_html,omitempty"`                                                       //产品详情网页内容
	DetailMobileHtml           string                       `protobuf:"bytes,8,opt,name=detail_mobile_html,json=detailMobileHtml,proto3" json:"detail_mobile_html,omitempty"`                                   //移动端网页详情
	DetailTitle                string                       `protobuf:"bytes,9,opt,name=detail_title,json=detailTitle,proto3" json:"detail_title,omitempty"`                                                    //详情标题
	FeightTemplateId           int64                        `protobuf:"varint,10,opt,name=feight_template_id,json=feightTemplateId,proto3" json:"feight_template_id,omitempty"`                                 //商品运费模板id
	GiftGrowth                 int32                        `protobuf:"varint,11,opt,name=gift_growth,json=giftGrowth,proto3" json:"gift_growth,omitempty"`                                                     //赠送的成长值
	GiftPoint                  int32                        `protobuf:"varint,12,opt,name=gift_point,json=giftPoint,proto3" json:"gift_point,omitempty"`                                                        //赠送的积分
	Id                         int64                        `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`                                                                                       //
	Keywords                   string                       `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                                            //搜索关键字
	LowStock                   int32                        `protobuf:"varint,15,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                                                           //库存预警值
	Name                       string                       `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //商品名称
	NewStatus                  int32                        `protobuf:"varint,17,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                                                        //新品状态:0->不是新品；1->新品
	Note                       string                       `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`                                                                                    //备注
	OriginalPrice              int64                        `protobuf:"varint,19,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`                                            //市场价
	Pic                        string                       `protobuf:"bytes,20,opt,name=pic,proto3" json:"pic,omitempty"`                                                                                      //商品图片
	PreviewStatus              int32                        `protobuf:"varint,21,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`                                            //是否为预告商品：0->不是；1->是
	Price                      int64                        `protobuf:"varint,22,opt,name=price,proto3" json:"price,omitempty"`                                                                                 //商品价格
	ProductAttributeCategoryId int64                        `protobuf:"varint,23,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //商品属性分类id
	ProductCategoryId          int64                        `protobuf:"varint,24,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`                              //商品分类id
	ProductCategoryIdArray     string                       `protobuf:"bytes,25,opt,name=product_category_id_array,json=productCategoryIdArray,proto3" json:"product_category_id_array,omitempty"`              //商品分类id字符串
	ProductCategoryName        string                       `protobuf:"bytes,26,opt,name=product_category_name,json=productCategoryName,proto3" json:"product_category_name,omitempty"`                         //商品分类名称
	ProductSn                  string                       `protobuf:"bytes,27,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                                                         //货号
	PromotionEndTime           string                       `protobuf:"bytes,28,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`                                  //促销结束时间
	PromotionPerLimit          int32                        `protobuf:"varint,29,opt,name=promotion_per_limit,json=promotionPerLimit,proto3" json:"promotion_per_limit,omitempty"`                              //活动限购数量
	PromotionPrice             int64                        `protobuf:"varint,30,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`                                         //促销价格
	PromotionStartTime         string                       `protobuf:"bytes,31,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"`                            //促销开始时间
	PromotionType              int32                        `protobuf:"varint,32,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type,omitempty"`                                            //促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购
	PublishStatus              int32                        `protobuf:"varint,33,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                                            //上架状态：0->下架；1->上架
	RecommandStatus            int32                        `protobuf:"varint,34,opt,name=recommand_status,json=recommandStatus,proto3" json:"recommand_status,omitempty"`                                      //推荐状态；0->不推荐；1->推荐
	Sale                       int32                        `protobuf:"varint,35,opt,name=sale,proto3" json:"sale,omitempty"`                                                                                   //销量
	ServiceIds                 string                       `protobuf:"bytes,36,opt,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`                                                      //以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
	Sort                       int32                        `protobuf:"varint,37,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                   //排序
	Stock                      int32                        `protobuf:"varint,38,opt,name=stock,proto3" json:"stock,omitempty"`                                                                                 //库存
	SubTitle                   string                       `protobuf:"bytes,39,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                                            //副标题
	Unit                       string                       `protobuf:"bytes,40,opt,name=unit,proto3" json:"unit,omitempty"`                                                                                    //单位
	UsePointLimit              int32                        `protobuf:"varint,41,opt,name=use_point_limit,json=usePointLimit,proto3" json:"use_point_limit,omitempty"`                                          //限制使用的积分数
	VerifyStatus               int32                        `protobuf:"varint,42,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                                               //审核状态：0->未审核；1->审核通过
	Weight                     int64                        `protobuf:"varint,43,opt,name=weight,proto3" json:"weight,omitempty"`                                                                               //商品重量，默认为克
	MemberPriceList            []*MemberPriceList           `protobuf:"bytes,44,rep,name=MemberPriceList,proto3" json:"MemberPriceList,omitempty"`
	ProductAttributeValueList  []*ProductAttributeValueList `protobuf:"bytes,45,rep,name=ProductAttributeValueList,proto3" json:"ProductAttributeValueList,omitempty"`
	ProductFullReductionList   []*ProductFullReductionList  `protobuf:"bytes,46,rep,name=ProductFullReductionList,proto3" json:"ProductFullReductionList,omitempty"`
	ProductLadderList          []*ProductLadderList         `protobuf:"bytes,47,rep,name=ProductLadderList,proto3" json:"ProductLadderList,omitempty"`
	SkuStockList               []*SkuStockList              `protobuf:"bytes,48,rep,name=SkuStockList,proto3" json:"SkuStockList,omitempty"`
}

func (x *UpdateProductReq) Reset() {
	*x = UpdateProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductReq) ProtoMessage() {}

func (x *UpdateProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductReq.ProtoReflect.Descriptor instead.
func (*UpdateProductReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateProductReq) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *UpdateProductReq) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *UpdateProductReq) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *UpdateProductReq) GetDeleteStatus() int32 {
	if x != nil {
		return x.DeleteStatus
	}
	return 0
}

func (x *UpdateProductReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProductReq) GetDetailDesc() string {
	if x != nil {
		return x.DetailDesc
	}
	return ""
}

func (x *UpdateProductReq) GetDetailHtml() string {
	if x != nil {
		return x.DetailHtml
	}
	return ""
}

func (x *UpdateProductReq) GetDetailMobileHtml() string {
	if x != nil {
		return x.DetailMobileHtml
	}
	return ""
}

func (x *UpdateProductReq) GetDetailTitle() string {
	if x != nil {
		return x.DetailTitle
	}
	return ""
}

func (x *UpdateProductReq) GetFeightTemplateId() int64 {
	if x != nil {
		return x.FeightTemplateId
	}
	return 0
}

func (x *UpdateProductReq) GetGiftGrowth() int32 {
	if x != nil {
		return x.GiftGrowth
	}
	return 0
}

func (x *UpdateProductReq) GetGiftPoint() int32 {
	if x != nil {
		return x.GiftPoint
	}
	return 0
}

func (x *UpdateProductReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UpdateProductReq) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *UpdateProductReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductReq) GetNewStatus() int32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *UpdateProductReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateProductReq) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *UpdateProductReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UpdateProductReq) GetPreviewStatus() int32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *UpdateProductReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateProductReq) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *UpdateProductReq) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *UpdateProductReq) GetProductCategoryIdArray() string {
	if x != nil {
		return x.ProductCategoryIdArray
	}
	return ""
}

func (x *UpdateProductReq) GetProductCategoryName() string {
	if x != nil {
		return x.ProductCategoryName
	}
	return ""
}

func (x *UpdateProductReq) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *UpdateProductReq) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *UpdateProductReq) GetPromotionPerLimit() int32 {
	if x != nil {
		return x.PromotionPerLimit
	}
	return 0
}

func (x *UpdateProductReq) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *UpdateProductReq) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *UpdateProductReq) GetPromotionType() int32 {
	if x != nil {
		return x.PromotionType
	}
	return 0
}

func (x *UpdateProductReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *UpdateProductReq) GetRecommandStatus() int32 {
	if x != nil {
		return x.RecommandStatus
	}
	return 0
}

func (x *UpdateProductReq) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *UpdateProductReq) GetServiceIds() string {
	if x != nil {
		return x.ServiceIds
	}
	return ""
}

func (x *UpdateProductReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *UpdateProductReq) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *UpdateProductReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *UpdateProductReq) GetUsePointLimit() int32 {
	if x != nil {
		return x.UsePointLimit
	}
	return 0
}

func (x *UpdateProductReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *UpdateProductReq) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UpdateProductReq) GetMemberPriceList() []*MemberPriceList {
	if x != nil {
		return x.MemberPriceList
	}
	return nil
}

func (x *UpdateProductReq) GetProductAttributeValueList() []*ProductAttributeValueList {
	if x != nil {
		return x.ProductAttributeValueList
	}
	return nil
}

func (x *UpdateProductReq) GetProductFullReductionList() []*ProductFullReductionList {
	if x != nil {
		return x.ProductFullReductionList
	}
	return nil
}

func (x *UpdateProductReq) GetProductLadderList() []*ProductLadderList {
	if x != nil {
		return x.ProductLadderList
	}
	return nil
}

func (x *UpdateProductReq) GetSkuStockList() []*SkuStockList {
	if x != nil {
		return x.SkuStockList
	}
	return nil
}

type UpdateProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductResp) Reset() {
	*x = UpdateProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductResp) ProtoMessage() {}

func (x *UpdateProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductResp.ProtoReflect.Descriptor instead.
func (*UpdateProductResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateProductResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type DeleteProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductReq) Reset() {
	*x = DeleteProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductReq) ProtoMessage() {}

func (x *DeleteProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductReq.ProtoReflect.Descriptor instead.
func (*DeleteProductReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{62}
}

func (x *DeleteProductReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductResp) Reset() {
	*x = DeleteProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductResp) ProtoMessage() {}

func (x *DeleteProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductResp.ProtoReflect.Descriptor instead.
func (*DeleteProductResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{63}
}

func (x *DeleteProductResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type QueryProductDetailByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductDetailByIdReq) Reset() {
	*x = QueryProductDetailByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductDetailByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductDetailByIdReq) ProtoMessage() {}

func (x *QueryProductDetailByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductDetailByIdReq.ProtoReflect.Descriptor instead.
func (*QueryProductDetailByIdReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{64}
}

func (x *QueryProductDetailByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BrandData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigPic              string `protobuf:"bytes,1,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	BrandStory          string `protobuf:"bytes,2,opt,name=brand_story,json=brandStory,proto3" json:"brand_story,omitempty"`                                //品牌故事
	CreateBy            string `protobuf:"bytes,3,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                      //创建者
	CreateTime          string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                //创建时间
	FactoryStatus       int32  `protobuf:"varint,5,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"`                      //是否为品牌制造商：0->不是；1->是
	FirstLetter         string `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Id                  int64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Logo                string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	Name                string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	ProductCommentCount int32  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	ProductCount        int32  `protobuf:"varint,11,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                        //产品数量
	RecommendStatus     int32  `protobuf:"varint,12,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态
	ShowStatus          int32  `protobuf:"varint,13,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                              //品牌显示状态
	Sort                int32  `protobuf:"varint,14,opt,name=sort,proto3" json:"sort,omitempty"`                                                            //排序
	UpdateBy            string `protobuf:"bytes,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                     //更新者
	UpdateTime          string `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
}

func (x *BrandData) Reset() {
	*x = BrandData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandData) ProtoMessage() {}

func (x *BrandData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandData.ProtoReflect.Descriptor instead.
func (*BrandData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{65}
}

func (x *BrandData) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *BrandData) GetBrandStory() string {
	if x != nil {
		return x.BrandStory
	}
	return ""
}

func (x *BrandData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *BrandData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BrandData) GetFactoryStatus() int32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *BrandData) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *BrandData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *BrandData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandData) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *BrandData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *BrandData) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *BrandData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *BrandData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BrandData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *BrandData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ProductAttributeDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType                 int32  `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`                                                     //分类筛选样式：1->普通；1->颜色
	HandAddStatus              int32  `protobuf:"varint,2,opt,name=hand_add_status,json=handAddStatus,proto3" json:"hand_add_status,omitempty"`                                          //是否支持手动新增；0->不支持；1->支持
	Id                         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                       //
	InputList                  string `protobuf:"bytes,4,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`                                                         //可选值列表，以逗号隔开
	InputType                  int32  `protobuf:"varint,5,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`                                                        //属性录入方式：0->手工录入；1->从列表中选取
	Name                       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //
	ProductAttributeCategoryId int64  `protobuf:"varint,7,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //
	RelatedStatus              int32  `protobuf:"varint,8,opt,name=related_status,json=relatedStatus,proto3" json:"related_status,omitempty"`                                            //相同属性产品是否关联；0->不关联；1->关联
	SearchType                 int32  `protobuf:"varint,9,opt,name=search_type,json=searchType,proto3" json:"search_type,omitempty"`                                                     //检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
	SelectType                 int32  `protobuf:"varint,10,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"`                                                    //属性选择类型：0->唯一；1->单选；2->多选
	Sort                       int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                  //排序字段：最高的可以单独上传图片
	Type                       int32  `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`                                                                                  //属性的类型；0->规格；1->参数
}

func (x *ProductAttributeDataList) Reset() {
	*x = ProductAttributeDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeDataList) ProtoMessage() {}

func (x *ProductAttributeDataList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeDataList.ProtoReflect.Descriptor instead.
func (*ProductAttributeDataList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{66}
}

func (x *ProductAttributeDataList) GetFilterType() int32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *ProductAttributeDataList) GetHandAddStatus() int32 {
	if x != nil {
		return x.HandAddStatus
	}
	return 0
}

func (x *ProductAttributeDataList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeDataList) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *ProductAttributeDataList) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ProductAttributeDataList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeDataList) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *ProductAttributeDataList) GetRelatedStatus() int32 {
	if x != nil {
		return x.RelatedStatus
	}
	return 0
}

func (x *ProductAttributeDataList) GetSearchType() int32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *ProductAttributeDataList) GetSelectType() int32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *ProductAttributeDataList) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductAttributeDataList) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ProductAttributeValueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             //
	ProductAttributeId int64  `protobuf:"varint,2,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //
	ProductId          int64  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                              //
	Value              string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                        //手动添加规格或参数的值，参数单值，规格有多个时以逗号隔开
}

func (x *ProductAttributeValueData) Reset() {
	*x = ProductAttributeValueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeValueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeValueData) ProtoMessage() {}

func (x *ProductAttributeValueData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeValueData.ProtoReflect.Descriptor instead.
func (*ProductAttributeValueData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{67}
}

func (x *ProductAttributeValueData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeValueData) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *ProductAttributeValueData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductAttributeValueData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SkuStockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	LockStock      int32  `protobuf:"varint,2,opt,name=lock_stock,json=lockStock,proto3" json:"lock_stock,omitempty"`                //锁定库存
	LowStock       int32  `protobuf:"varint,3,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                   //预警库存
	Pic            string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                              //展示图片
	Price          int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         //
	ProductId      int64  `protobuf:"varint,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                //
	PromotionPrice int64  `protobuf:"varint,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` //单品促销价格
	Sale           int32  `protobuf:"varint,8,opt,name=sale,proto3" json:"sale,omitempty"`                                           //销量
	SkuCode        string `protobuf:"bytes,9,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                       //sku编码
	SpData         string `protobuf:"bytes,10,opt,name=sp_data,json=spData,proto3" json:"sp_data,omitempty"`                         //商品销售属性，json格式
	Stock          int32  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                        //库存
}

func (x *SkuStockData) Reset() {
	*x = SkuStockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuStockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuStockData) ProtoMessage() {}

func (x *SkuStockData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuStockData.ProtoReflect.Descriptor instead.
func (*SkuStockData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{68}
}

func (x *SkuStockData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkuStockData) GetLockStock() int32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

func (x *SkuStockData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *SkuStockData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *SkuStockData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuStockData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SkuStockData) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *SkuStockData) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *SkuStockData) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *SkuStockData) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

func (x *SkuStockData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

type ProductLadderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount  int64 `protobuf:"varint,2,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Id        int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                //
	Price     int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	ProductId int64 `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *ProductLadderData) Reset() {
	*x = ProductLadderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductLadderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLadderData) ProtoMessage() {}

func (x *ProductLadderData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLadderData.ProtoReflect.Descriptor instead.
func (*ProductLadderData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{69}
}

func (x *ProductLadderData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductLadderData) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ProductLadderData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductLadderData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductLadderData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductFullReductionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullPrice   int64 `protobuf:"varint,1,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //
	Id          int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                      //
	ProductId   int64 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`       //
	ReducePrice int64 `protobuf:"varint,4,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //
}

func (x *ProductFullReductionData) Reset() {
	*x = ProductFullReductionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFullReductionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFullReductionData) ProtoMessage() {}

func (x *ProductFullReductionData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFullReductionData.ProtoReflect.Descriptor instead.
func (*ProductFullReductionData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{70}
}

func (x *ProductFullReductionData) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *ProductFullReductionData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductFullReductionData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductFullReductionData) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type MemberPriceListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                   //
	MemberLevelId   int64  `protobuf:"varint,2,opt,name=member_level_id,json=memberLevelId,proto3" json:"member_level_id,omitempty"`      //会员等级id
	MemberLevelName string `protobuf:"bytes,3,opt,name=member_level_name,json=memberLevelName,proto3" json:"member_level_name,omitempty"` //会员等级名称
	MemberPrice     int64  `protobuf:"varint,4,opt,name=member_price,json=memberPrice,proto3" json:"member_price,omitempty"`              //会员价格
	ProductId       int64  `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    //商品id
}

func (x *MemberPriceListData) Reset() {
	*x = MemberPriceListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPriceListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPriceListData) ProtoMessage() {}

func (x *MemberPriceListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPriceListData.ProtoReflect.Descriptor instead.
func (*MemberPriceListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{71}
}

func (x *MemberPriceListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberPriceListData) GetMemberLevelId() int64 {
	if x != nil {
		return x.MemberLevelId
	}
	return 0
}

func (x *MemberPriceListData) GetMemberLevelName() string {
	if x != nil {
		return x.MemberLevelName
	}
	return ""
}

func (x *MemberPriceListData) GetMemberPrice() int64 {
	if x != nil {
		return x.MemberPrice
	}
	return 0
}

func (x *MemberPriceListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type QueryProductDetailByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product                   *ProductListData             `protobuf:"bytes,1,opt,name=Product,proto3" json:"Product,omitempty"`
	Brand                     *BrandData                   `protobuf:"bytes,2,opt,name=Brand,proto3" json:"Brand,omitempty"`
	ProductAttributeList      []*ProductAttributeDataList  `protobuf:"bytes,3,rep,name=ProductAttributeList,proto3" json:"ProductAttributeList,omitempty"`
	ProductAttributeValueList []*ProductAttributeValueData `protobuf:"bytes,4,rep,name=ProductAttributeValueList,proto3" json:"ProductAttributeValueList,omitempty"`
	SkuStockList              []*SkuStockData              `protobuf:"bytes,5,rep,name=SkuStockList,proto3" json:"SkuStockList,omitempty"`
	ProductLadderList         []*ProductLadderData         `protobuf:"bytes,6,rep,name=ProductLadderList,proto3" json:"ProductLadderList,omitempty"`
	ProductFullReductionList  []*ProductFullReductionData  `protobuf:"bytes,7,rep,name=ProductFullReductionList,proto3" json:"ProductFullReductionList,omitempty"`
	MemberPriceList           []*MemberPriceListData       `protobuf:"bytes,8,rep,name=MemberPriceList,proto3" json:"MemberPriceList,omitempty"`
}

func (x *QueryProductDetailByIdResp) Reset() {
	*x = QueryProductDetailByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductDetailByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductDetailByIdResp) ProtoMessage() {}

func (x *QueryProductDetailByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductDetailByIdResp.ProtoReflect.Descriptor instead.
func (*QueryProductDetailByIdResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{72}
}

func (x *QueryProductDetailByIdResp) GetProduct() *ProductListData {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetProductAttributeList() []*ProductAttributeDataList {
	if x != nil {
		return x.ProductAttributeList
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetProductAttributeValueList() []*ProductAttributeValueData {
	if x != nil {
		return x.ProductAttributeValueList
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetSkuStockList() []*SkuStockData {
	if x != nil {
		return x.SkuStockList
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetProductLadderList() []*ProductLadderData {
	if x != nil {
		return x.ProductLadderList
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetProductFullReductionList() []*ProductFullReductionData {
	if x != nil {
		return x.ProductFullReductionList
	}
	return nil
}

func (x *QueryProductDetailByIdResp) GetMemberPriceList() []*MemberPriceListData {
	if x != nil {
		return x.MemberPriceList
	}
	return nil
}

type UpdateProductStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Status     int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Detail     string  `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	VertifyMan string  `protobuf:"bytes,4,opt,name=vertifyMan,proto3" json:"vertifyMan,omitempty"`
}

func (x *UpdateProductStatusReq) Reset() {
	*x = UpdateProductStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductStatusReq) ProtoMessage() {}

func (x *UpdateProductStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateProductStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductStatusReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateProductStatusReq) GetVertifyMan() string {
	if x != nil {
		return x.VertifyMan
	}
	return ""
}

type UpdateProductStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductStatusResp) Reset() {
	*x = UpdateProductStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductStatusResp) ProtoMessage() {}

func (x *UpdateProductStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateProductStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 添加商品属性参数表
type AddProductAttributeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType                 int32  `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`                                                     //分类筛选样式：1->普通；1->颜色
	HandAddStatus              int32  `protobuf:"varint,2,opt,name=hand_add_status,json=handAddStatus,proto3" json:"hand_add_status,omitempty"`                                          //是否支持手动新增；0->不支持；1->支持
	Id                         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                       //
	InputList                  string `protobuf:"bytes,4,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`                                                         //可选值列表，以逗号隔开
	InputType                  int32  `protobuf:"varint,5,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`                                                        //属性录入方式：0->手工录入；1->从列表中选取
	Name                       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //
	ProductAttributeCategoryId int64  `protobuf:"varint,7,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //
	RelatedStatus              int32  `protobuf:"varint,8,opt,name=related_status,json=relatedStatus,proto3" json:"related_status,omitempty"`                                            //相同属性产品是否关联；0->不关联；1->关联
	SearchType                 int32  `protobuf:"varint,9,opt,name=search_type,json=searchType,proto3" json:"search_type,omitempty"`                                                     //检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
	SelectType                 int32  `protobuf:"varint,10,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"`                                                    //属性选择类型：0->唯一；1->单选；2->多选
	Sort                       int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                  //排序字段：最高的可以单独上传图片
	Type                       int32  `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`                                                                                  //属性的类型；0->规格；1->参数
}

func (x *AddProductAttributeReq) Reset() {
	*x = AddProductAttributeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeReq) ProtoMessage() {}

func (x *AddProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeReq.ProtoReflect.Descriptor instead.
func (*AddProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{75}
}

func (x *AddProductAttributeReq) GetFilterType() int32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *AddProductAttributeReq) GetHandAddStatus() int32 {
	if x != nil {
		return x.HandAddStatus
	}
	return 0
}

func (x *AddProductAttributeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductAttributeReq) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *AddProductAttributeReq) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *AddProductAttributeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductAttributeReq) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *AddProductAttributeReq) GetRelatedStatus() int32 {
	if x != nil {
		return x.RelatedStatus
	}
	return 0
}

func (x *AddProductAttributeReq) GetSearchType() int32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *AddProductAttributeReq) GetSelectType() int32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *AddProductAttributeReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductAttributeReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddProductAttributeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductAttributeResp) Reset() {
	*x = AddProductAttributeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductAttributeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeResp) ProtoMessage() {}

func (x *AddProductAttributeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeResp.ProtoReflect.Descriptor instead.
func (*AddProductAttributeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{76}
}

func (x *AddProductAttributeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品属性参数表
type DeleteProductAttributeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductAttributeReq) Reset() {
	*x = DeleteProductAttributeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeReq) ProtoMessage() {}

func (x *DeleteProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteProductAttributeReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductAttributeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductAttributeResp) Reset() {
	*x = DeleteProductAttributeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeResp) ProtoMessage() {}

func (x *DeleteProductAttributeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeResp.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteProductAttributeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询商品属性参数表列表
type QueryProductAttributeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum                    int64  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                                                              //第几页
	PageSize                   int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                                           //每页的数量
	Name                       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //
	ProductAttributeCategoryId int64  `protobuf:"varint,4,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //
	Type                       int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                                                                                   //属性的类型；0->规格；1->参数
}

func (x *QueryProductAttributeListReq) Reset() {
	*x = QueryProductAttributeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductAttributeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeListReq) ProtoMessage() {}

func (x *QueryProductAttributeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeListReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{79}
}

func (x *QueryProductAttributeListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductAttributeListReq) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ProductAttributeListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType                 int32  `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`                                                     //分类筛选样式：1->普通；1->颜色
	HandAddStatus              int32  `protobuf:"varint,2,opt,name=hand_add_status,json=handAddStatus,proto3" json:"hand_add_status,omitempty"`                                          //是否支持手动新增；0->不支持；1->支持
	Id                         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                       //
	InputList                  string `protobuf:"bytes,4,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`                                                         //可选值列表，以逗号隔开
	InputType                  int32  `protobuf:"varint,5,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`                                                        //属性录入方式：0->手工录入；1->从列表中选取
	Name                       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //
	ProductAttributeCategoryId int64  `protobuf:"varint,7,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //
	RelatedStatus              int32  `protobuf:"varint,8,opt,name=related_status,json=relatedStatus,proto3" json:"related_status,omitempty"`                                            //相同属性产品是否关联；0->不关联；1->关联
	SearchType                 int32  `protobuf:"varint,9,opt,name=search_type,json=searchType,proto3" json:"search_type,omitempty"`                                                     //检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
	SelectType                 int32  `protobuf:"varint,10,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"`                                                    //属性选择类型：0->唯一；1->单选；2->多选
	Sort                       int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                  //排序字段：最高的可以单独上传图片
	Type                       int32  `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`                                                                                  //属性的类型；0->规格；1->参数
}

func (x *ProductAttributeListData) Reset() {
	*x = ProductAttributeListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeListData) ProtoMessage() {}

func (x *ProductAttributeListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeListData.ProtoReflect.Descriptor instead.
func (*ProductAttributeListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{80}
}

func (x *ProductAttributeListData) GetFilterType() int32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *ProductAttributeListData) GetHandAddStatus() int32 {
	if x != nil {
		return x.HandAddStatus
	}
	return 0
}

func (x *ProductAttributeListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeListData) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *ProductAttributeListData) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ProductAttributeListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeListData) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *ProductAttributeListData) GetRelatedStatus() int32 {
	if x != nil {
		return x.RelatedStatus
	}
	return 0
}

func (x *ProductAttributeListData) GetSearchType() int32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *ProductAttributeListData) GetSelectType() int32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *ProductAttributeListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductAttributeListData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryProductAttributeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductAttributeListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductAttributeListResp) Reset() {
	*x = QueryProductAttributeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductAttributeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeListResp) ProtoMessage() {}

func (x *QueryProductAttributeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeListResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{81}
}

func (x *QueryProductAttributeListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductAttributeListResp) GetList() []*ProductAttributeListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryByproductCategoryIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCategoryId int64 `protobuf:"varint,1,opt,name=ProductCategoryId,proto3" json:"ProductCategoryId,omitempty"`
}

func (x *QueryByproductCategoryIdReq) Reset() {
	*x = QueryByproductCategoryIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByproductCategoryIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByproductCategoryIdReq) ProtoMessage() {}

func (x *QueryByproductCategoryIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByproductCategoryIdReq.ProtoReflect.Descriptor instead.
func (*QueryByproductCategoryIdReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{82}
}

func (x *QueryByproductCategoryIdReq) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

type QueryByproductCategoryIdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId         int64 `protobuf:"varint,1,opt,name=AttributeId,proto3" json:"AttributeId,omitempty"`
	AttributeCategoryId int64 `protobuf:"varint,2,opt,name=AttributeCategoryId,proto3" json:"AttributeCategoryId,omitempty"`
}

func (x *QueryByproductCategoryIdData) Reset() {
	*x = QueryByproductCategoryIdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByproductCategoryIdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByproductCategoryIdData) ProtoMessage() {}

func (x *QueryByproductCategoryIdData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByproductCategoryIdData.ProtoReflect.Descriptor instead.
func (*QueryByproductCategoryIdData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{83}
}

func (x *QueryByproductCategoryIdData) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *QueryByproductCategoryIdData) GetAttributeCategoryId() int64 {
	if x != nil {
		return x.AttributeCategoryId
	}
	return 0
}

type QueryByproductCategoryIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*QueryByproductCategoryIdData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryByproductCategoryIdResp) Reset() {
	*x = QueryByproductCategoryIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByproductCategoryIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByproductCategoryIdResp) ProtoMessage() {}

func (x *QueryByproductCategoryIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByproductCategoryIdResp.ProtoReflect.Descriptor instead.
func (*QueryByproductCategoryIdResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{84}
}

func (x *QueryByproductCategoryIdResp) GetList() []*QueryByproductCategoryIdData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品属性分类表
type AddProductAttributeCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` //
}

func (x *AddProductAttributeCategoryReq) Reset() {
	*x = AddProductAttributeCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductAttributeCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeCategoryReq) ProtoMessage() {}

func (x *AddProductAttributeCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeCategoryReq.ProtoReflect.Descriptor instead.
func (*AddProductAttributeCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{85}
}

func (x *AddProductAttributeCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddProductAttributeCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductAttributeCategoryResp) Reset() {
	*x = AddProductAttributeCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductAttributeCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeCategoryResp) ProtoMessage() {}

func (x *AddProductAttributeCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeCategoryResp.ProtoReflect.Descriptor instead.
func (*AddProductAttributeCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{86}
}

func (x *AddProductAttributeCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品属性分类表
type DeleteProductAttributeCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductAttributeCategoryReq) Reset() {
	*x = DeleteProductAttributeCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeCategoryReq) ProtoMessage() {}

func (x *DeleteProductAttributeCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{87}
}

func (x *DeleteProductAttributeCategoryReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductAttributeCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductAttributeCategoryResp) Reset() {
	*x = DeleteProductAttributeCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeCategoryResp) ProtoMessage() {}

func (x *DeleteProductAttributeCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeCategoryResp.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteProductAttributeCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品属性分类表
type UpdateProductAttributeCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeCount int32  `protobuf:"varint,1,opt,name=attribute_count,json=attributeCount,proto3" json:"attribute_count,omitempty"` //属性数量
	Id             int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            //
	ParamCount     int32  `protobuf:"varint,4,opt,name=param_count,json=paramCount,proto3" json:"param_count,omitempty"`             //参数数量
}

func (x *UpdateProductAttributeCategoryReq) Reset() {
	*x = UpdateProductAttributeCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductAttributeCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeCategoryReq) ProtoMessage() {}

func (x *UpdateProductAttributeCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateProductAttributeCategoryReq) GetAttributeCount() int32 {
	if x != nil {
		return x.AttributeCount
	}
	return 0
}

func (x *UpdateProductAttributeCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductAttributeCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductAttributeCategoryReq) GetParamCount() int32 {
	if x != nil {
		return x.ParamCount
	}
	return 0
}

type UpdateProductAttributeCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductAttributeCategoryResp) Reset() {
	*x = UpdateProductAttributeCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductAttributeCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeCategoryResp) ProtoMessage() {}

func (x *UpdateProductAttributeCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeCategoryResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateProductAttributeCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询产品属性分类表列表
type QueryProductAttributeCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                          //
}

func (x *QueryProductAttributeCategoryListReq) Reset() {
	*x = QueryProductAttributeCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductAttributeCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeCategoryListReq) ProtoMessage() {}

func (x *QueryProductAttributeCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeCategoryListReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeCategoryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{91}
}

func (x *QueryProductAttributeCategoryListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductAttributeCategoryListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductAttributeCategoryListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProductAttributeCategoryListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeCount       int32                   `protobuf:"varint,1,opt,name=attribute_count,json=attributeCount,proto3" json:"attribute_count,omitempty"` //属性数量
	Id                   int64                   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name                 string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            //
	ParamCount           int32                   `protobuf:"varint,4,opt,name=param_count,json=paramCount,proto3" json:"param_count,omitempty"`             //参数数量
	ProductAttributeList []*ProductAttributeData `protobuf:"bytes,5,rep,name=ProductAttributeList,proto3" json:"ProductAttributeList,omitempty"`
}

func (x *ProductAttributeCategoryListData) Reset() {
	*x = ProductAttributeCategoryListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeCategoryListData) ProtoMessage() {}

func (x *ProductAttributeCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeCategoryListData.ProtoReflect.Descriptor instead.
func (*ProductAttributeCategoryListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{92}
}

func (x *ProductAttributeCategoryListData) GetAttributeCount() int32 {
	if x != nil {
		return x.AttributeCount
	}
	return 0
}

func (x *ProductAttributeCategoryListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeCategoryListData) GetParamCount() int32 {
	if x != nil {
		return x.ParamCount
	}
	return 0
}

func (x *ProductAttributeCategoryListData) GetProductAttributeList() []*ProductAttributeData {
	if x != nil {
		return x.ProductAttributeList
	}
	return nil
}

type ProductAttributeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType                 int32  `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`                                                     //分类筛选样式：1->普通；1->颜色
	HandAddStatus              int32  `protobuf:"varint,2,opt,name=hand_add_status,json=handAddStatus,proto3" json:"hand_add_status,omitempty"`                                          //是否支持手动新增；0->不支持；1->支持
	Id                         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                       //
	InputList                  string `protobuf:"bytes,4,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`                                                         //可选值列表，以逗号隔开
	InputType                  int32  `protobuf:"varint,5,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`                                                        //属性录入方式：0->手工录入；1->从列表中选取
	Name                       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                    //
	ProductAttributeCategoryId int64  `protobuf:"varint,7,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` //
	RelatedStatus              int32  `protobuf:"varint,8,opt,name=related_status,json=relatedStatus,proto3" json:"related_status,omitempty"`                                            //相同属性产品是否关联；0->不关联；1->关联
	SearchType                 int32  `protobuf:"varint,9,opt,name=search_type,json=searchType,proto3" json:"search_type,omitempty"`                                                     //检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
	SelectType                 int32  `protobuf:"varint,10,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"`                                                    //属性选择类型：0->唯一；1->单选；2->多选
	Sort                       int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                  //排序字段：最高的可以单独上传图片
	Type                       int32  `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`                                                                                  //属性的类型；0->规格；1->参数
}

func (x *ProductAttributeData) Reset() {
	*x = ProductAttributeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeData) ProtoMessage() {}

func (x *ProductAttributeData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeData.ProtoReflect.Descriptor instead.
func (*ProductAttributeData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{93}
}

func (x *ProductAttributeData) GetFilterType() int32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *ProductAttributeData) GetHandAddStatus() int32 {
	if x != nil {
		return x.HandAddStatus
	}
	return 0
}

func (x *ProductAttributeData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeData) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *ProductAttributeData) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ProductAttributeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeData) GetProductAttributeCategoryId() int64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *ProductAttributeData) GetRelatedStatus() int32 {
	if x != nil {
		return x.RelatedStatus
	}
	return 0
}

func (x *ProductAttributeData) GetSearchType() int32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *ProductAttributeData) GetSelectType() int32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *ProductAttributeData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductAttributeData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryProductAttributeCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductAttributeCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductAttributeCategoryListResp) Reset() {
	*x = QueryProductAttributeCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductAttributeCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeCategoryListResp) ProtoMessage() {}

func (x *QueryProductAttributeCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeCategoryListResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeCategoryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{94}
}

func (x *QueryProductAttributeCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductAttributeCategoryListResp) GetList() []*ProductAttributeCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加存储产品参数信息的表
type AddProductAttributeValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAttributeId int64  `protobuf:"varint,1,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //
	ProductId          int64  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                              //
	Value              string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                        //手动添加规格或参数的值，参数单值，规格有多个时以逗号隔开
}

func (x *AddProductAttributeValueReq) Reset() {
	*x = AddProductAttributeValueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductAttributeValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeValueReq) ProtoMessage() {}

func (x *AddProductAttributeValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeValueReq.ProtoReflect.Descriptor instead.
func (*AddProductAttributeValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{95}
}

func (x *AddProductAttributeValueReq) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *AddProductAttributeValueReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductAttributeValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AddProductAttributeValueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductAttributeValueResp) Reset() {
	*x = AddProductAttributeValueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductAttributeValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeValueResp) ProtoMessage() {}

func (x *AddProductAttributeValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeValueResp.ProtoReflect.Descriptor instead.
func (*AddProductAttributeValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{96}
}

func (x *AddProductAttributeValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除存储产品参数信息的表
type DeleteProductAttributeValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductAttributeValueReq) Reset() {
	*x = DeleteProductAttributeValueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeValueReq) ProtoMessage() {}

func (x *DeleteProductAttributeValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeValueReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{97}
}

func (x *DeleteProductAttributeValueReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductAttributeValueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductAttributeValueResp) Reset() {
	*x = DeleteProductAttributeValueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeValueResp) ProtoMessage() {}

func (x *DeleteProductAttributeValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeValueResp.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteProductAttributeValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新存储产品参数信息的表
type UpdateProductAttributeValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             //
	ProductAttributeId int64  `protobuf:"varint,2,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //
	ProductId          int64  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                              //
	Value              string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                        //手动添加规格或参数的值，参数单值，规格有多个时以逗号隔开
}

func (x *UpdateProductAttributeValueReq) Reset() {
	*x = UpdateProductAttributeValueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductAttributeValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeValueReq) ProtoMessage() {}

func (x *UpdateProductAttributeValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeValueReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateProductAttributeValueReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateProductAttributeValueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductAttributeValueResp) Reset() {
	*x = UpdateProductAttributeValueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductAttributeValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeValueResp) ProtoMessage() {}

func (x *UpdateProductAttributeValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeValueResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateProductAttributeValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询存储产品参数信息的表列表
type QueryProductAttributeValueListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QueryProductAttributeValueListReq) Reset() {
	*x = QueryProductAttributeValueListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductAttributeValueListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeValueListReq) ProtoMessage() {}

func (x *QueryProductAttributeValueListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeValueListReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeValueListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{101}
}

func (x *QueryProductAttributeValueListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductAttributeValueListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             //
	ProductAttributeId int64  `protobuf:"varint,2,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //
	ProductId          int64  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                              //
	Value              string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                        //手动添加规格或参数的值，参数单值，规格有多个时以逗号隔开
}

func (x *ProductAttributeValueListData) Reset() {
	*x = ProductAttributeValueListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeValueListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeValueListData) ProtoMessage() {}

func (x *ProductAttributeValueListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeValueListData.ProtoReflect.Descriptor instead.
func (*ProductAttributeValueListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{102}
}

func (x *ProductAttributeValueListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeValueListData) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *ProductAttributeValueListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductAttributeValueListData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type QueryProductAttributeValueListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductAttributeValueListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductAttributeValueListResp) Reset() {
	*x = QueryProductAttributeValueListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductAttributeValueListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeValueListResp) ProtoMessage() {}

func (x *QueryProductAttributeValueListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeValueListResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeValueListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{103}
}

func (x *QueryProductAttributeValueListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductAttributeValueListResp) GetList() []*ProductAttributeValueListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品分类
type AddProductCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description            string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	Icon                   string  `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                      //图标
	Id                     int64   `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                         //
	Keywords               string  `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`                              //
	Level                  int32   `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                   //分类级别：0->1级；1->2级
	Name                   string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                      //
	NavStatus              int32   `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`          //是否显示在导航栏：0->不显示；1->显示
	ParentId               int64   `protobuf:"varint,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`             //上机分类的编号：0表示一级分类
	ProductCount           int32   `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"` //
	ProductUnit            string  `protobuf:"bytes,10,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`    //
	ShowStatus             int32   `protobuf:"varint,11,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`      //显示状态：0->不显示；1->显示
	Sort                   int32   `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                                    //
	ProductAttributeIdList []int64 `protobuf:"varint,13,rep,packed,name=ProductAttributeIdList,proto3" json:"ProductAttributeIdList,omitempty"`
}

func (x *AddProductCategoryReq) Reset() {
	*x = AddProductCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryReq) ProtoMessage() {}

func (x *AddProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryReq.ProtoReflect.Descriptor instead.
func (*AddProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{104}
}

func (x *AddProductCategoryReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddProductCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddProductCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductCategoryReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *AddProductCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AddProductCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductCategoryReq) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *AddProductCategoryReq) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AddProductCategoryReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *AddProductCategoryReq) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *AddProductCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddProductCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductCategoryReq) GetProductAttributeIdList() []int64 {
	if x != nil {
		return x.ProductAttributeIdList
	}
	return nil
}

type AddProductCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductCategoryResp) Reset() {
	*x = AddProductCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryResp) ProtoMessage() {}

func (x *AddProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryResp.ProtoReflect.Descriptor instead.
func (*AddProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{105}
}

func (x *AddProductCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品分类
type DeleteProductCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductCategoryReq) Reset() {
	*x = DeleteProductCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCategoryReq) ProtoMessage() {}

func (x *DeleteProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{106}
}

func (x *DeleteProductCategoryReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductCategoryResp) Reset() {
	*x = DeleteProductCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCategoryResp) ProtoMessage() {}

func (x *DeleteProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCategoryResp.ProtoReflect.Descriptor instead.
func (*DeleteProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteProductCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品分类
type UpdateProductCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description            string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	Icon                   string  `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                      //图标
	Id                     int64   `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                         //
	Keywords               string  `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`                              //
	Level                  int32   `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                   //分类级别：0->1级；1->2级
	Name                   string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                      //
	NavStatus              int32   `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`          //是否显示在导航栏：0->不显示；1->显示
	ParentId               int64   `protobuf:"varint,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`             //上机分类的编号：0表示一级分类
	ProductCount           int32   `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"` //
	ProductUnit            string  `protobuf:"bytes,10,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`    //
	ShowStatus             int32   `protobuf:"varint,11,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`      //显示状态：0->不显示；1->显示
	Sort                   int32   `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                                    //
	ProductAttributeIdList []int64 `protobuf:"varint,13,rep,packed,name=ProductAttributeIdList,proto3" json:"ProductAttributeIdList,omitempty"`
}

func (x *UpdateProductCategoryReq) Reset() {
	*x = UpdateProductCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryReq) ProtoMessage() {}

func (x *UpdateProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateProductCategoryReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetProductAttributeIdList() []int64 {
	if x != nil {
		return x.ProductAttributeIdList
	}
	return nil
}

type UpdateProductCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductCategoryResp) Reset() {
	*x = UpdateProductCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryResp) ProtoMessage() {}

func (x *UpdateProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryResp.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateProductCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品分类状态
type UpdateProductCategoryStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` //
	Status int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateProductCategoryStatusReq) Reset() {
	*x = UpdateProductCategoryStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductCategoryStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryStatusReq) ProtoMessage() {}

func (x *UpdateProductCategoryStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateProductCategoryStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductCategoryStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateProductCategoryStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductCategoryStatusResp) Reset() {
	*x = UpdateProductCategoryStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductCategoryStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryStatusResp) ProtoMessage() {}

func (x *UpdateProductCategoryStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{111}
}

func (x *UpdateProductCategoryStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询产品分类详情
type QueryProductCategoryDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductCategoryDetailReq) Reset() {
	*x = QueryProductCategoryDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryDetailReq) ProtoMessage() {}

func (x *QueryProductCategoryDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{112}
}

func (x *QueryProductCategoryDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductCategoryDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	Icon         string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                      //图标
	Id           int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                         //
	Keywords     string `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`                              //
	Level        int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                   //分类级别：0->1级；1->2级
	Name         string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                      //
	NavStatus    int32  `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`          //是否显示在导航栏：0->不显示；1->显示
	ParentId     int64  `protobuf:"varint,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`             //上机分类的编号：0表示一级分类
	ProductCount int32  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"` //
	ProductUnit  string `protobuf:"bytes,10,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`    //
	ShowStatus   int32  `protobuf:"varint,11,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`      //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                                    //
}

func (x *QueryProductCategoryDetailResp) Reset() {
	*x = QueryProductCategoryDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryDetailResp) ProtoMessage() {}

func (x *QueryProductCategoryDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{113}
}

func (x *QueryProductCategoryDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// 分页查询产品分类列表
type QueryProductCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum    int64  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize   int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //
	NavStatus  int32  `protobuf:"varint,4,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`    //是否显示在导航栏：0->不显示；1->显示
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	ParentId   int64  `protobuf:"varint,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`       //上机分类的编号：0表示一级分类
}

func (x *QueryProductCategoryListReq) Reset() {
	*x = QueryProductCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListReq) ProtoMessage() {}

func (x *QueryProductCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{114}
}

func (x *QueryProductCategoryListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductCategoryListReq) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type ProductCategoryListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	Icon         string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                      //图标
	Id           int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                         //
	Keywords     string `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`                              //
	Level        int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                   //分类级别：0->1级；1->2级
	Name         string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                      //
	NavStatus    int32  `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`          //是否显示在导航栏：0->不显示；1->显示
	ParentId     int64  `protobuf:"varint,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`             //上机分类的编号：0表示一级分类
	ProductCount int32  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"` //
	ProductUnit  string `protobuf:"bytes,10,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`    //
	ShowStatus   int32  `protobuf:"varint,11,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`      //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                                    //
}

func (x *ProductCategoryListData) Reset() {
	*x = ProductCategoryListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryListData) ProtoMessage() {}

func (x *ProductCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryListData.ProtoReflect.Descriptor instead.
func (*ProductCategoryListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{115}
}

func (x *ProductCategoryListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductCategoryListData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ProductCategoryListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategoryListData) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductCategoryListData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProductCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategoryListData) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *ProductCategoryListData) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ProductCategoryListData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *ProductCategoryListData) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *ProductCategoryListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *ProductCategoryListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type QueryProductCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductCategoryListResp) Reset() {
	*x = QueryProductCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListResp) ProtoMessage() {}

func (x *QueryProductCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{116}
}

func (x *QueryProductCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductCategoryListResp) GetList() []*ProductCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryProductCategoryTreeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryProductCategoryTreeListReq) Reset() {
	*x = QueryProductCategoryTreeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryTreeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryTreeListReq) ProtoMessage() {}

func (x *QueryProductCategoryTreeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryTreeListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryTreeListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{117}
}

type QueryProductCategoryListTreeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64                               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string                              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ImageUrl string                              `protobuf:"bytes,3,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`
	Children []*QueryProductCategoryListTreeData `protobuf:"bytes,4,rep,name=Children,proto3" json:"Children,omitempty"`
}

func (x *QueryProductCategoryListTreeData) Reset() {
	*x = QueryProductCategoryListTreeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryListTreeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListTreeData) ProtoMessage() {}

func (x *QueryProductCategoryListTreeData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListTreeData.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListTreeData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{118}
}

func (x *QueryProductCategoryListTreeData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductCategoryListTreeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductCategoryListTreeData) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *QueryProductCategoryListTreeData) GetChildren() []*QueryProductCategoryListTreeData {
	if x != nil {
		return x.Children
	}
	return nil
}

type QueryProductCategoryListTreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*QueryProductCategoryListTreeData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductCategoryListTreeResp) Reset() {
	*x = QueryProductCategoryListTreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryListTreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListTreeResp) ProtoMessage() {}

func (x *QueryProductCategoryListTreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListTreeResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListTreeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{119}
}

func (x *QueryProductCategoryListTreeResp) GetList() []*QueryProductCategoryListTreeData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
type AddProductCategoryAttributeRelationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAttributeId int64 `protobuf:"varint,1,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //
	ProductCategoryId  int64 `protobuf:"varint,2,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`    //
}

func (x *AddProductCategoryAttributeRelationReq) Reset() {
	*x = AddProductCategoryAttributeRelationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductCategoryAttributeRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryAttributeRelationReq) ProtoMessage() {}

func (x *AddProductCategoryAttributeRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryAttributeRelationReq.ProtoReflect.Descriptor instead.
func (*AddProductCategoryAttributeRelationReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{120}
}

func (x *AddProductCategoryAttributeRelationReq) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *AddProductCategoryAttributeRelationReq) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

type AddProductCategoryAttributeRelationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductCategoryAttributeRelationResp) Reset() {
	*x = AddProductCategoryAttributeRelationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductCategoryAttributeRelationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryAttributeRelationResp) ProtoMessage() {}

func (x *AddProductCategoryAttributeRelationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryAttributeRelationResp.ProtoReflect.Descriptor instead.
func (*AddProductCategoryAttributeRelationResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{121}
}

func (x *AddProductCategoryAttributeRelationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）列表
type QueryProductCategoryAttributeRelationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
}

func (x *QueryProductCategoryAttributeRelationListReq) Reset() {
	*x = QueryProductCategoryAttributeRelationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryAttributeRelationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryAttributeRelationListReq) ProtoMessage() {}

func (x *QueryProductCategoryAttributeRelationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryAttributeRelationListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryAttributeRelationListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{122}
}

func (x *QueryProductCategoryAttributeRelationListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductCategoryAttributeRelationListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductCategoryAttributeRelationListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             //
	ProductAttributeId int64 `protobuf:"varint,2,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //
	ProductCategoryId  int64 `protobuf:"varint,3,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`    //
}

func (x *ProductCategoryAttributeRelationListData) Reset() {
	*x = ProductCategoryAttributeRelationListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryAttributeRelationListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryAttributeRelationListData) ProtoMessage() {}

func (x *ProductCategoryAttributeRelationListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryAttributeRelationListData.ProtoReflect.Descriptor instead.
func (*ProductCategoryAttributeRelationListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{123}
}

func (x *ProductCategoryAttributeRelationListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategoryAttributeRelationListData) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *ProductCategoryAttributeRelationListData) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

type QueryProductCategoryAttributeRelationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductCategoryAttributeRelationListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductCategoryAttributeRelationListResp) Reset() {
	*x = QueryProductCategoryAttributeRelationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCategoryAttributeRelationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryAttributeRelationListResp) ProtoMessage() {}

func (x *QueryProductCategoryAttributeRelationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryAttributeRelationListResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryAttributeRelationListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{124}
}

func (x *QueryProductCategoryAttributeRelationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductCategoryAttributeRelationListResp) GetList() []*ProductCategoryAttributeRelationListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加收藏表
type AddProductCollectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddTime     string `protobuf:"bytes,1,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`              //创建时间
	CollectType int32  `protobuf:"varint,2,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty"` //收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	Deleted     int32  `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`                            //逻辑删除
	Id          int32  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                      //
	UpdateTime  string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`     //更新时间
	UserId      int32  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户表的用户ID
	ValueId     int32  `protobuf:"varint,7,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`             //如果type=0，则是商品ID；如果type=1，则是专题ID
}

func (x *AddProductCollectReq) Reset() {
	*x = AddProductCollectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCollectReq) ProtoMessage() {}

func (x *AddProductCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCollectReq.ProtoReflect.Descriptor instead.
func (*AddProductCollectReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{125}
}

func (x *AddProductCollectReq) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

func (x *AddProductCollectReq) GetCollectType() int32 {
	if x != nil {
		return x.CollectType
	}
	return 0
}

func (x *AddProductCollectReq) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *AddProductCollectReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductCollectReq) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AddProductCollectReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddProductCollectReq) GetValueId() int32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

type AddProductCollectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductCollectResp) Reset() {
	*x = AddProductCollectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCollectResp) ProtoMessage() {}

func (x *AddProductCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCollectResp.ProtoReflect.Descriptor instead.
func (*AddProductCollectResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{126}
}

func (x *AddProductCollectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除收藏表
type DeleteProductCollectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductCollectReq) Reset() {
	*x = DeleteProductCollectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCollectReq) ProtoMessage() {}

func (x *DeleteProductCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCollectReq.ProtoReflect.Descriptor instead.
func (*DeleteProductCollectReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteProductCollectReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductCollectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductCollectResp) Reset() {
	*x = DeleteProductCollectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCollectResp) ProtoMessage() {}

func (x *DeleteProductCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCollectResp.ProtoReflect.Descriptor instead.
func (*DeleteProductCollectResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{128}
}

func (x *DeleteProductCollectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询收藏表详情
type QueryProductCollectDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductCollectDetailReq) Reset() {
	*x = QueryProductCollectDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCollectDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectDetailReq) ProtoMessage() {}

func (x *QueryProductCollectDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductCollectDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{129}
}

func (x *QueryProductCollectDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductCollectDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddTime     string `protobuf:"bytes,1,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`              //创建时间
	CollectType int32  `protobuf:"varint,2,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty"` //收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	Deleted     int32  `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`                            //逻辑删除
	Id          int32  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                      //
	UpdateTime  string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`     //更新时间
	UserId      int32  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户表的用户ID
	ValueId     int32  `protobuf:"varint,7,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`             //如果type=0，则是商品ID；如果type=1，则是专题ID
}

func (x *QueryProductCollectDetailResp) Reset() {
	*x = QueryProductCollectDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCollectDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectDetailResp) ProtoMessage() {}

func (x *QueryProductCollectDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductCollectDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{130}
}

func (x *QueryProductCollectDetailResp) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

func (x *QueryProductCollectDetailResp) GetCollectType() int32 {
	if x != nil {
		return x.CollectType
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QueryProductCollectDetailResp) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetValueId() int32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

// 分页查询收藏表列表
type QueryProductCollectListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	UserId   int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       //用户表的用户ID
}

func (x *QueryProductCollectListReq) Reset() {
	*x = QueryProductCollectListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCollectListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectListReq) ProtoMessage() {}

func (x *QueryProductCollectListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCollectListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{131}
}

func (x *QueryProductCollectListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductCollectListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductCollectListReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ProductCollectListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddTime     string `protobuf:"bytes,1,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`              //创建时间
	CollectType int32  `protobuf:"varint,2,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty"` //收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	Deleted     int32  `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`                            //逻辑删除
	Id          int32  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                      //
	UpdateTime  string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`     //更新时间
	UserId      int32  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户表的用户ID
	ValueId     int32  `protobuf:"varint,7,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`             //如果type=0，则是商品ID；如果type=1，则是专题ID
}

func (x *ProductCollectListData) Reset() {
	*x = ProductCollectListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCollectListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCollectListData) ProtoMessage() {}

func (x *ProductCollectListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCollectListData.ProtoReflect.Descriptor instead.
func (*ProductCollectListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{132}
}

func (x *ProductCollectListData) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

func (x *ProductCollectListData) GetCollectType() int32 {
	if x != nil {
		return x.CollectType
	}
	return 0
}

func (x *ProductCollectListData) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *ProductCollectListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCollectListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProductCollectListData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProductCollectListData) GetValueId() int32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

type QueryProductCollectListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductCollectListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductCollectListResp) Reset() {
	*x = QueryProductCollectListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductCollectListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectListResp) ProtoMessage() {}

func (x *QueryProductCollectListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectListResp.ProtoReflect.Descriptor instead.
func (*QueryProductCollectListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{133}
}

func (x *QueryProductCollectListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductCollectListResp) GetList() []*ProductCollectListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品满减表(只针对同商品)
type AddProductFullReductionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullPrice   int64 `protobuf:"varint,1,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //
	ProductId   int64 `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`       //
	ReducePrice int64 `protobuf:"varint,3,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //
}

func (x *AddProductFullReductionReq) Reset() {
	*x = AddProductFullReductionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductFullReductionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductFullReductionReq) ProtoMessage() {}

func (x *AddProductFullReductionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductFullReductionReq.ProtoReflect.Descriptor instead.
func (*AddProductFullReductionReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{134}
}

func (x *AddProductFullReductionReq) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *AddProductFullReductionReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductFullReductionReq) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type AddProductFullReductionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductFullReductionResp) Reset() {
	*x = AddProductFullReductionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductFullReductionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductFullReductionResp) ProtoMessage() {}

func (x *AddProductFullReductionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductFullReductionResp.ProtoReflect.Descriptor instead.
func (*AddProductFullReductionResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{135}
}

func (x *AddProductFullReductionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品满减表(只针对同商品)
type DeleteProductFullReductionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductFullReductionReq) Reset() {
	*x = DeleteProductFullReductionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductFullReductionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductFullReductionReq) ProtoMessage() {}

func (x *DeleteProductFullReductionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductFullReductionReq.ProtoReflect.Descriptor instead.
func (*DeleteProductFullReductionReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{136}
}

func (x *DeleteProductFullReductionReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductFullReductionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductFullReductionResp) Reset() {
	*x = DeleteProductFullReductionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductFullReductionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductFullReductionResp) ProtoMessage() {}

func (x *DeleteProductFullReductionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductFullReductionResp.ProtoReflect.Descriptor instead.
func (*DeleteProductFullReductionResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{137}
}

func (x *DeleteProductFullReductionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询产品满减表(只针对同商品)列表
type QueryProductFullReductionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QueryProductFullReductionListReq) Reset() {
	*x = QueryProductFullReductionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductFullReductionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductFullReductionListReq) ProtoMessage() {}

func (x *QueryProductFullReductionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductFullReductionListReq.ProtoReflect.Descriptor instead.
func (*QueryProductFullReductionListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{138}
}

func (x *QueryProductFullReductionListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductFullReductionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullPrice   int64 `protobuf:"varint,1,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //
	Id          int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                      //
	ProductId   int64 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`       //
	ReducePrice int64 `protobuf:"varint,4,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //
}

func (x *ProductFullReductionListData) Reset() {
	*x = ProductFullReductionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFullReductionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFullReductionListData) ProtoMessage() {}

func (x *ProductFullReductionListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFullReductionListData.ProtoReflect.Descriptor instead.
func (*ProductFullReductionListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{139}
}

func (x *ProductFullReductionListData) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *ProductFullReductionListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductFullReductionListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductFullReductionListData) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type QueryProductFullReductionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductFullReductionListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductFullReductionListResp) Reset() {
	*x = QueryProductFullReductionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductFullReductionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductFullReductionListResp) ProtoMessage() {}

func (x *QueryProductFullReductionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductFullReductionListResp.ProtoReflect.Descriptor instead.
func (*QueryProductFullReductionListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{140}
}

func (x *QueryProductFullReductionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductFullReductionListResp) GetList() []*ProductFullReductionListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品阶梯价格表(只针对同商品)
type AddProductLadderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount  int64 `protobuf:"varint,2,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	ProductId int64 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
	Price     int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
}

func (x *AddProductLadderReq) Reset() {
	*x = AddProductLadderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductLadderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductLadderReq) ProtoMessage() {}

func (x *AddProductLadderReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductLadderReq.ProtoReflect.Descriptor instead.
func (*AddProductLadderReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{141}
}

func (x *AddProductLadderReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddProductLadderReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *AddProductLadderReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductLadderReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type AddProductLadderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductLadderResp) Reset() {
	*x = AddProductLadderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductLadderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductLadderResp) ProtoMessage() {}

func (x *AddProductLadderResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductLadderResp.ProtoReflect.Descriptor instead.
func (*AddProductLadderResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{142}
}

func (x *AddProductLadderResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品阶梯价格表(只针对同商品)
type DeleteProductLadderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductLadderReq) Reset() {
	*x = DeleteProductLadderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductLadderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductLadderReq) ProtoMessage() {}

func (x *DeleteProductLadderReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductLadderReq.ProtoReflect.Descriptor instead.
func (*DeleteProductLadderReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{143}
}

func (x *DeleteProductLadderReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductLadderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductLadderResp) Reset() {
	*x = DeleteProductLadderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductLadderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductLadderResp) ProtoMessage() {}

func (x *DeleteProductLadderResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductLadderResp.ProtoReflect.Descriptor instead.
func (*DeleteProductLadderResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{144}
}

func (x *DeleteProductLadderResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品阶梯价格表(只针对同商品)
type UpdateProductLadderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount  int64 `protobuf:"varint,2,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Id        int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                //
	Price     int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	ProductId int64 `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *UpdateProductLadderReq) Reset() {
	*x = UpdateProductLadderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductLadderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductLadderReq) ProtoMessage() {}

func (x *UpdateProductLadderReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductLadderReq.ProtoReflect.Descriptor instead.
func (*UpdateProductLadderReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateProductLadderReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateProductLadderReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *UpdateProductLadderReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductLadderReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateProductLadderReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type UpdateProductLadderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductLadderResp) Reset() {
	*x = UpdateProductLadderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductLadderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductLadderResp) ProtoMessage() {}

func (x *UpdateProductLadderResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductLadderResp.ProtoReflect.Descriptor instead.
func (*UpdateProductLadderResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{146}
}

func (x *UpdateProductLadderResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询产品阶梯价格表(只针对同商品)详情
type QueryProductLadderDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductLadderDetailReq) Reset() {
	*x = QueryProductLadderDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductLadderDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderDetailReq) ProtoMessage() {}

func (x *QueryProductLadderDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductLadderDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{147}
}

func (x *QueryProductLadderDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductLadderDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount  int64 `protobuf:"varint,2,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Id        int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                //
	Price     int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	ProductId int64 `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QueryProductLadderDetailResp) Reset() {
	*x = QueryProductLadderDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductLadderDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderDetailResp) ProtoMessage() {}

func (x *QueryProductLadderDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductLadderDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{148}
}

func (x *QueryProductLadderDetailResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

// 分页查询产品阶梯价格表(只针对同商品)列表
type QueryProductLadderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QueryProductLadderListReq) Reset() {
	*x = QueryProductLadderListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductLadderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderListReq) ProtoMessage() {}

func (x *QueryProductLadderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderListReq.ProtoReflect.Descriptor instead.
func (*QueryProductLadderListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{149}
}

func (x *QueryProductLadderListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductLadderListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount  int64 `protobuf:"varint,2,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Id        int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                //
	Price     int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	ProductId int64 `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *ProductLadderListData) Reset() {
	*x = ProductLadderListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductLadderListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLadderListData) ProtoMessage() {}

func (x *ProductLadderListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLadderListData.ProtoReflect.Descriptor instead.
func (*ProductLadderListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{150}
}

func (x *ProductLadderListData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductLadderListData) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ProductLadderListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductLadderListData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductLadderListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type QueryProductLadderListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductLadderListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductLadderListResp) Reset() {
	*x = QueryProductLadderListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductLadderListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderListResp) ProtoMessage() {}

func (x *QueryProductLadderListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderListResp.ProtoReflect.Descriptor instead.
func (*QueryProductLadderListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{151}
}

func (x *QueryProductLadderListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductLadderListResp) GetList() []*ProductLadderListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加
type AddProductOperateLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime       string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                         //
	GiftPointNew     int32  `protobuf:"varint,2,opt,name=gift_point_new,json=giftPointNew,proto3" json:"gift_point_new,omitempty"`                //
	GiftPointOld     int32  `protobuf:"varint,3,opt,name=gift_point_old,json=giftPointOld,proto3" json:"gift_point_old,omitempty"`                //赠送的积分
	UsePointLimitOld int32  `protobuf:"varint,4,opt,name=use_point_limit_old,json=usePointLimitOld,proto3" json:"use_point_limit_old,omitempty"`  //
	OperateMan       string `protobuf:"bytes,5,opt,name=operate_man,json=operateMan,proto3" json:"operate_man,omitempty"`                         //操作人
	PriceNew         int64  `protobuf:"varint,6,opt,name=price_new,json=priceNew,proto3" json:"price_new,omitempty"`                              //
	PriceOld         int64  `protobuf:"varint,7,opt,name=price_old,json=priceOld,proto3" json:"price_old,omitempty"`                              //
	ProductId        int64  `protobuf:"varint,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           //
	SalePriceNew     int64  `protobuf:"varint,9,opt,name=sale_price_new,json=salePriceNew,proto3" json:"sale_price_new,omitempty"`                //
	SalePriceOld     int64  `protobuf:"varint,10,opt,name=sale_price_old,json=salePriceOld,proto3" json:"sale_price_old,omitempty"`               //
	UsePointLimitNew int32  `protobuf:"varint,11,opt,name=use_point_limit_new,json=usePointLimitNew,proto3" json:"use_point_limit_new,omitempty"` //
}

func (x *AddProductOperateLogReq) Reset() {
	*x = AddProductOperateLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductOperateLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductOperateLogReq) ProtoMessage() {}

func (x *AddProductOperateLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductOperateLogReq.ProtoReflect.Descriptor instead.
func (*AddProductOperateLogReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{152}
}

func (x *AddProductOperateLogReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AddProductOperateLogReq) GetGiftPointNew() int32 {
	if x != nil {
		return x.GiftPointNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetGiftPointOld() int32 {
	if x != nil {
		return x.GiftPointOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetUsePointLimitOld() int32 {
	if x != nil {
		return x.UsePointLimitOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetOperateMan() string {
	if x != nil {
		return x.OperateMan
	}
	return ""
}

func (x *AddProductOperateLogReq) GetPriceNew() int64 {
	if x != nil {
		return x.PriceNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetPriceOld() int64 {
	if x != nil {
		return x.PriceOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductOperateLogReq) GetSalePriceNew() int64 {
	if x != nil {
		return x.SalePriceNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetSalePriceOld() int64 {
	if x != nil {
		return x.SalePriceOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetUsePointLimitNew() int32 {
	if x != nil {
		return x.UsePointLimitNew
	}
	return 0
}

type AddProductOperateLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductOperateLogResp) Reset() {
	*x = AddProductOperateLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductOperateLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductOperateLogResp) ProtoMessage() {}

func (x *AddProductOperateLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductOperateLogResp.ProtoReflect.Descriptor instead.
func (*AddProductOperateLogResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{153}
}

func (x *AddProductOperateLogResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除
type DeleteProductOperateLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductOperateLogReq) Reset() {
	*x = DeleteProductOperateLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductOperateLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductOperateLogReq) ProtoMessage() {}

func (x *DeleteProductOperateLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductOperateLogReq.ProtoReflect.Descriptor instead.
func (*DeleteProductOperateLogReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{154}
}

func (x *DeleteProductOperateLogReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductOperateLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductOperateLogResp) Reset() {
	*x = DeleteProductOperateLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductOperateLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductOperateLogResp) ProtoMessage() {}

func (x *DeleteProductOperateLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductOperateLogResp.ProtoReflect.Descriptor instead.
func (*DeleteProductOperateLogResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{155}
}

func (x *DeleteProductOperateLogResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询详情
type QueryProductOperateLogDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductOperateLogDetailReq) Reset() {
	*x = QueryProductOperateLogDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductOperateLogDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogDetailReq) ProtoMessage() {}

func (x *QueryProductOperateLogDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{156}
}

func (x *QueryProductOperateLogDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductOperateLogDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime       string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                         //
	GiftPointNew     int32  `protobuf:"varint,2,opt,name=gift_point_new,json=giftPointNew,proto3" json:"gift_point_new,omitempty"`                //
	GiftPointOld     int32  `protobuf:"varint,3,opt,name=gift_point_old,json=giftPointOld,proto3" json:"gift_point_old,omitempty"`                //赠送的积分
	Id               int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                          //
	OperateMan       string `protobuf:"bytes,5,opt,name=operate_man,json=operateMan,proto3" json:"operate_man,omitempty"`                         //操作人
	PriceNew         int64  `protobuf:"varint,6,opt,name=price_new,json=priceNew,proto3" json:"price_new,omitempty"`                              //
	PriceOld         int64  `protobuf:"varint,7,opt,name=price_old,json=priceOld,proto3" json:"price_old,omitempty"`                              //
	ProductId        int64  `protobuf:"varint,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           //
	SalePriceNew     int64  `protobuf:"varint,9,opt,name=sale_price_new,json=salePriceNew,proto3" json:"sale_price_new,omitempty"`                //
	SalePriceOld     int64  `protobuf:"varint,10,opt,name=sale_price_old,json=salePriceOld,proto3" json:"sale_price_old,omitempty"`               //
	UsePointLimitNew int32  `protobuf:"varint,11,opt,name=use_point_limit_new,json=usePointLimitNew,proto3" json:"use_point_limit_new,omitempty"` //
	UsePointLimitOld int32  `protobuf:"varint,12,opt,name=use_point_limit_old,json=usePointLimitOld,proto3" json:"use_point_limit_old,omitempty"` //
}

func (x *QueryProductOperateLogDetailResp) Reset() {
	*x = QueryProductOperateLogDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductOperateLogDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogDetailResp) ProtoMessage() {}

func (x *QueryProductOperateLogDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{157}
}

func (x *QueryProductOperateLogDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductOperateLogDetailResp) GetGiftPointNew() int32 {
	if x != nil {
		return x.GiftPointNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetGiftPointOld() int32 {
	if x != nil {
		return x.GiftPointOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetOperateMan() string {
	if x != nil {
		return x.OperateMan
	}
	return ""
}

func (x *QueryProductOperateLogDetailResp) GetPriceNew() int64 {
	if x != nil {
		return x.PriceNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetPriceOld() int64 {
	if x != nil {
		return x.PriceOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetSalePriceNew() int64 {
	if x != nil {
		return x.SalePriceNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetSalePriceOld() int64 {
	if x != nil {
		return x.SalePriceOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetUsePointLimitNew() int32 {
	if x != nil {
		return x.UsePointLimitNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetUsePointLimitOld() int32 {
	if x != nil {
		return x.UsePointLimitOld
	}
	return 0
}

// 分页查询列表
type QueryProductOperateLogListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
}

func (x *QueryProductOperateLogListReq) Reset() {
	*x = QueryProductOperateLogListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductOperateLogListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogListReq) ProtoMessage() {}

func (x *QueryProductOperateLogListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogListReq.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{158}
}

func (x *QueryProductOperateLogListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductOperateLogListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductOperateLogListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime       string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                         //
	GiftPointNew     int32  `protobuf:"varint,2,opt,name=gift_point_new,json=giftPointNew,proto3" json:"gift_point_new,omitempty"`                //
	GiftPointOld     int32  `protobuf:"varint,3,opt,name=gift_point_old,json=giftPointOld,proto3" json:"gift_point_old,omitempty"`                //赠送的积分
	Id               int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                          //
	OperateMan       string `protobuf:"bytes,5,opt,name=operate_man,json=operateMan,proto3" json:"operate_man,omitempty"`                         //操作人
	PriceNew         int64  `protobuf:"varint,6,opt,name=price_new,json=priceNew,proto3" json:"price_new,omitempty"`                              //
	PriceOld         int64  `protobuf:"varint,7,opt,name=price_old,json=priceOld,proto3" json:"price_old,omitempty"`                              //
	ProductId        int64  `protobuf:"varint,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           //
	SalePriceNew     int64  `protobuf:"varint,9,opt,name=sale_price_new,json=salePriceNew,proto3" json:"sale_price_new,omitempty"`                //
	SalePriceOld     int64  `protobuf:"varint,10,opt,name=sale_price_old,json=salePriceOld,proto3" json:"sale_price_old,omitempty"`               //
	UsePointLimitNew int32  `protobuf:"varint,11,opt,name=use_point_limit_new,json=usePointLimitNew,proto3" json:"use_point_limit_new,omitempty"` //
	UsePointLimitOld int32  `protobuf:"varint,12,opt,name=use_point_limit_old,json=usePointLimitOld,proto3" json:"use_point_limit_old,omitempty"` //
}

func (x *ProductOperateLogListData) Reset() {
	*x = ProductOperateLogListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOperateLogListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOperateLogListData) ProtoMessage() {}

func (x *ProductOperateLogListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOperateLogListData.ProtoReflect.Descriptor instead.
func (*ProductOperateLogListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{159}
}

func (x *ProductOperateLogListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductOperateLogListData) GetGiftPointNew() int32 {
	if x != nil {
		return x.GiftPointNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetGiftPointOld() int32 {
	if x != nil {
		return x.GiftPointOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductOperateLogListData) GetOperateMan() string {
	if x != nil {
		return x.OperateMan
	}
	return ""
}

func (x *ProductOperateLogListData) GetPriceNew() int64 {
	if x != nil {
		return x.PriceNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetPriceOld() int64 {
	if x != nil {
		return x.PriceOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductOperateLogListData) GetSalePriceNew() int64 {
	if x != nil {
		return x.SalePriceNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetSalePriceOld() int64 {
	if x != nil {
		return x.SalePriceOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetUsePointLimitNew() int32 {
	if x != nil {
		return x.UsePointLimitNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetUsePointLimitOld() int32 {
	if x != nil {
		return x.UsePointLimitOld
	}
	return 0
}

type QueryProductOperateLogListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductOperateLogListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductOperateLogListResp) Reset() {
	*x = QueryProductOperateLogListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductOperateLogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogListResp) ProtoMessage() {}

func (x *QueryProductOperateLogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogListResp.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{160}
}

func (x *QueryProductOperateLogListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductOperateLogListResp) GetList() []*ProductOperateLogListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品审核记录
type AddProductVertifyRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //
	Detail     string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	VertifyMan string `protobuf:"bytes,3,opt,name=vertify_man,json=vertifyMan,proto3" json:"vertify_man,omitempty"` //审核人
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //
}

func (x *AddProductVertifyRecordReq) Reset() {
	*x = AddProductVertifyRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductVertifyRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductVertifyRecordReq) ProtoMessage() {}

func (x *AddProductVertifyRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductVertifyRecordReq.ProtoReflect.Descriptor instead.
func (*AddProductVertifyRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{161}
}

func (x *AddProductVertifyRecordReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AddProductVertifyRecordReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *AddProductVertifyRecordReq) GetVertifyMan() string {
	if x != nil {
		return x.VertifyMan
	}
	return ""
}

func (x *AddProductVertifyRecordReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductVertifyRecordReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AddProductVertifyRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddProductVertifyRecordResp) Reset() {
	*x = AddProductVertifyRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductVertifyRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductVertifyRecordResp) ProtoMessage() {}

func (x *AddProductVertifyRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductVertifyRecordResp.ProtoReflect.Descriptor instead.
func (*AddProductVertifyRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{162}
}

func (x *AddProductVertifyRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品审核记录
type DeleteProductVertifyRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteProductVertifyRecordReq) Reset() {
	*x = DeleteProductVertifyRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductVertifyRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductVertifyRecordReq) ProtoMessage() {}

func (x *DeleteProductVertifyRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductVertifyRecordReq.ProtoReflect.Descriptor instead.
func (*DeleteProductVertifyRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{163}
}

func (x *DeleteProductVertifyRecordReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductVertifyRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteProductVertifyRecordResp) Reset() {
	*x = DeleteProductVertifyRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductVertifyRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductVertifyRecordResp) ProtoMessage() {}

func (x *DeleteProductVertifyRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductVertifyRecordResp.ProtoReflect.Descriptor instead.
func (*DeleteProductVertifyRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{164}
}

func (x *DeleteProductVertifyRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品审核记录
type UpdateProductVertifyRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //
	Detail     string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	Id         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                  //
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //
	VertifyMan string `protobuf:"bytes,6,opt,name=vertify_man,json=vertifyMan,proto3" json:"vertify_man,omitempty"` //审核人
}

func (x *UpdateProductVertifyRecordReq) Reset() {
	*x = UpdateProductVertifyRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductVertifyRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductVertifyRecordReq) ProtoMessage() {}

func (x *UpdateProductVertifyRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductVertifyRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateProductVertifyRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{165}
}

func (x *UpdateProductVertifyRecordReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UpdateProductVertifyRecordReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateProductVertifyRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductVertifyRecordReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateProductVertifyRecordReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductVertifyRecordReq) GetVertifyMan() string {
	if x != nil {
		return x.VertifyMan
	}
	return ""
}

type UpdateProductVertifyRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductVertifyRecordResp) Reset() {
	*x = UpdateProductVertifyRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductVertifyRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductVertifyRecordResp) ProtoMessage() {}

func (x *UpdateProductVertifyRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductVertifyRecordResp.ProtoReflect.Descriptor instead.
func (*UpdateProductVertifyRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{166}
}

func (x *UpdateProductVertifyRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品审核记录状态
type UpdateProductVertifyRecordStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //
	Detail     string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	Id         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                  //
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //
	VertifyMan string `protobuf:"bytes,6,opt,name=vertify_man,json=vertifyMan,proto3" json:"vertify_man,omitempty"` //审核人
}

func (x *UpdateProductVertifyRecordStatusReq) Reset() {
	*x = UpdateProductVertifyRecordStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductVertifyRecordStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductVertifyRecordStatusReq) ProtoMessage() {}

func (x *UpdateProductVertifyRecordStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductVertifyRecordStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductVertifyRecordStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{167}
}

func (x *UpdateProductVertifyRecordStatusReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UpdateProductVertifyRecordStatusReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateProductVertifyRecordStatusReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductVertifyRecordStatusReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateProductVertifyRecordStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductVertifyRecordStatusReq) GetVertifyMan() string {
	if x != nil {
		return x.VertifyMan
	}
	return ""
}

type UpdateProductVertifyRecordStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateProductVertifyRecordStatusResp) Reset() {
	*x = UpdateProductVertifyRecordStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductVertifyRecordStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductVertifyRecordStatusResp) ProtoMessage() {}

func (x *UpdateProductVertifyRecordStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductVertifyRecordStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductVertifyRecordStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{168}
}

func (x *UpdateProductVertifyRecordStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品审核记录详情
type QueryProductVertifyRecordDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductVertifyRecordDetailReq) Reset() {
	*x = QueryProductVertifyRecordDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductVertifyRecordDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordDetailReq) ProtoMessage() {}

func (x *QueryProductVertifyRecordDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{169}
}

func (x *QueryProductVertifyRecordDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductVertifyRecordDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //
	Detail     string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	Id         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                  //
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //
	VertifyMan string `protobuf:"bytes,6,opt,name=vertify_man,json=vertifyMan,proto3" json:"vertify_man,omitempty"` //审核人
}

func (x *QueryProductVertifyRecordDetailResp) Reset() {
	*x = QueryProductVertifyRecordDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductVertifyRecordDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordDetailResp) ProtoMessage() {}

func (x *QueryProductVertifyRecordDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{170}
}

func (x *QueryProductVertifyRecordDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductVertifyRecordDetailResp) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *QueryProductVertifyRecordDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductVertifyRecordDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryProductVertifyRecordDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductVertifyRecordDetailResp) GetVertifyMan() string {
	if x != nil {
		return x.VertifyMan
	}
	return ""
}

// 分页查询商品审核记录列表
type QueryProductVertifyRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
}

func (x *QueryProductVertifyRecordListReq) Reset() {
	*x = QueryProductVertifyRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductVertifyRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordListReq) ProtoMessage() {}

func (x *QueryProductVertifyRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordListReq.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{171}
}

func (x *QueryProductVertifyRecordListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductVertifyRecordListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductVertifyRecordListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //
	Detail     string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	Id         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                  //
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //
	VertifyMan string `protobuf:"bytes,6,opt,name=vertify_man,json=vertifyMan,proto3" json:"vertify_man,omitempty"` //审核人
}

func (x *ProductVertifyRecordListData) Reset() {
	*x = ProductVertifyRecordListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductVertifyRecordListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductVertifyRecordListData) ProtoMessage() {}

func (x *ProductVertifyRecordListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductVertifyRecordListData.ProtoReflect.Descriptor instead.
func (*ProductVertifyRecordListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{172}
}

func (x *ProductVertifyRecordListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductVertifyRecordListData) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ProductVertifyRecordListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductVertifyRecordListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductVertifyRecordListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductVertifyRecordListData) GetVertifyMan() string {
	if x != nil {
		return x.VertifyMan
	}
	return ""
}

type QueryProductVertifyRecordListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ProductVertifyRecordListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryProductVertifyRecordListResp) Reset() {
	*x = QueryProductVertifyRecordListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductVertifyRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordListResp) ProtoMessage() {}

func (x *QueryProductVertifyRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordListResp.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{173}
}

func (x *QueryProductVertifyRecordListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductVertifyRecordListResp) GetList() []*ProductVertifyRecordListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加sku的库存
type AddSkuStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock          int32  `protobuf:"varint,1,opt,name=stock,proto3" json:"stock,omitempty"`                                         //库存
	LockStock      int32  `protobuf:"varint,2,opt,name=lock_stock,json=lockStock,proto3" json:"lock_stock,omitempty"`                //锁定库存
	LowStock       int32  `protobuf:"varint,3,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                   //预警库存
	Pic            string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                              //展示图片
	Price          int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         //
	ProductId      int64  `protobuf:"varint,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                //
	PromotionPrice int64  `protobuf:"varint,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` //单品促销价格
	Sale           int32  `protobuf:"varint,8,opt,name=sale,proto3" json:"sale,omitempty"`                                           //销量
	SkuCode        string `protobuf:"bytes,9,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                       //sku编码
	SpData         string `protobuf:"bytes,10,opt,name=sp_data,json=spData,proto3" json:"sp_data,omitempty"`                         //商品销售属性，json格式
}

func (x *AddSkuStockReq) Reset() {
	*x = AddSkuStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSkuStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSkuStockReq) ProtoMessage() {}

func (x *AddSkuStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSkuStockReq.ProtoReflect.Descriptor instead.
func (*AddSkuStockReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{174}
}

func (x *AddSkuStockReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *AddSkuStockReq) GetLockStock() int32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

func (x *AddSkuStockReq) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *AddSkuStockReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *AddSkuStockReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddSkuStockReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddSkuStockReq) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *AddSkuStockReq) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *AddSkuStockReq) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *AddSkuStockReq) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

type AddSkuStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSkuStockResp) Reset() {
	*x = AddSkuStockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSkuStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSkuStockResp) ProtoMessage() {}

func (x *AddSkuStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSkuStockResp.ProtoReflect.Descriptor instead.
func (*AddSkuStockResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{175}
}

func (x *AddSkuStockResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除sku的库存
type DeleteSkuStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSkuStockReq) Reset() {
	*x = DeleteSkuStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSkuStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSkuStockReq) ProtoMessage() {}

func (x *DeleteSkuStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSkuStockReq.ProtoReflect.Descriptor instead.
func (*DeleteSkuStockReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{176}
}

func (x *DeleteSkuStockReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSkuStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSkuStockResp) Reset() {
	*x = DeleteSkuStockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSkuStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSkuStockResp) ProtoMessage() {}

func (x *DeleteSkuStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSkuStockResp.ProtoReflect.Descriptor instead.
func (*DeleteSkuStockResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{177}
}

func (x *DeleteSkuStockResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新sku的库存
type UpdateSkuStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuStockList []*UpdateSkuStockData `protobuf:"bytes,1,rep,name=SkuStockList,proto3" json:"SkuStockList,omitempty"`
}

func (x *UpdateSkuStockReq) Reset() {
	*x = UpdateSkuStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkuStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkuStockReq) ProtoMessage() {}

func (x *UpdateSkuStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkuStockReq.ProtoReflect.Descriptor instead.
func (*UpdateSkuStockReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{178}
}

func (x *UpdateSkuStockReq) GetSkuStockList() []*UpdateSkuStockData {
	if x != nil {
		return x.SkuStockList
	}
	return nil
}

type UpdateSkuStockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	LockStock      int32  `protobuf:"varint,2,opt,name=lock_stock,json=lockStock,proto3" json:"lock_stock,omitempty"`                //锁定库存
	LowStock       int32  `protobuf:"varint,3,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                   //预警库存
	Pic            string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                              //展示图片
	Price          int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         //
	ProductId      int64  `protobuf:"varint,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                //
	PromotionPrice int64  `protobuf:"varint,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` //单品促销价格
	Sale           int32  `protobuf:"varint,8,opt,name=sale,proto3" json:"sale,omitempty"`                                           //销量
	SkuCode        string `protobuf:"bytes,9,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                       //sku编码
	SpData         string `protobuf:"bytes,10,opt,name=sp_data,json=spData,proto3" json:"sp_data,omitempty"`                         //商品销售属性，json格式
	Stock          int32  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                        //库存
}

func (x *UpdateSkuStockData) Reset() {
	*x = UpdateSkuStockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkuStockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkuStockData) ProtoMessage() {}

func (x *UpdateSkuStockData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkuStockData.ProtoReflect.Descriptor instead.
func (*UpdateSkuStockData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{179}
}

func (x *UpdateSkuStockData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSkuStockData) GetLockStock() int32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

func (x *UpdateSkuStockData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *UpdateSkuStockData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UpdateSkuStockData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateSkuStockData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateSkuStockData) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *UpdateSkuStockData) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *UpdateSkuStockData) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *UpdateSkuStockData) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

func (x *UpdateSkuStockData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

type UpdateSkuStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSkuStockResp) Reset() {
	*x = UpdateSkuStockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkuStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkuStockResp) ProtoMessage() {}

func (x *UpdateSkuStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkuStockResp.ProtoReflect.Descriptor instead.
func (*UpdateSkuStockResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{180}
}

func (x *UpdateSkuStockResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询sku的库存详情
type QuerySkuStockDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySkuStockDetailReq) Reset() {
	*x = QuerySkuStockDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySkuStockDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySkuStockDetailReq) ProtoMessage() {}

func (x *QuerySkuStockDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySkuStockDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySkuStockDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{181}
}

func (x *QuerySkuStockDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySkuStockDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	LockStock      int32  `protobuf:"varint,2,opt,name=lock_stock,json=lockStock,proto3" json:"lock_stock,omitempty"`                //锁定库存
	LowStock       int32  `protobuf:"varint,3,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                   //预警库存
	Pic            string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                              //展示图片
	Price          int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         //
	ProductId      int64  `protobuf:"varint,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                //
	PromotionPrice int64  `protobuf:"varint,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` //单品促销价格
	Sale           int32  `protobuf:"varint,8,opt,name=sale,proto3" json:"sale,omitempty"`                                           //销量
	SkuCode        string `protobuf:"bytes,9,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                       //sku编码
	SpData         string `protobuf:"bytes,10,opt,name=sp_data,json=spData,proto3" json:"sp_data,omitempty"`                         //商品销售属性，json格式
	Stock          int32  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                        //库存
}

func (x *QuerySkuStockDetailResp) Reset() {
	*x = QuerySkuStockDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySkuStockDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySkuStockDetailResp) ProtoMessage() {}

func (x *QuerySkuStockDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySkuStockDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySkuStockDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{182}
}

func (x *QuerySkuStockDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetLockStock() int32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *QuerySkuStockDetailResp) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *QuerySkuStockDetailResp) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *QuerySkuStockDetailResp) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

func (x *QuerySkuStockDetailResp) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

// 分页查询sku的库存列表
type QuerySkuStockListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
	SkuCode   string `protobuf:"bytes,2,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`        //sku编码
}

func (x *QuerySkuStockListReq) Reset() {
	*x = QuerySkuStockListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySkuStockListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySkuStockListReq) ProtoMessage() {}

func (x *QuerySkuStockListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySkuStockListReq.ProtoReflect.Descriptor instead.
func (*QuerySkuStockListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{183}
}

func (x *QuerySkuStockListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QuerySkuStockListReq) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

type SkuStockListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	LockStock      int32  `protobuf:"varint,2,opt,name=lock_stock,json=lockStock,proto3" json:"lock_stock,omitempty"`                //锁定库存
	LowStock       int32  `protobuf:"varint,3,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                   //预警库存
	Pic            string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                              //展示图片
	Price          int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         //
	ProductId      int64  `protobuf:"varint,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                //
	PromotionPrice int64  `protobuf:"varint,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` //单品促销价格
	Sale           int32  `protobuf:"varint,8,opt,name=sale,proto3" json:"sale,omitempty"`                                           //销量
	SkuCode        string `protobuf:"bytes,9,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                       //sku编码
	SpData         string `protobuf:"bytes,10,opt,name=sp_data,json=spData,proto3" json:"sp_data,omitempty"`                         //商品销售属性，json格式
	Stock          int32  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                        //库存
}

func (x *SkuStockListData) Reset() {
	*x = SkuStockListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuStockListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuStockListData) ProtoMessage() {}

func (x *SkuStockListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuStockListData.ProtoReflect.Descriptor instead.
func (*SkuStockListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{184}
}

func (x *SkuStockListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkuStockListData) GetLockStock() int32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

func (x *SkuStockListData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *SkuStockListData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *SkuStockListData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuStockListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SkuStockListData) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *SkuStockListData) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *SkuStockListData) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *SkuStockListData) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

func (x *SkuStockListData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

type QuerySkuStockListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SkuStockListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySkuStockListResp) Reset() {
	*x = QuerySkuStockListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySkuStockListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySkuStockListResp) ProtoMessage() {}

func (x *QuerySkuStockListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySkuStockListResp.ProtoReflect.Descriptor instead.
func (*QuerySkuStockListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{185}
}

func (x *QuerySkuStockListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySkuStockListResp) GetList() []*SkuStockListData {
	if x != nil {
		return x.List
	}
	return nil
}

type ReleaseSkuStockLockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ReleaseSkuStockLockData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseSkuStockLockReq) Reset() {
	*x = ReleaseSkuStockLockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSkuStockLockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSkuStockLockReq) ProtoMessage() {}

func (x *ReleaseSkuStockLockReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSkuStockLockReq.ProtoReflect.Descriptor instead.
func (*ReleaseSkuStockLockReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{186}
}

func (x *ReleaseSkuStockLockReq) GetData() []*ReleaseSkuStockLockData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReleaseSkuStockLockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductSkuId    int64 `protobuf:"varint,1,opt,name=ProductSkuId,proto3" json:"ProductSkuId,omitempty"`
	ProductQuantity int32 `protobuf:"varint,2,opt,name=ProductQuantity,proto3" json:"ProductQuantity,omitempty"`
}

func (x *ReleaseSkuStockLockData) Reset() {
	*x = ReleaseSkuStockLockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSkuStockLockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSkuStockLockData) ProtoMessage() {}

func (x *ReleaseSkuStockLockData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSkuStockLockData.ProtoReflect.Descriptor instead.
func (*ReleaseSkuStockLockData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{187}
}

func (x *ReleaseSkuStockLockData) GetProductSkuId() int64 {
	if x != nil {
		return x.ProductSkuId
	}
	return 0
}

func (x *ReleaseSkuStockLockData) GetProductQuantity() int32 {
	if x != nil {
		return x.ProductQuantity
	}
	return 0
}

type ReleaseSkuStockLockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *ReleaseSkuStockLockResp) Reset() {
	*x = ReleaseSkuStockLockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSkuStockLockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSkuStockLockResp) ProtoMessage() {}

func (x *ReleaseSkuStockLockResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSkuStockLockResp.ProtoReflect.Descriptor instead.
func (*ReleaseSkuStockLockResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{188}
}

func (x *ReleaseSkuStockLockResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type LockSkuStockLockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LockSkuStockLockData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LockSkuStockLockReq) Reset() {
	*x = LockSkuStockLockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockSkuStockLockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockSkuStockLockReq) ProtoMessage() {}

func (x *LockSkuStockLockReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockSkuStockLockReq.ProtoReflect.Descriptor instead.
func (*LockSkuStockLockReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{189}
}

func (x *LockSkuStockLockReq) GetData() []*LockSkuStockLockData {
	if x != nil {
		return x.Data
	}
	return nil
}

type LockSkuStockLockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductSkuId    int64 `protobuf:"varint,1,opt,name=ProductSkuId,proto3" json:"ProductSkuId,omitempty"`
	ProductQuantity int32 `protobuf:"varint,2,opt,name=ProductQuantity,proto3" json:"ProductQuantity,omitempty"`
}

func (x *LockSkuStockLockData) Reset() {
	*x = LockSkuStockLockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockSkuStockLockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockSkuStockLockData) ProtoMessage() {}

func (x *LockSkuStockLockData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockSkuStockLockData.ProtoReflect.Descriptor instead.
func (*LockSkuStockLockData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{190}
}

func (x *LockSkuStockLockData) GetProductSkuId() int64 {
	if x != nil {
		return x.ProductSkuId
	}
	return 0
}

func (x *LockSkuStockLockData) GetProductQuantity() int32 {
	if x != nil {
		return x.ProductQuantity
	}
	return 0
}

type LockSkuStockLockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *LockSkuStockLockResp) Reset() {
	*x = LockSkuStockLockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockSkuStockLockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockSkuStockLockResp) ProtoMessage() {}

func (x *LockSkuStockLockResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockSkuStockLockResp.ProtoReflect.Descriptor instead.
func (*LockSkuStockLockResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{191}
}

func (x *LockSkuStockLockResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type QuerySkuStockByProductSkuIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductSkuId int64 `protobuf:"varint,1,opt,name=ProductSkuId,proto3" json:"ProductSkuId,omitempty"`
}

func (x *QuerySkuStockByProductSkuIdReq) Reset() {
	*x = QuerySkuStockByProductSkuIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pms_pms_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySkuStockByProductSkuIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySkuStockByProductSkuIdReq) ProtoMessage() {}

func (x *QuerySkuStockByProductSkuIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySkuStockByProductSkuIdReq.ProtoReflect.Descriptor instead.
func (*QuerySkuStockByProductSkuIdReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{192}
}

func (x *QuerySkuStockByProductSkuIdReq) GetProductSkuId() int64 {
	if x != nil {
		return x.ProductSkuId
	}
	return 0
}

var File_rpc_pms_pms_proto protoreflect.FileDescriptor

var file_rpc_pms_pms_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6d, 0x73, 0x2f, 0x70, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x8f,
	0x03, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0xa2, 0x03, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x25, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x87, 0x04, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x67, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x80, 0x04, 0x0a, 0x0d, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2a,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x5b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xb0, 0x03, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0xc3, 0x03, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x27, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xea, 0x03, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x6c, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x5c, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0xe1, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe0, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x01,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x83, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x18,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x75, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x0e, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a,
	0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x2e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x2e, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x22, 0xb3, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x22, 0x28, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64,
	0x73, 0x22, 0xe0, 0x0b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x50, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x66,
	0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x69, 0x66,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xf5, 0x0e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67,
	0x69, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67,
	0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x19,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5f, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x30, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xfc, 0x03, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99,
	0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa8, 0x02, 0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0xef, 0x04, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61,
	0x6e, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x97, 0x03, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x99,
	0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x1d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35,
	0x0a, 0x1f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x35, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x22,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x72, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x95, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x32, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x97,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x42, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x22,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2c, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x97, 0x03, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2f, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61,
	0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x6c, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xab, 0x01, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x47, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x63, 0x0a, 0x20, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x8a, 0x01, 0x0a, 0x26, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x27,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x2c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x2d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x31, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x41, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x76, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7c, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x19, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xaa, 0x03, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69,
	0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x22, 0x2e,
	0x0a, 0x18, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2e,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x31,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0x31, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x03, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x65, 0x77,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6e, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f,
	0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x6c, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4e, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x6c, 0x64, 0x22, 0x70, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x31, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x4d, 0x61, 0x6e, 0x22, 0x34, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x23, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x61, 0x6e, 0x22, 0x3a, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x34,
	0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x6e, 0x22, 0x5a, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x6e, 0x22, 0x76, 0x0a, 0x21, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x25, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x28,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a,
	0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xae, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x22, 0x28, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x28, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x50, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xac, 0x02,
	0x0a, 0x10, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x5e, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x16,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67,
	0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2d, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x75, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x64, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b,
	0x75, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x32, 0x8e, 0x06, 0x0a, 0x0c, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x68, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0xa5, 0x03, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x32, 0x85, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x95, 0x04, 0x0a, 0x15,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x46, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x32, 0xd4, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x65, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0xc1, 0x03, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x26, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0xa6,
	0x05, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x76, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a,
	0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x19, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xfe, 0x03, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x83, 0x07, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x71,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x73, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdd,
	0x02, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x23, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x29,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x38, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xb2,
	0x03, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x32, 0xfc, 0x02, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x32, 0x85, 0x04, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xd9, 0x03, 0x0a, 0x18, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xfe, 0x05, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xcf, 0x05, 0x0a, 0x0f, 0x53, 0x6b, 0x75, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x10, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x65, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6b, 0x75, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49,
	0x64, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_pms_pms_proto_rawDescOnce sync.Once
	file_rpc_pms_pms_proto_rawDescData = file_rpc_pms_pms_proto_rawDesc
)

func file_rpc_pms_pms_proto_rawDescGZIP() []byte {
	file_rpc_pms_pms_proto_rawDescOnce.Do(func() {
		file_rpc_pms_pms_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_pms_pms_proto_rawDescData)
	})
	return file_rpc_pms_pms_proto_rawDescData
}

var file_rpc_pms_pms_proto_msgTypes = make([]protoimpl.MessageInfo, 193)
var file_rpc_pms_pms_proto_goTypes = []interface{}{
	(*AddBrandReq)(nil),                                   // 0: pmsclient.AddBrandReq
	(*AddBrandResp)(nil),                                  // 1: pmsclient.AddBrandResp
	(*DeleteBrandReq)(nil),                                // 2: pmsclient.DeleteBrandReq
	(*DeleteBrandResp)(nil),                               // 3: pmsclient.DeleteBrandResp
	(*UpdateBrandReq)(nil),                                // 4: pmsclient.UpdateBrandReq
	(*UpdateBrandResp)(nil),                               // 5: pmsclient.UpdateBrandResp
	(*QueryBrandDetailReq)(nil),                           // 6: pmsclient.QueryBrandDetailReq
	(*QueryBrandDetailResp)(nil),                          // 7: pmsclient.QueryBrandDetailResp
	(*QueryBrandListReq)(nil),                             // 8: pmsclient.QueryBrandListReq
	(*BrandListData)(nil),                                 // 9: pmsclient.BrandListData
	(*QueryBrandListResp)(nil),                            // 10: pmsclient.QueryBrandListResp
	(*QueryBrandListByIdsReq)(nil),                        // 11: pmsclient.QueryBrandListByIdsReq
	(*UpdateBrandShowStatusReq)(nil),                      // 12: pmsclient.UpdateBrandShowStatusReq
	(*UpdateBrandFactoryStatusReq)(nil),                   // 13: pmsclient.UpdateBrandFactoryStatusReq
	(*UpdateBrandRecommendStatusReq)(nil),                 // 14: pmsclient.UpdateBrandRecommendStatusReq
	(*UpdateBrandStatusResp)(nil),                         // 15: pmsclient.UpdateBrandStatusResp
	(*AddCommentReq)(nil),                                 // 16: pmsclient.AddCommentReq
	(*AddCommentResp)(nil),                                // 17: pmsclient.AddCommentResp
	(*DeleteCommentReq)(nil),                              // 18: pmsclient.DeleteCommentReq
	(*DeleteCommentResp)(nil),                             // 19: pmsclient.DeleteCommentResp
	(*UpdateCommentReq)(nil),                              // 20: pmsclient.UpdateCommentReq
	(*UpdateCommentResp)(nil),                             // 21: pmsclient.UpdateCommentResp
	(*QueryCommentDetailReq)(nil),                         // 22: pmsclient.QueryCommentDetailReq
	(*QueryCommentDetailResp)(nil),                        // 23: pmsclient.QueryCommentDetailResp
	(*QueryCommentListReq)(nil),                           // 24: pmsclient.QueryCommentListReq
	(*CommentListData)(nil),                               // 25: pmsclient.CommentListData
	(*QueryCommentListResp)(nil),                          // 26: pmsclient.QueryCommentListResp
	(*AddCommentReplayReq)(nil),                           // 27: pmsclient.AddCommentReplayReq
	(*AddCommentReplayResp)(nil),                          // 28: pmsclient.AddCommentReplayResp
	(*DeleteCommentReplayReq)(nil),                        // 29: pmsclient.DeleteCommentReplayReq
	(*DeleteCommentReplayResp)(nil),                       // 30: pmsclient.DeleteCommentReplayResp
	(*UpdateCommentReplayReq)(nil),                        // 31: pmsclient.UpdateCommentReplayReq
	(*UpdateCommentReplayResp)(nil),                       // 32: pmsclient.UpdateCommentReplayResp
	(*QueryCommentReplayDetailReq)(nil),                   // 33: pmsclient.QueryCommentReplayDetailReq
	(*QueryCommentReplayDetailResp)(nil),                  // 34: pmsclient.QueryCommentReplayDetailResp
	(*QueryCommentReplayListReq)(nil),                     // 35: pmsclient.QueryCommentReplayListReq
	(*CommentReplayListData)(nil),                         // 36: pmsclient.CommentReplayListData
	(*QueryCommentReplayListResp)(nil),                    // 37: pmsclient.QueryCommentReplayListResp
	(*AddFeightTemplateReq)(nil),                          // 38: pmsclient.AddFeightTemplateReq
	(*AddFeightTemplateResp)(nil),                         // 39: pmsclient.AddFeightTemplateResp
	(*DeleteFeightTemplateReq)(nil),                       // 40: pmsclient.DeleteFeightTemplateReq
	(*DeleteFeightTemplateResp)(nil),                      // 41: pmsclient.DeleteFeightTemplateResp
	(*UpdateFeightTemplateReq)(nil),                       // 42: pmsclient.UpdateFeightTemplateReq
	(*UpdateFeightTemplateResp)(nil),                      // 43: pmsclient.UpdateFeightTemplateResp
	(*QueryFeightTemplateDetailReq)(nil),                  // 44: pmsclient.QueryFeightTemplateDetailReq
	(*QueryFeightTemplateDetailResp)(nil),                 // 45: pmsclient.QueryFeightTemplateDetailResp
	(*QueryFeightTemplateListReq)(nil),                    // 46: pmsclient.QueryFeightTemplateListReq
	(*FeightTemplateListData)(nil),                        // 47: pmsclient.FeightTemplateListData
	(*QueryFeightTemplateListResp)(nil),                   // 48: pmsclient.QueryFeightTemplateListResp
	(*MemberPriceList)(nil),                               // 49: pmsclient.MemberPriceList
	(*ProductAttributeValueList)(nil),                     // 50: pmsclient.ProductAttributeValueList
	(*ProductFullReductionList)(nil),                      // 51: pmsclient.ProductFullReductionList
	(*ProductLadderList)(nil),                             // 52: pmsclient.ProductLadderList
	(*SkuStockList)(nil),                                  // 53: pmsclient.SkuStockList
	(*AddProductReq)(nil),                                 // 54: pmsclient.AddProductReq
	(*AddProductResp)(nil),                                // 55: pmsclient.AddProductResp
	(*QueryProductListReq)(nil),                           // 56: pmsclient.QueryProductListReq
	(*QueryProductByIdsReq)(nil),                          // 57: pmsclient.QueryProductByIdsReq
	(*ProductListData)(nil),                               // 58: pmsclient.ProductListData
	(*QueryProductListResp)(nil),                          // 59: pmsclient.QueryProductListResp
	(*UpdateProductReq)(nil),                              // 60: pmsclient.UpdateProductReq
	(*UpdateProductResp)(nil),                             // 61: pmsclient.UpdateProductResp
	(*DeleteProductReq)(nil),                              // 62: pmsclient.DeleteProductReq
	(*DeleteProductResp)(nil),                             // 63: pmsclient.DeleteProductResp
	(*QueryProductDetailByIdReq)(nil),                     // 64: pmsclient.QueryProductDetailByIdReq
	(*BrandData)(nil),                                     // 65: pmsclient.BrandData
	(*ProductAttributeDataList)(nil),                      // 66: pmsclient.ProductAttributeDataList
	(*ProductAttributeValueData)(nil),                     // 67: pmsclient.ProductAttributeValueData
	(*SkuStockData)(nil),                                  // 68: pmsclient.SkuStockData
	(*ProductLadderData)(nil),                             // 69: pmsclient.ProductLadderData
	(*ProductFullReductionData)(nil),                      // 70: pmsclient.ProductFullReductionData
	(*MemberPriceListData)(nil),                           // 71: pmsclient.MemberPriceListData
	(*QueryProductDetailByIdResp)(nil),                    // 72: pmsclient.QueryProductDetailByIdResp
	(*UpdateProductStatusReq)(nil),                        // 73: pmsclient.UpdateProductStatusReq
	(*UpdateProductStatusResp)(nil),                       // 74: pmsclient.UpdateProductStatusResp
	(*AddProductAttributeReq)(nil),                        // 75: pmsclient.AddProductAttributeReq
	(*AddProductAttributeResp)(nil),                       // 76: pmsclient.AddProductAttributeResp
	(*DeleteProductAttributeReq)(nil),                     // 77: pmsclient.DeleteProductAttributeReq
	(*DeleteProductAttributeResp)(nil),                    // 78: pmsclient.DeleteProductAttributeResp
	(*QueryProductAttributeListReq)(nil),                  // 79: pmsclient.QueryProductAttributeListReq
	(*ProductAttributeListData)(nil),                      // 80: pmsclient.ProductAttributeListData
	(*QueryProductAttributeListResp)(nil),                 // 81: pmsclient.QueryProductAttributeListResp
	(*QueryByproductCategoryIdReq)(nil),                   // 82: pmsclient.QueryByproductCategoryIdReq
	(*QueryByproductCategoryIdData)(nil),                  // 83: pmsclient.QueryByproductCategoryIdData
	(*QueryByproductCategoryIdResp)(nil),                  // 84: pmsclient.QueryByproductCategoryIdResp
	(*AddProductAttributeCategoryReq)(nil),                // 85: pmsclient.AddProductAttributeCategoryReq
	(*AddProductAttributeCategoryResp)(nil),               // 86: pmsclient.AddProductAttributeCategoryResp
	(*DeleteProductAttributeCategoryReq)(nil),             // 87: pmsclient.DeleteProductAttributeCategoryReq
	(*DeleteProductAttributeCategoryResp)(nil),            // 88: pmsclient.DeleteProductAttributeCategoryResp
	(*UpdateProductAttributeCategoryReq)(nil),             // 89: pmsclient.UpdateProductAttributeCategoryReq
	(*UpdateProductAttributeCategoryResp)(nil),            // 90: pmsclient.UpdateProductAttributeCategoryResp
	(*QueryProductAttributeCategoryListReq)(nil),          // 91: pmsclient.QueryProductAttributeCategoryListReq
	(*ProductAttributeCategoryListData)(nil),              // 92: pmsclient.ProductAttributeCategoryListData
	(*ProductAttributeData)(nil),                          // 93: pmsclient.ProductAttributeData
	(*QueryProductAttributeCategoryListResp)(nil),         // 94: pmsclient.QueryProductAttributeCategoryListResp
	(*AddProductAttributeValueReq)(nil),                   // 95: pmsclient.AddProductAttributeValueReq
	(*AddProductAttributeValueResp)(nil),                  // 96: pmsclient.AddProductAttributeValueResp
	(*DeleteProductAttributeValueReq)(nil),                // 97: pmsclient.DeleteProductAttributeValueReq
	(*DeleteProductAttributeValueResp)(nil),               // 98: pmsclient.DeleteProductAttributeValueResp
	(*UpdateProductAttributeValueReq)(nil),                // 99: pmsclient.UpdateProductAttributeValueReq
	(*UpdateProductAttributeValueResp)(nil),               // 100: pmsclient.UpdateProductAttributeValueResp
	(*QueryProductAttributeValueListReq)(nil),             // 101: pmsclient.QueryProductAttributeValueListReq
	(*ProductAttributeValueListData)(nil),                 // 102: pmsclient.ProductAttributeValueListData
	(*QueryProductAttributeValueListResp)(nil),            // 103: pmsclient.QueryProductAttributeValueListResp
	(*AddProductCategoryReq)(nil),                         // 104: pmsclient.AddProductCategoryReq
	(*AddProductCategoryResp)(nil),                        // 105: pmsclient.AddProductCategoryResp
	(*DeleteProductCategoryReq)(nil),                      // 106: pmsclient.DeleteProductCategoryReq
	(*DeleteProductCategoryResp)(nil),                     // 107: pmsclient.DeleteProductCategoryResp
	(*UpdateProductCategoryReq)(nil),                      // 108: pmsclient.UpdateProductCategoryReq
	(*UpdateProductCategoryResp)(nil),                     // 109: pmsclient.UpdateProductCategoryResp
	(*UpdateProductCategoryStatusReq)(nil),                // 110: pmsclient.UpdateProductCategoryStatusReq
	(*UpdateProductCategoryStatusResp)(nil),               // 111: pmsclient.UpdateProductCategoryStatusResp
	(*QueryProductCategoryDetailReq)(nil),                 // 112: pmsclient.QueryProductCategoryDetailReq
	(*QueryProductCategoryDetailResp)(nil),                // 113: pmsclient.QueryProductCategoryDetailResp
	(*QueryProductCategoryListReq)(nil),                   // 114: pmsclient.QueryProductCategoryListReq
	(*ProductCategoryListData)(nil),                       // 115: pmsclient.ProductCategoryListData
	(*QueryProductCategoryListResp)(nil),                  // 116: pmsclient.QueryProductCategoryListResp
	(*QueryProductCategoryTreeListReq)(nil),               // 117: pmsclient.QueryProductCategoryTreeListReq
	(*QueryProductCategoryListTreeData)(nil),              // 118: pmsclient.QueryProductCategoryListTreeData
	(*QueryProductCategoryListTreeResp)(nil),              // 119: pmsclient.QueryProductCategoryListTreeResp
	(*AddProductCategoryAttributeRelationReq)(nil),        // 120: pmsclient.AddProductCategoryAttributeRelationReq
	(*AddProductCategoryAttributeRelationResp)(nil),       // 121: pmsclient.AddProductCategoryAttributeRelationResp
	(*QueryProductCategoryAttributeRelationListReq)(nil),  // 122: pmsclient.QueryProductCategoryAttributeRelationListReq
	(*ProductCategoryAttributeRelationListData)(nil),      // 123: pmsclient.ProductCategoryAttributeRelationListData
	(*QueryProductCategoryAttributeRelationListResp)(nil), // 124: pmsclient.QueryProductCategoryAttributeRelationListResp
	(*AddProductCollectReq)(nil),                          // 125: pmsclient.AddProductCollectReq
	(*AddProductCollectResp)(nil),                         // 126: pmsclient.AddProductCollectResp
	(*DeleteProductCollectReq)(nil),                       // 127: pmsclient.DeleteProductCollectReq
	(*DeleteProductCollectResp)(nil),                      // 128: pmsclient.DeleteProductCollectResp
	(*QueryProductCollectDetailReq)(nil),                  // 129: pmsclient.QueryProductCollectDetailReq
	(*QueryProductCollectDetailResp)(nil),                 // 130: pmsclient.QueryProductCollectDetailResp
	(*QueryProductCollectListReq)(nil),                    // 131: pmsclient.QueryProductCollectListReq
	(*ProductCollectListData)(nil),                        // 132: pmsclient.ProductCollectListData
	(*QueryProductCollectListResp)(nil),                   // 133: pmsclient.QueryProductCollectListResp
	(*AddProductFullReductionReq)(nil),                    // 134: pmsclient.AddProductFullReductionReq
	(*AddProductFullReductionResp)(nil),                   // 135: pmsclient.AddProductFullReductionResp
	(*DeleteProductFullReductionReq)(nil),                 // 136: pmsclient.DeleteProductFullReductionReq
	(*DeleteProductFullReductionResp)(nil),                // 137: pmsclient.DeleteProductFullReductionResp
	(*QueryProductFullReductionListReq)(nil),              // 138: pmsclient.QueryProductFullReductionListReq
	(*ProductFullReductionListData)(nil),                  // 139: pmsclient.ProductFullReductionListData
	(*QueryProductFullReductionListResp)(nil),             // 140: pmsclient.QueryProductFullReductionListResp
	(*AddProductLadderReq)(nil),                           // 141: pmsclient.AddProductLadderReq
	(*AddProductLadderResp)(nil),                          // 142: pmsclient.AddProductLadderResp
	(*DeleteProductLadderReq)(nil),                        // 143: pmsclient.DeleteProductLadderReq
	(*DeleteProductLadderResp)(nil),                       // 144: pmsclient.DeleteProductLadderResp
	(*UpdateProductLadderReq)(nil),                        // 145: pmsclient.UpdateProductLadderReq
	(*UpdateProductLadderResp)(nil),                       // 146: pmsclient.UpdateProductLadderResp
	(*QueryProductLadderDetailReq)(nil),                   // 147: pmsclient.QueryProductLadderDetailReq
	(*QueryProductLadderDetailResp)(nil),                  // 148: pmsclient.QueryProductLadderDetailResp
	(*QueryProductLadderListReq)(nil),                     // 149: pmsclient.QueryProductLadderListReq
	(*ProductLadderListData)(nil),                         // 150: pmsclient.ProductLadderListData
	(*QueryProductLadderListResp)(nil),                    // 151: pmsclient.QueryProductLadderListResp
	(*AddProductOperateLogReq)(nil),                       // 152: pmsclient.AddProductOperateLogReq
	(*AddProductOperateLogResp)(nil),                      // 153: pmsclient.AddProductOperateLogResp
	(*DeleteProductOperateLogReq)(nil),                    // 154: pmsclient.DeleteProductOperateLogReq
	(*DeleteProductOperateLogResp)(nil),                   // 155: pmsclient.DeleteProductOperateLogResp
	(*QueryProductOperateLogDetailReq)(nil),               // 156: pmsclient.QueryProductOperateLogDetailReq
	(*QueryProductOperateLogDetailResp)(nil),              // 157: pmsclient.QueryProductOperateLogDetailResp
	(*QueryProductOperateLogListReq)(nil),                 // 158: pmsclient.QueryProductOperateLogListReq
	(*ProductOperateLogListData)(nil),                     // 159: pmsclient.ProductOperateLogListData
	(*QueryProductOperateLogListResp)(nil),                // 160: pmsclient.QueryProductOperateLogListResp
	(*AddProductVertifyRecordReq)(nil),                    // 161: pmsclient.AddProductVertifyRecordReq
	(*AddProductVertifyRecordResp)(nil),                   // 162: pmsclient.AddProductVertifyRecordResp
	(*DeleteProductVertifyRecordReq)(nil),                 // 163: pmsclient.DeleteProductVertifyRecordReq
	(*DeleteProductVertifyRecordResp)(nil),                // 164: pmsclient.DeleteProductVertifyRecordResp
	(*UpdateProductVertifyRecordReq)(nil),                 // 165: pmsclient.UpdateProductVertifyRecordReq
	(*UpdateProductVertifyRecordResp)(nil),                // 166: pmsclient.UpdateProductVertifyRecordResp
	(*UpdateProductVertifyRecordStatusReq)(nil),           // 167: pmsclient.UpdateProductVertifyRecordStatusReq
	(*UpdateProductVertifyRecordStatusResp)(nil),          // 168: pmsclient.UpdateProductVertifyRecordStatusResp
	(*QueryProductVertifyRecordDetailReq)(nil),            // 169: pmsclient.QueryProductVertifyRecordDetailReq
	(*QueryProductVertifyRecordDetailResp)(nil),           // 170: pmsclient.QueryProductVertifyRecordDetailResp
	(*QueryProductVertifyRecordListReq)(nil),              // 171: pmsclient.QueryProductVertifyRecordListReq
	(*ProductVertifyRecordListData)(nil),                  // 172: pmsclient.ProductVertifyRecordListData
	(*QueryProductVertifyRecordListResp)(nil),             // 173: pmsclient.QueryProductVertifyRecordListResp
	(*AddSkuStockReq)(nil),                                // 174: pmsclient.AddSkuStockReq
	(*AddSkuStockResp)(nil),                               // 175: pmsclient.AddSkuStockResp
	(*DeleteSkuStockReq)(nil),                             // 176: pmsclient.DeleteSkuStockReq
	(*DeleteSkuStockResp)(nil),                            // 177: pmsclient.DeleteSkuStockResp
	(*UpdateSkuStockReq)(nil),                             // 178: pmsclient.UpdateSkuStockReq
	(*UpdateSkuStockData)(nil),                            // 179: pmsclient.UpdateSkuStockData
	(*UpdateSkuStockResp)(nil),                            // 180: pmsclient.UpdateSkuStockResp
	(*QuerySkuStockDetailReq)(nil),                        // 181: pmsclient.QuerySkuStockDetailReq
	(*QuerySkuStockDetailResp)(nil),                       // 182: pmsclient.QuerySkuStockDetailResp
	(*QuerySkuStockListReq)(nil),                          // 183: pmsclient.QuerySkuStockListReq
	(*SkuStockListData)(nil),                              // 184: pmsclient.SkuStockListData
	(*QuerySkuStockListResp)(nil),                         // 185: pmsclient.QuerySkuStockListResp
	(*ReleaseSkuStockLockReq)(nil),                        // 186: pmsclient.ReleaseSkuStockLockReq
	(*ReleaseSkuStockLockData)(nil),                       // 187: pmsclient.ReleaseSkuStockLockData
	(*ReleaseSkuStockLockResp)(nil),                       // 188: pmsclient.ReleaseSkuStockLockResp
	(*LockSkuStockLockReq)(nil),                           // 189: pmsclient.LockSkuStockLockReq
	(*LockSkuStockLockData)(nil),                          // 190: pmsclient.LockSkuStockLockData
	(*LockSkuStockLockResp)(nil),                          // 191: pmsclient.LockSkuStockLockResp
	(*QuerySkuStockByProductSkuIdReq)(nil),                // 192: pmsclient.QuerySkuStockByProductSkuIdReq
}
var file_rpc_pms_pms_proto_depIdxs = []int32{
	9,   // 0: pmsclient.QueryBrandListResp.list:type_name -> pmsclient.BrandListData
	25,  // 1: pmsclient.QueryCommentListResp.list:type_name -> pmsclient.CommentListData
	36,  // 2: pmsclient.QueryCommentReplayListResp.list:type_name -> pmsclient.CommentReplayListData
	47,  // 3: pmsclient.QueryFeightTemplateListResp.list:type_name -> pmsclient.FeightTemplateListData
	49,  // 4: pmsclient.AddProductReq.MemberPriceList:type_name -> pmsclient.MemberPriceList
	50,  // 5: pmsclient.AddProductReq.ProductAttributeValueList:type_name -> pmsclient.ProductAttributeValueList
	51,  // 6: pmsclient.AddProductReq.ProductFullReductionList:type_name -> pmsclient.ProductFullReductionList
	52,  // 7: pmsclient.AddProductReq.ProductLadderList:type_name -> pmsclient.ProductLadderList
	53,  // 8: pmsclient.AddProductReq.SkuStockList:type_name -> pmsclient.SkuStockList
	58,  // 9: pmsclient.QueryProductListResp.list:type_name -> pmsclient.ProductListData
	49,  // 10: pmsclient.UpdateProductReq.MemberPriceList:type_name -> pmsclient.MemberPriceList
	50,  // 11: pmsclient.UpdateProductReq.ProductAttributeValueList:type_name -> pmsclient.ProductAttributeValueList
	51,  // 12: pmsclient.UpdateProductReq.ProductFullReductionList:type_name -> pmsclient.ProductFullReductionList
	52,  // 13: pmsclient.UpdateProductReq.ProductLadderList:type_name -> pmsclient.ProductLadderList
	53,  // 14: pmsclient.UpdateProductReq.SkuStockList:type_name -> pmsclient.SkuStockList
	58,  // 15: pmsclient.QueryProductDetailByIdResp.Product:type_name -> pmsclient.ProductListData
	65,  // 16: pmsclient.QueryProductDetailByIdResp.Brand:type_name -> pmsclient.BrandData
	66,  // 17: pmsclient.QueryProductDetailByIdResp.ProductAttributeList:type_name -> pmsclient.ProductAttributeDataList
	67,  // 18: pmsclient.QueryProductDetailByIdResp.ProductAttributeValueList:type_name -> pmsclient.ProductAttributeValueData
	68,  // 19: pmsclient.QueryProductDetailByIdResp.SkuStockList:type_name -> pmsclient.SkuStockData
	69,  // 20: pmsclient.QueryProductDetailByIdResp.ProductLadderList:type_name -> pmsclient.ProductLadderData
	70,  // 21: pmsclient.QueryProductDetailByIdResp.ProductFullReductionList:type_name -> pmsclient.ProductFullReductionData
	71,  // 22: pmsclient.QueryProductDetailByIdResp.MemberPriceList:type_name -> pmsclient.MemberPriceListData
	80,  // 23: pmsclient.QueryProductAttributeListResp.list:type_name -> pmsclient.ProductAttributeListData
	83,  // 24: pmsclient.QueryByproductCategoryIdResp.list:type_name -> pmsclient.QueryByproductCategoryIdData
	93,  // 25: pmsclient.ProductAttributeCategoryListData.ProductAttributeList:type_name -> pmsclient.ProductAttributeData
	92,  // 26: pmsclient.QueryProductAttributeCategoryListResp.list:type_name -> pmsclient.ProductAttributeCategoryListData
	102, // 27: pmsclient.QueryProductAttributeValueListResp.list:type_name -> pmsclient.ProductAttributeValueListData
	115, // 28: pmsclient.QueryProductCategoryListResp.list:type_name -> pmsclient.ProductCategoryListData
	118, // 29: pmsclient.QueryProductCategoryListTreeData.Children:type_name -> pmsclient.QueryProductCategoryListTreeData
	118, // 30: pmsclient.QueryProductCategoryListTreeResp.list:type_name -> pmsclient.QueryProductCategoryListTreeData
	123, // 31: pmsclient.QueryProductCategoryAttributeRelationListResp.list:type_name -> pmsclient.ProductCategoryAttributeRelationListData
	132, // 32: pmsclient.QueryProductCollectListResp.list:type_name -> pmsclient.ProductCollectListData
	139, // 33: pmsclient.QueryProductFullReductionListResp.list:type_name -> pmsclient.ProductFullReductionListData
	150, // 34: pmsclient.QueryProductLadderListResp.list:type_name -> pmsclient.ProductLadderListData
	159, // 35: pmsclient.QueryProductOperateLogListResp.list:type_name -> pmsclient.ProductOperateLogListData
	172, // 36: pmsclient.QueryProductVertifyRecordListResp.list:type_name -> pmsclient.ProductVertifyRecordListData
	179, // 37: pmsclient.UpdateSkuStockReq.SkuStockList:type_name -> pmsclient.UpdateSkuStockData
	184, // 38: pmsclient.QuerySkuStockListResp.list:type_name -> pmsclient.SkuStockListData
	187, // 39: pmsclient.ReleaseSkuStockLockReq.data:type_name -> pmsclient.ReleaseSkuStockLockData
	190, // 40: pmsclient.LockSkuStockLockReq.data:type_name -> pmsclient.LockSkuStockLockData
	0,   // 41: pmsclient.BrandService.AddBrand:input_type -> pmsclient.AddBrandReq
	2,   // 42: pmsclient.BrandService.DeleteBrand:input_type -> pmsclient.DeleteBrandReq
	4,   // 43: pmsclient.BrandService.UpdateBrand:input_type -> pmsclient.UpdateBrandReq
	6,   // 44: pmsclient.BrandService.QueryBrandDetail:input_type -> pmsclient.QueryBrandDetailReq
	8,   // 45: pmsclient.BrandService.QueryBrandList:input_type -> pmsclient.QueryBrandListReq
	11,  // 46: pmsclient.BrandService.QueryBrandListByIds:input_type -> pmsclient.QueryBrandListByIdsReq
	12,  // 47: pmsclient.BrandService.UpdateBrandShowStatus:input_type -> pmsclient.UpdateBrandShowStatusReq
	13,  // 48: pmsclient.BrandService.UpdateBrandFactoryStatus:input_type -> pmsclient.UpdateBrandFactoryStatusReq
	14,  // 49: pmsclient.BrandService.UpdateBrandRecommendStatus:input_type -> pmsclient.UpdateBrandRecommendStatusReq
	16,  // 50: pmsclient.CommentService.AddComment:input_type -> pmsclient.AddCommentReq
	18,  // 51: pmsclient.CommentService.DeleteComment:input_type -> pmsclient.DeleteCommentReq
	20,  // 52: pmsclient.CommentService.UpdateComment:input_type -> pmsclient.UpdateCommentReq
	22,  // 53: pmsclient.CommentService.QueryCommentDetail:input_type -> pmsclient.QueryCommentDetailReq
	24,  // 54: pmsclient.CommentService.QueryCommentList:input_type -> pmsclient.QueryCommentListReq
	27,  // 55: pmsclient.CommentReplayService.AddCommentReplay:input_type -> pmsclient.AddCommentReplayReq
	29,  // 56: pmsclient.CommentReplayService.DeleteCommentReplay:input_type -> pmsclient.DeleteCommentReplayReq
	31,  // 57: pmsclient.CommentReplayService.UpdateCommentReplay:input_type -> pmsclient.UpdateCommentReplayReq
	33,  // 58: pmsclient.CommentReplayService.QueryCommentReplayDetail:input_type -> pmsclient.QueryCommentReplayDetailReq
	35,  // 59: pmsclient.CommentReplayService.QueryCommentReplayList:input_type -> pmsclient.QueryCommentReplayListReq
	38,  // 60: pmsclient.FeightTemplateService.AddFeightTemplate:input_type -> pmsclient.AddFeightTemplateReq
	40,  // 61: pmsclient.FeightTemplateService.DeleteFeightTemplate:input_type -> pmsclient.DeleteFeightTemplateReq
	42,  // 62: pmsclient.FeightTemplateService.UpdateFeightTemplate:input_type -> pmsclient.UpdateFeightTemplateReq
	44,  // 63: pmsclient.FeightTemplateService.QueryFeightTemplateDetail:input_type -> pmsclient.QueryFeightTemplateDetailReq
	46,  // 64: pmsclient.FeightTemplateService.QueryFeightTemplateList:input_type -> pmsclient.QueryFeightTemplateListReq
	54,  // 65: pmsclient.ProductService.AddProduct:input_type -> pmsclient.AddProductReq
	56,  // 66: pmsclient.ProductService.QueryProductList:input_type -> pmsclient.QueryProductListReq
	57,  // 67: pmsclient.ProductService.QueryProductListByIds:input_type -> pmsclient.QueryProductByIdsReq
	60,  // 68: pmsclient.ProductService.UpdateProduct:input_type -> pmsclient.UpdateProductReq
	62,  // 69: pmsclient.ProductService.DeleteProduct:input_type -> pmsclient.DeleteProductReq
	64,  // 70: pmsclient.ProductService.QueryProductDetailById:input_type -> pmsclient.QueryProductDetailByIdReq
	73,  // 71: pmsclient.ProductService.UpdateVerifyStatus:input_type -> pmsclient.UpdateProductStatusReq
	73,  // 72: pmsclient.ProductService.UpdatePublishStatus:input_type -> pmsclient.UpdateProductStatusReq
	73,  // 73: pmsclient.ProductService.UpdateRecommendStatus:input_type -> pmsclient.UpdateProductStatusReq
	73,  // 74: pmsclient.ProductService.UpdateNewStatus:input_type -> pmsclient.UpdateProductStatusReq
	73,  // 75: pmsclient.ProductService.UpdateDeleteStatus:input_type -> pmsclient.UpdateProductStatusReq
	75,  // 76: pmsclient.ProductAttributeService.AddProductAttribute:input_type -> pmsclient.AddProductAttributeReq
	77,  // 77: pmsclient.ProductAttributeService.DeleteProductAttribute:input_type -> pmsclient.DeleteProductAttributeReq
	79,  // 78: pmsclient.ProductAttributeService.QueryProductAttributeList:input_type -> pmsclient.QueryProductAttributeListReq
	82,  // 79: pmsclient.ProductAttributeService.QueryByproductCategoryId:input_type -> pmsclient.QueryByproductCategoryIdReq
	85,  // 80: pmsclient.ProductAttributeCategoryService.AddProductAttributeCategory:input_type -> pmsclient.AddProductAttributeCategoryReq
	87,  // 81: pmsclient.ProductAttributeCategoryService.DeleteProductAttributeCategory:input_type -> pmsclient.DeleteProductAttributeCategoryReq
	89,  // 82: pmsclient.ProductAttributeCategoryService.UpdateProductAttributeCategory:input_type -> pmsclient.UpdateProductAttributeCategoryReq
	91,  // 83: pmsclient.ProductAttributeCategoryService.QueryProductAttributeCategoryList:input_type -> pmsclient.QueryProductAttributeCategoryListReq
	91,  // 84: pmsclient.ProductAttributeCategoryService.queryCategoryWithAttrList:input_type -> pmsclient.QueryProductAttributeCategoryListReq
	95,  // 85: pmsclient.ProductAttributeValueService.AddProductAttributeValue:input_type -> pmsclient.AddProductAttributeValueReq
	97,  // 86: pmsclient.ProductAttributeValueService.DeleteProductAttributeValue:input_type -> pmsclient.DeleteProductAttributeValueReq
	99,  // 87: pmsclient.ProductAttributeValueService.UpdateProductAttributeValue:input_type -> pmsclient.UpdateProductAttributeValueReq
	101, // 88: pmsclient.ProductAttributeValueService.QueryProductAttributeValueList:input_type -> pmsclient.QueryProductAttributeValueListReq
	104, // 89: pmsclient.ProductCategoryService.AddProductCategory:input_type -> pmsclient.AddProductCategoryReq
	106, // 90: pmsclient.ProductCategoryService.DeleteProductCategory:input_type -> pmsclient.DeleteProductCategoryReq
	108, // 91: pmsclient.ProductCategoryService.UpdateProductCategory:input_type -> pmsclient.UpdateProductCategoryReq
	110, // 92: pmsclient.ProductCategoryService.UpdateCategoryNavStatus:input_type -> pmsclient.UpdateProductCategoryStatusReq
	110, // 93: pmsclient.ProductCategoryService.UpdateCategoryShowStatus:input_type -> pmsclient.UpdateProductCategoryStatusReq
	112, // 94: pmsclient.ProductCategoryService.QueryProductCategoryDetail:input_type -> pmsclient.QueryProductCategoryDetailReq
	114, // 95: pmsclient.ProductCategoryService.QueryProductCategoryList:input_type -> pmsclient.QueryProductCategoryListReq
	117, // 96: pmsclient.ProductCategoryService.QueryProductCategoryTreeList:input_type -> pmsclient.QueryProductCategoryTreeListReq
	120, // 97: pmsclient.ProductCategoryAttributeRelationService.AddProductCategoryAttributeRelation:input_type -> pmsclient.AddProductCategoryAttributeRelationReq
	122, // 98: pmsclient.ProductCategoryAttributeRelationService.QueryProductCategoryAttributeRelationList:input_type -> pmsclient.QueryProductCategoryAttributeRelationListReq
	125, // 99: pmsclient.ProductCollectService.AddProductCollect:input_type -> pmsclient.AddProductCollectReq
	127, // 100: pmsclient.ProductCollectService.DeleteProductCollect:input_type -> pmsclient.DeleteProductCollectReq
	129, // 101: pmsclient.ProductCollectService.QueryProductCollectDetail:input_type -> pmsclient.QueryProductCollectDetailReq
	131, // 102: pmsclient.ProductCollectService.QueryProductCollectList:input_type -> pmsclient.QueryProductCollectListReq
	134, // 103: pmsclient.ProductFullReductionService.AddProductFullReduction:input_type -> pmsclient.AddProductFullReductionReq
	136, // 104: pmsclient.ProductFullReductionService.DeleteProductFullReduction:input_type -> pmsclient.DeleteProductFullReductionReq
	138, // 105: pmsclient.ProductFullReductionService.QueryProductFullReductionList:input_type -> pmsclient.QueryProductFullReductionListReq
	141, // 106: pmsclient.ProductLadderService.AddProductLadder:input_type -> pmsclient.AddProductLadderReq
	143, // 107: pmsclient.ProductLadderService.DeleteProductLadder:input_type -> pmsclient.DeleteProductLadderReq
	145, // 108: pmsclient.ProductLadderService.UpdateProductLadder:input_type -> pmsclient.UpdateProductLadderReq
	147, // 109: pmsclient.ProductLadderService.QueryProductLadderDetail:input_type -> pmsclient.QueryProductLadderDetailReq
	149, // 110: pmsclient.ProductLadderService.QueryProductLadderList:input_type -> pmsclient.QueryProductLadderListReq
	152, // 111: pmsclient.ProductOperateLogService.AddProductOperateLog:input_type -> pmsclient.AddProductOperateLogReq
	154, // 112: pmsclient.ProductOperateLogService.DeleteProductOperateLog:input_type -> pmsclient.DeleteProductOperateLogReq
	156, // 113: pmsclient.ProductOperateLogService.QueryProductOperateLogDetail:input_type -> pmsclient.QueryProductOperateLogDetailReq
	158, // 114: pmsclient.ProductOperateLogService.QueryProductOperateLogList:input_type -> pmsclient.QueryProductOperateLogListReq
	161, // 115: pmsclient.ProductVertifyRecordService.AddProductVertifyRecord:input_type -> pmsclient.AddProductVertifyRecordReq
	163, // 116: pmsclient.ProductVertifyRecordService.DeleteProductVertifyRecord:input_type -> pmsclient.DeleteProductVertifyRecordReq
	165, // 117: pmsclient.ProductVertifyRecordService.UpdateProductVertifyRecord:input_type -> pmsclient.UpdateProductVertifyRecordReq
	167, // 118: pmsclient.ProductVertifyRecordService.UpdateProductVertifyRecordStatus:input_type -> pmsclient.UpdateProductVertifyRecordStatusReq
	169, // 119: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordDetail:input_type -> pmsclient.QueryProductVertifyRecordDetailReq
	171, // 120: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordList:input_type -> pmsclient.QueryProductVertifyRecordListReq
	174, // 121: pmsclient.SkuStockService.AddSkuStock:input_type -> pmsclient.AddSkuStockReq
	176, // 122: pmsclient.SkuStockService.DeleteSkuStock:input_type -> pmsclient.DeleteSkuStockReq
	178, // 123: pmsclient.SkuStockService.UpdateSkuStock:input_type -> pmsclient.UpdateSkuStockReq
	181, // 124: pmsclient.SkuStockService.QuerySkuStockDetail:input_type -> pmsclient.QuerySkuStockDetailReq
	183, // 125: pmsclient.SkuStockService.QuerySkuStockList:input_type -> pmsclient.QuerySkuStockListReq
	186, // 126: pmsclient.SkuStockService.ReleaseSkuStockLock:input_type -> pmsclient.ReleaseSkuStockLockReq
	189, // 127: pmsclient.SkuStockService.LockSkuStockLock:input_type -> pmsclient.LockSkuStockLockReq
	192, // 128: pmsclient.SkuStockService.QuerySkuStockByProductSkuId:input_type -> pmsclient.QuerySkuStockByProductSkuIdReq
	1,   // 129: pmsclient.BrandService.AddBrand:output_type -> pmsclient.AddBrandResp
	3,   // 130: pmsclient.BrandService.DeleteBrand:output_type -> pmsclient.DeleteBrandResp
	5,   // 131: pmsclient.BrandService.UpdateBrand:output_type -> pmsclient.UpdateBrandResp
	7,   // 132: pmsclient.BrandService.QueryBrandDetail:output_type -> pmsclient.QueryBrandDetailResp
	10,  // 133: pmsclient.BrandService.QueryBrandList:output_type -> pmsclient.QueryBrandListResp
	10,  // 134: pmsclient.BrandService.QueryBrandListByIds:output_type -> pmsclient.QueryBrandListResp
	15,  // 135: pmsclient.BrandService.UpdateBrandShowStatus:output_type -> pmsclient.UpdateBrandStatusResp
	15,  // 136: pmsclient.BrandService.UpdateBrandFactoryStatus:output_type -> pmsclient.UpdateBrandStatusResp
	15,  // 137: pmsclient.BrandService.UpdateBrandRecommendStatus:output_type -> pmsclient.UpdateBrandStatusResp
	17,  // 138: pmsclient.CommentService.AddComment:output_type -> pmsclient.AddCommentResp
	19,  // 139: pmsclient.CommentService.DeleteComment:output_type -> pmsclient.DeleteCommentResp
	21,  // 140: pmsclient.CommentService.UpdateComment:output_type -> pmsclient.UpdateCommentResp
	23,  // 141: pmsclient.CommentService.QueryCommentDetail:output_type -> pmsclient.QueryCommentDetailResp
	26,  // 142: pmsclient.CommentService.QueryCommentList:output_type -> pmsclient.QueryCommentListResp
	28,  // 143: pmsclient.CommentReplayService.AddCommentReplay:output_type -> pmsclient.AddCommentReplayResp
	30,  // 144: pmsclient.CommentReplayService.DeleteCommentReplay:output_type -> pmsclient.DeleteCommentReplayResp
	32,  // 145: pmsclient.CommentReplayService.UpdateCommentReplay:output_type -> pmsclient.UpdateCommentReplayResp
	34,  // 146: pmsclient.CommentReplayService.QueryCommentReplayDetail:output_type -> pmsclient.QueryCommentReplayDetailResp
	37,  // 147: pmsclient.CommentReplayService.QueryCommentReplayList:output_type -> pmsclient.QueryCommentReplayListResp
	39,  // 148: pmsclient.FeightTemplateService.AddFeightTemplate:output_type -> pmsclient.AddFeightTemplateResp
	41,  // 149: pmsclient.FeightTemplateService.DeleteFeightTemplate:output_type -> pmsclient.DeleteFeightTemplateResp
	43,  // 150: pmsclient.FeightTemplateService.UpdateFeightTemplate:output_type -> pmsclient.UpdateFeightTemplateResp
	45,  // 151: pmsclient.FeightTemplateService.QueryFeightTemplateDetail:output_type -> pmsclient.QueryFeightTemplateDetailResp
	48,  // 152: pmsclient.FeightTemplateService.QueryFeightTemplateList:output_type -> pmsclient.QueryFeightTemplateListResp
	55,  // 153: pmsclient.ProductService.AddProduct:output_type -> pmsclient.AddProductResp
	59,  // 154: pmsclient.ProductService.QueryProductList:output_type -> pmsclient.QueryProductListResp
	59,  // 155: pmsclient.ProductService.QueryProductListByIds:output_type -> pmsclient.QueryProductListResp
	61,  // 156: pmsclient.ProductService.UpdateProduct:output_type -> pmsclient.UpdateProductResp
	63,  // 157: pmsclient.ProductService.DeleteProduct:output_type -> pmsclient.DeleteProductResp
	72,  // 158: pmsclient.ProductService.QueryProductDetailById:output_type -> pmsclient.QueryProductDetailByIdResp
	74,  // 159: pmsclient.ProductService.UpdateVerifyStatus:output_type -> pmsclient.UpdateProductStatusResp
	74,  // 160: pmsclient.ProductService.UpdatePublishStatus:output_type -> pmsclient.UpdateProductStatusResp
	74,  // 161: pmsclient.ProductService.UpdateRecommendStatus:output_type -> pmsclient.UpdateProductStatusResp
	74,  // 162: pmsclient.ProductService.UpdateNewStatus:output_type -> pmsclient.UpdateProductStatusResp
	74,  // 163: pmsclient.ProductService.UpdateDeleteStatus:output_type -> pmsclient.UpdateProductStatusResp
	76,  // 164: pmsclient.ProductAttributeService.AddProductAttribute:output_type -> pmsclient.AddProductAttributeResp
	78,  // 165: pmsclient.ProductAttributeService.DeleteProductAttribute:output_type -> pmsclient.DeleteProductAttributeResp
	81,  // 166: pmsclient.ProductAttributeService.QueryProductAttributeList:output_type -> pmsclient.QueryProductAttributeListResp
	84,  // 167: pmsclient.ProductAttributeService.QueryByproductCategoryId:output_type -> pmsclient.QueryByproductCategoryIdResp
	86,  // 168: pmsclient.ProductAttributeCategoryService.AddProductAttributeCategory:output_type -> pmsclient.AddProductAttributeCategoryResp
	88,  // 169: pmsclient.ProductAttributeCategoryService.DeleteProductAttributeCategory:output_type -> pmsclient.DeleteProductAttributeCategoryResp
	90,  // 170: pmsclient.ProductAttributeCategoryService.UpdateProductAttributeCategory:output_type -> pmsclient.UpdateProductAttributeCategoryResp
	94,  // 171: pmsclient.ProductAttributeCategoryService.QueryProductAttributeCategoryList:output_type -> pmsclient.QueryProductAttributeCategoryListResp
	94,  // 172: pmsclient.ProductAttributeCategoryService.queryCategoryWithAttrList:output_type -> pmsclient.QueryProductAttributeCategoryListResp
	96,  // 173: pmsclient.ProductAttributeValueService.AddProductAttributeValue:output_type -> pmsclient.AddProductAttributeValueResp
	98,  // 174: pmsclient.ProductAttributeValueService.DeleteProductAttributeValue:output_type -> pmsclient.DeleteProductAttributeValueResp
	100, // 175: pmsclient.ProductAttributeValueService.UpdateProductAttributeValue:output_type -> pmsclient.UpdateProductAttributeValueResp
	103, // 176: pmsclient.ProductAttributeValueService.QueryProductAttributeValueList:output_type -> pmsclient.QueryProductAttributeValueListResp
	105, // 177: pmsclient.ProductCategoryService.AddProductCategory:output_type -> pmsclient.AddProductCategoryResp
	107, // 178: pmsclient.ProductCategoryService.DeleteProductCategory:output_type -> pmsclient.DeleteProductCategoryResp
	109, // 179: pmsclient.ProductCategoryService.UpdateProductCategory:output_type -> pmsclient.UpdateProductCategoryResp
	111, // 180: pmsclient.ProductCategoryService.UpdateCategoryNavStatus:output_type -> pmsclient.UpdateProductCategoryStatusResp
	111, // 181: pmsclient.ProductCategoryService.UpdateCategoryShowStatus:output_type -> pmsclient.UpdateProductCategoryStatusResp
	113, // 182: pmsclient.ProductCategoryService.QueryProductCategoryDetail:output_type -> pmsclient.QueryProductCategoryDetailResp
	116, // 183: pmsclient.ProductCategoryService.QueryProductCategoryList:output_type -> pmsclient.QueryProductCategoryListResp
	119, // 184: pmsclient.ProductCategoryService.QueryProductCategoryTreeList:output_type -> pmsclient.QueryProductCategoryListTreeResp
	121, // 185: pmsclient.ProductCategoryAttributeRelationService.AddProductCategoryAttributeRelation:output_type -> pmsclient.AddProductCategoryAttributeRelationResp
	124, // 186: pmsclient.ProductCategoryAttributeRelationService.QueryProductCategoryAttributeRelationList:output_type -> pmsclient.QueryProductCategoryAttributeRelationListResp
	126, // 187: pmsclient.ProductCollectService.AddProductCollect:output_type -> pmsclient.AddProductCollectResp
	128, // 188: pmsclient.ProductCollectService.DeleteProductCollect:output_type -> pmsclient.DeleteProductCollectResp
	130, // 189: pmsclient.ProductCollectService.QueryProductCollectDetail:output_type -> pmsclient.QueryProductCollectDetailResp
	133, // 190: pmsclient.ProductCollectService.QueryProductCollectList:output_type -> pmsclient.QueryProductCollectListResp
	135, // 191: pmsclient.ProductFullReductionService.AddProductFullReduction:output_type -> pmsclient.AddProductFullReductionResp
	137, // 192: pmsclient.ProductFullReductionService.DeleteProductFullReduction:output_type -> pmsclient.DeleteProductFullReductionResp
	140, // 193: pmsclient.ProductFullReductionService.QueryProductFullReductionList:output_type -> pmsclient.QueryProductFullReductionListResp
	142, // 194: pmsclient.ProductLadderService.AddProductLadder:output_type -> pmsclient.AddProductLadderResp
	144, // 195: pmsclient.ProductLadderService.DeleteProductLadder:output_type -> pmsclient.DeleteProductLadderResp
	146, // 196: pmsclient.ProductLadderService.UpdateProductLadder:output_type -> pmsclient.UpdateProductLadderResp
	148, // 197: pmsclient.ProductLadderService.QueryProductLadderDetail:output_type -> pmsclient.QueryProductLadderDetailResp
	151, // 198: pmsclient.ProductLadderService.QueryProductLadderList:output_type -> pmsclient.QueryProductLadderListResp
	153, // 199: pmsclient.ProductOperateLogService.AddProductOperateLog:output_type -> pmsclient.AddProductOperateLogResp
	155, // 200: pmsclient.ProductOperateLogService.DeleteProductOperateLog:output_type -> pmsclient.DeleteProductOperateLogResp
	157, // 201: pmsclient.ProductOperateLogService.QueryProductOperateLogDetail:output_type -> pmsclient.QueryProductOperateLogDetailResp
	160, // 202: pmsclient.ProductOperateLogService.QueryProductOperateLogList:output_type -> pmsclient.QueryProductOperateLogListResp
	162, // 203: pmsclient.ProductVertifyRecordService.AddProductVertifyRecord:output_type -> pmsclient.AddProductVertifyRecordResp
	164, // 204: pmsclient.ProductVertifyRecordService.DeleteProductVertifyRecord:output_type -> pmsclient.DeleteProductVertifyRecordResp
	166, // 205: pmsclient.ProductVertifyRecordService.UpdateProductVertifyRecord:output_type -> pmsclient.UpdateProductVertifyRecordResp
	168, // 206: pmsclient.ProductVertifyRecordService.UpdateProductVertifyRecordStatus:output_type -> pmsclient.UpdateProductVertifyRecordStatusResp
	170, // 207: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordDetail:output_type -> pmsclient.QueryProductVertifyRecordDetailResp
	173, // 208: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordList:output_type -> pmsclient.QueryProductVertifyRecordListResp
	175, // 209: pmsclient.SkuStockService.AddSkuStock:output_type -> pmsclient.AddSkuStockResp
	177, // 210: pmsclient.SkuStockService.DeleteSkuStock:output_type -> pmsclient.DeleteSkuStockResp
	180, // 211: pmsclient.SkuStockService.UpdateSkuStock:output_type -> pmsclient.UpdateSkuStockResp
	182, // 212: pmsclient.SkuStockService.QuerySkuStockDetail:output_type -> pmsclient.QuerySkuStockDetailResp
	185, // 213: pmsclient.SkuStockService.QuerySkuStockList:output_type -> pmsclient.QuerySkuStockListResp
	188, // 214: pmsclient.SkuStockService.ReleaseSkuStockLock:output_type -> pmsclient.ReleaseSkuStockLockResp
	191, // 215: pmsclient.SkuStockService.LockSkuStockLock:output_type -> pmsclient.LockSkuStockLockResp
	184, // 216: pmsclient.SkuStockService.QuerySkuStockByProductSkuId:output_type -> pmsclient.SkuStockListData
	129, // [129:217] is the sub-list for method output_type
	41,  // [41:129] is the sub-list for method input_type
	41,  // [41:41] is the sub-list for extension type_name
	41,  // [41:41] is the sub-list for extension extendee
	0,   // [0:41] is the sub-list for field type_name
}

func init() { file_rpc_pms_pms_proto_init() }
func file_rpc_pms_pms_proto_init() {
	if File_rpc_pms_pms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_pms_pms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBrandResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBrandResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBrandDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBrandDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBrandListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBrandListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBrandListByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandShowStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandFactoryStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandRecommendStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentReplayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentReplayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentReplayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentReplayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentReplayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentReplayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentReplayDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentReplayDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentReplayListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentReplayListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCommentReplayListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeightTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeightTemplateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeightTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeightTemplateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeightTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeightTemplateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeightTemplateDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeightTemplateDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeightTemplateListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeightTemplateListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeightTemplateListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFullReductionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductLadderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuStockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductDetailByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeValueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuStockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductLadderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFullReductionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPriceListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductDetailByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductAttributeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductAttributeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductAttributeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductAttributeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByproductCategoryIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByproductCategoryIdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByproductCategoryIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductAttributeCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductAttributeCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductAttributeCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductAttributeCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductAttributeCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeCategoryListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductAttributeCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductAttributeValueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductAttributeValueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeValueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeValueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductAttributeValueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductAttributeValueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductAttributeValueListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeValueListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductAttributeValueListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductCategoryStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductCategoryStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryTreeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryListTreeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryListTreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductCategoryAttributeRelationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductCategoryAttributeRelationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryAttributeRelationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryAttributeRelationListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCategoryAttributeRelationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductCollectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductCollectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductCollectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductCollectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCollectDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCollectDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCollectListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCollectListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductCollectListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductFullReductionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductFullReductionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductFullReductionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductFullReductionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductFullReductionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFullReductionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductFullReductionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductLadderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductLadderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductLadderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductLadderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductLadderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductLadderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductLadderDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductLadderDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductLadderListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductLadderListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductLadderListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductOperateLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductOperateLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductOperateLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductOperateLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductOperateLogDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductOperateLogDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductOperateLogListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOperateLogListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductOperateLogListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductVertifyRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductVertifyRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductVertifyRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductVertifyRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductVertifyRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductVertifyRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductVertifyRecordStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductVertifyRecordStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductVertifyRecordDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductVertifyRecordDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductVertifyRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductVertifyRecordListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductVertifyRecordListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSkuStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSkuStockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSkuStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSkuStockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkuStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkuStockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkuStockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySkuStockDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySkuStockDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySkuStockListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuStockListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySkuStockListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSkuStockLockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSkuStockLockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSkuStockLockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockSkuStockLockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockSkuStockLockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockSkuStockLockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pms_pms_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySkuStockByProductSkuIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_pms_pms_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   193,
			NumExtensions: 0,
			NumServices:   16,
		},
		GoTypes:           file_rpc_pms_pms_proto_goTypes,
		DependencyIndexes: file_rpc_pms_pms_proto_depIdxs,
		MessageInfos:      file_rpc_pms_pms_proto_msgTypes,
	}.Build()
	File_rpc_pms_pms_proto = out.File
	file_rpc_pms_pms_proto_rawDesc = nil
	file_rpc_pms_pms_proto_goTypes = nil
	file_rpc_pms_pms_proto_depIdxs = nil
}

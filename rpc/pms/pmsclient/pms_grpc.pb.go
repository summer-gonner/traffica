// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/pms/pms.proto

package pmsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrandService_AddBrand_FullMethodName                   = "/pmsclient.BrandService/AddBrand"
	BrandService_DeleteBrand_FullMethodName                = "/pmsclient.BrandService/DeleteBrand"
	BrandService_UpdateBrand_FullMethodName                = "/pmsclient.BrandService/UpdateBrand"
	BrandService_QueryBrandDetail_FullMethodName           = "/pmsclient.BrandService/QueryBrandDetail"
	BrandService_QueryBrandList_FullMethodName             = "/pmsclient.BrandService/QueryBrandList"
	BrandService_QueryBrandListByIds_FullMethodName        = "/pmsclient.BrandService/QueryBrandListByIds"
	BrandService_UpdateBrandShowStatus_FullMethodName      = "/pmsclient.BrandService/UpdateBrandShowStatus"
	BrandService_UpdateBrandFactoryStatus_FullMethodName   = "/pmsclient.BrandService/UpdateBrandFactoryStatus"
	BrandService_UpdateBrandRecommendStatus_FullMethodName = "/pmsclient.BrandService/UpdateBrandRecommendStatus"
)

// BrandServiceClient is the client API for BrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandServiceClient interface {
	// 添加品牌表
	AddBrand(ctx context.Context, in *AddBrandReq, opts ...grpc.CallOption) (*AddBrandResp, error)
	// 删除品牌表
	DeleteBrand(ctx context.Context, in *DeleteBrandReq, opts ...grpc.CallOption) (*DeleteBrandResp, error)
	// 更新品牌表
	UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...grpc.CallOption) (*UpdateBrandResp, error)
	// 查询品牌表详情
	QueryBrandDetail(ctx context.Context, in *QueryBrandDetailReq, opts ...grpc.CallOption) (*QueryBrandDetailResp, error)
	// 查询品牌表列表
	QueryBrandList(ctx context.Context, in *QueryBrandListReq, opts ...grpc.CallOption) (*QueryBrandListResp, error)
	QueryBrandListByIds(ctx context.Context, in *QueryBrandListByIdsReq, opts ...grpc.CallOption) (*QueryBrandListResp, error)
	// 更新品牌的显示状态
	UpdateBrandShowStatus(ctx context.Context, in *UpdateBrandShowStatusReq, opts ...grpc.CallOption) (*UpdateBrandStatusResp, error)
	// 更新品牌是否为品牌制造商
	UpdateBrandFactoryStatus(ctx context.Context, in *UpdateBrandFactoryStatusReq, opts ...grpc.CallOption) (*UpdateBrandStatusResp, error)
	// 更新品牌的推荐状态
	UpdateBrandRecommendStatus(ctx context.Context, in *UpdateBrandRecommendStatusReq, opts ...grpc.CallOption) (*UpdateBrandStatusResp, error)
}

type brandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandServiceClient(cc grpc.ClientConnInterface) BrandServiceClient {
	return &brandServiceClient{cc}
}

func (c *brandServiceClient) AddBrand(ctx context.Context, in *AddBrandReq, opts ...grpc.CallOption) (*AddBrandResp, error) {
	out := new(AddBrandResp)
	err := c.cc.Invoke(ctx, BrandService_AddBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) DeleteBrand(ctx context.Context, in *DeleteBrandReq, opts ...grpc.CallOption) (*DeleteBrandResp, error) {
	out := new(DeleteBrandResp)
	err := c.cc.Invoke(ctx, BrandService_DeleteBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...grpc.CallOption) (*UpdateBrandResp, error) {
	out := new(UpdateBrandResp)
	err := c.cc.Invoke(ctx, BrandService_UpdateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) QueryBrandDetail(ctx context.Context, in *QueryBrandDetailReq, opts ...grpc.CallOption) (*QueryBrandDetailResp, error) {
	out := new(QueryBrandDetailResp)
	err := c.cc.Invoke(ctx, BrandService_QueryBrandDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) QueryBrandList(ctx context.Context, in *QueryBrandListReq, opts ...grpc.CallOption) (*QueryBrandListResp, error) {
	out := new(QueryBrandListResp)
	err := c.cc.Invoke(ctx, BrandService_QueryBrandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) QueryBrandListByIds(ctx context.Context, in *QueryBrandListByIdsReq, opts ...grpc.CallOption) (*QueryBrandListResp, error) {
	out := new(QueryBrandListResp)
	err := c.cc.Invoke(ctx, BrandService_QueryBrandListByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) UpdateBrandShowStatus(ctx context.Context, in *UpdateBrandShowStatusReq, opts ...grpc.CallOption) (*UpdateBrandStatusResp, error) {
	out := new(UpdateBrandStatusResp)
	err := c.cc.Invoke(ctx, BrandService_UpdateBrandShowStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) UpdateBrandFactoryStatus(ctx context.Context, in *UpdateBrandFactoryStatusReq, opts ...grpc.CallOption) (*UpdateBrandStatusResp, error) {
	out := new(UpdateBrandStatusResp)
	err := c.cc.Invoke(ctx, BrandService_UpdateBrandFactoryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) UpdateBrandRecommendStatus(ctx context.Context, in *UpdateBrandRecommendStatusReq, opts ...grpc.CallOption) (*UpdateBrandStatusResp, error) {
	out := new(UpdateBrandStatusResp)
	err := c.cc.Invoke(ctx, BrandService_UpdateBrandRecommendStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandServiceServer is the server API for BrandService service.
// All implementations must embed UnimplementedBrandServiceServer
// for forward compatibility
type BrandServiceServer interface {
	// 添加品牌表
	AddBrand(context.Context, *AddBrandReq) (*AddBrandResp, error)
	// 删除品牌表
	DeleteBrand(context.Context, *DeleteBrandReq) (*DeleteBrandResp, error)
	// 更新品牌表
	UpdateBrand(context.Context, *UpdateBrandReq) (*UpdateBrandResp, error)
	// 查询品牌表详情
	QueryBrandDetail(context.Context, *QueryBrandDetailReq) (*QueryBrandDetailResp, error)
	// 查询品牌表列表
	QueryBrandList(context.Context, *QueryBrandListReq) (*QueryBrandListResp, error)
	QueryBrandListByIds(context.Context, *QueryBrandListByIdsReq) (*QueryBrandListResp, error)
	// 更新品牌的显示状态
	UpdateBrandShowStatus(context.Context, *UpdateBrandShowStatusReq) (*UpdateBrandStatusResp, error)
	// 更新品牌是否为品牌制造商
	UpdateBrandFactoryStatus(context.Context, *UpdateBrandFactoryStatusReq) (*UpdateBrandStatusResp, error)
	// 更新品牌的推荐状态
	UpdateBrandRecommendStatus(context.Context, *UpdateBrandRecommendStatusReq) (*UpdateBrandStatusResp, error)
	mustEmbedUnimplementedBrandServiceServer()
}

// UnimplementedBrandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrandServiceServer struct {
}

func (UnimplementedBrandServiceServer) AddBrand(context.Context, *AddBrandReq) (*AddBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBrand not implemented")
}
func (UnimplementedBrandServiceServer) DeleteBrand(context.Context, *DeleteBrandReq) (*DeleteBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedBrandServiceServer) UpdateBrand(context.Context, *UpdateBrandReq) (*UpdateBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedBrandServiceServer) QueryBrandDetail(context.Context, *QueryBrandDetailReq) (*QueryBrandDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBrandDetail not implemented")
}
func (UnimplementedBrandServiceServer) QueryBrandList(context.Context, *QueryBrandListReq) (*QueryBrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBrandList not implemented")
}
func (UnimplementedBrandServiceServer) QueryBrandListByIds(context.Context, *QueryBrandListByIdsReq) (*QueryBrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBrandListByIds not implemented")
}
func (UnimplementedBrandServiceServer) UpdateBrandShowStatus(context.Context, *UpdateBrandShowStatusReq) (*UpdateBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandShowStatus not implemented")
}
func (UnimplementedBrandServiceServer) UpdateBrandFactoryStatus(context.Context, *UpdateBrandFactoryStatusReq) (*UpdateBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandFactoryStatus not implemented")
}
func (UnimplementedBrandServiceServer) UpdateBrandRecommendStatus(context.Context, *UpdateBrandRecommendStatusReq) (*UpdateBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandRecommendStatus not implemented")
}
func (UnimplementedBrandServiceServer) mustEmbedUnimplementedBrandServiceServer() {}

// UnsafeBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandServiceServer will
// result in compilation errors.
type UnsafeBrandServiceServer interface {
	mustEmbedUnimplementedBrandServiceServer()
}

func RegisterBrandServiceServer(s grpc.ServiceRegistrar, srv BrandServiceServer) {
	s.RegisterService(&BrandService_ServiceDesc, srv)
}

func _BrandService_AddBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).AddBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_AddBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).AddBrand(ctx, req.(*AddBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).DeleteBrand(ctx, req.(*DeleteBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).UpdateBrand(ctx, req.(*UpdateBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_QueryBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).QueryBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_QueryBrandDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).QueryBrandDetail(ctx, req.(*QueryBrandDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_QueryBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).QueryBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_QueryBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).QueryBrandList(ctx, req.(*QueryBrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_QueryBrandListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).QueryBrandListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_QueryBrandListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).QueryBrandListByIds(ctx, req.(*QueryBrandListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_UpdateBrandShowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandShowStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).UpdateBrandShowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_UpdateBrandShowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).UpdateBrandShowStatus(ctx, req.(*UpdateBrandShowStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_UpdateBrandFactoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandFactoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).UpdateBrandFactoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_UpdateBrandFactoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).UpdateBrandFactoryStatus(ctx, req.(*UpdateBrandFactoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_UpdateBrandRecommendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRecommendStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).UpdateBrandRecommendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_UpdateBrandRecommendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).UpdateBrandRecommendStatus(ctx, req.(*UpdateBrandRecommendStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandService_ServiceDesc is the grpc.ServiceDesc for BrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.BrandService",
	HandlerType: (*BrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBrand",
			Handler:    _BrandService_AddBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _BrandService_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _BrandService_UpdateBrand_Handler,
		},
		{
			MethodName: "QueryBrandDetail",
			Handler:    _BrandService_QueryBrandDetail_Handler,
		},
		{
			MethodName: "QueryBrandList",
			Handler:    _BrandService_QueryBrandList_Handler,
		},
		{
			MethodName: "QueryBrandListByIds",
			Handler:    _BrandService_QueryBrandListByIds_Handler,
		},
		{
			MethodName: "UpdateBrandShowStatus",
			Handler:    _BrandService_UpdateBrandShowStatus_Handler,
		},
		{
			MethodName: "UpdateBrandFactoryStatus",
			Handler:    _BrandService_UpdateBrandFactoryStatus_Handler,
		},
		{
			MethodName: "UpdateBrandRecommendStatus",
			Handler:    _BrandService_UpdateBrandRecommendStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	CommentService_AddComment_FullMethodName         = "/pmsclient.CommentService/AddComment"
	CommentService_DeleteComment_FullMethodName      = "/pmsclient.CommentService/DeleteComment"
	CommentService_UpdateComment_FullMethodName      = "/pmsclient.CommentService/UpdateComment"
	CommentService_QueryCommentDetail_FullMethodName = "/pmsclient.CommentService/QueryCommentDetail"
	CommentService_QueryCommentList_FullMethodName   = "/pmsclient.CommentService/QueryCommentList"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	// 添加商品评价表
	AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	// 删除商品评价表
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error)
	// 更新商品评价表
	UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error)
	// 查询商品评价表详情
	QueryCommentDetail(ctx context.Context, in *QueryCommentDetailReq, opts ...grpc.CallOption) (*QueryCommentDetailResp, error)
	// 查询商品评价表列表
	QueryCommentList(ctx context.Context, in *QueryCommentListReq, opts ...grpc.CallOption) (*QueryCommentListResp, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, CommentService_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error) {
	out := new(DeleteCommentResp)
	err := c.cc.Invoke(ctx, CommentService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error) {
	out := new(UpdateCommentResp)
	err := c.cc.Invoke(ctx, CommentService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) QueryCommentDetail(ctx context.Context, in *QueryCommentDetailReq, opts ...grpc.CallOption) (*QueryCommentDetailResp, error) {
	out := new(QueryCommentDetailResp)
	err := c.cc.Invoke(ctx, CommentService_QueryCommentDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) QueryCommentList(ctx context.Context, in *QueryCommentListReq, opts ...grpc.CallOption) (*QueryCommentListResp, error) {
	out := new(QueryCommentListResp)
	err := c.cc.Invoke(ctx, CommentService_QueryCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	// 添加商品评价表
	AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error)
	// 删除商品评价表
	DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentResp, error)
	// 更新商品评价表
	UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error)
	// 查询商品评价表详情
	QueryCommentDetail(context.Context, *QueryCommentDetailReq) (*QueryCommentDetailResp, error)
	// 查询商品评价表列表
	QueryCommentList(context.Context, *QueryCommentListReq) (*QueryCommentListResp, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentServiceServer) QueryCommentDetail(context.Context, *QueryCommentDetailReq) (*QueryCommentDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentDetail not implemented")
}
func (UnimplementedCommentServiceServer) QueryCommentList(context.Context, *QueryCommentListReq) (*QueryCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentList not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AddComment(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*DeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateComment(ctx, req.(*UpdateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_QueryCommentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).QueryCommentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_QueryCommentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).QueryCommentDetail(ctx, req.(*QueryCommentDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_QueryCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).QueryCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_QueryCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).QueryCommentList(ctx, req.(*QueryCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _CommentService_AddComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentService_UpdateComment_Handler,
		},
		{
			MethodName: "QueryCommentDetail",
			Handler:    _CommentService_QueryCommentDetail_Handler,
		},
		{
			MethodName: "QueryCommentList",
			Handler:    _CommentService_QueryCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	CommentReplayService_AddCommentReplay_FullMethodName         = "/pmsclient.CommentReplayService/AddCommentReplay"
	CommentReplayService_DeleteCommentReplay_FullMethodName      = "/pmsclient.CommentReplayService/DeleteCommentReplay"
	CommentReplayService_UpdateCommentReplay_FullMethodName      = "/pmsclient.CommentReplayService/UpdateCommentReplay"
	CommentReplayService_QueryCommentReplayDetail_FullMethodName = "/pmsclient.CommentReplayService/QueryCommentReplayDetail"
	CommentReplayService_QueryCommentReplayList_FullMethodName   = "/pmsclient.CommentReplayService/QueryCommentReplayList"
)

// CommentReplayServiceClient is the client API for CommentReplayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentReplayServiceClient interface {
	// 添加产品评价回复表
	AddCommentReplay(ctx context.Context, in *AddCommentReplayReq, opts ...grpc.CallOption) (*AddCommentReplayResp, error)
	// 删除产品评价回复表
	DeleteCommentReplay(ctx context.Context, in *DeleteCommentReplayReq, opts ...grpc.CallOption) (*DeleteCommentReplayResp, error)
	// 更新产品评价回复表
	UpdateCommentReplay(ctx context.Context, in *UpdateCommentReplayReq, opts ...grpc.CallOption) (*UpdateCommentReplayResp, error)
	// 查询产品评价回复表详情
	QueryCommentReplayDetail(ctx context.Context, in *QueryCommentReplayDetailReq, opts ...grpc.CallOption) (*QueryCommentReplayDetailResp, error)
	// 查询产品评价回复表列表
	QueryCommentReplayList(ctx context.Context, in *QueryCommentReplayListReq, opts ...grpc.CallOption) (*QueryCommentReplayListResp, error)
}

type commentReplayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentReplayServiceClient(cc grpc.ClientConnInterface) CommentReplayServiceClient {
	return &commentReplayServiceClient{cc}
}

func (c *commentReplayServiceClient) AddCommentReplay(ctx context.Context, in *AddCommentReplayReq, opts ...grpc.CallOption) (*AddCommentReplayResp, error) {
	out := new(AddCommentReplayResp)
	err := c.cc.Invoke(ctx, CommentReplayService_AddCommentReplay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) DeleteCommentReplay(ctx context.Context, in *DeleteCommentReplayReq, opts ...grpc.CallOption) (*DeleteCommentReplayResp, error) {
	out := new(DeleteCommentReplayResp)
	err := c.cc.Invoke(ctx, CommentReplayService_DeleteCommentReplay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) UpdateCommentReplay(ctx context.Context, in *UpdateCommentReplayReq, opts ...grpc.CallOption) (*UpdateCommentReplayResp, error) {
	out := new(UpdateCommentReplayResp)
	err := c.cc.Invoke(ctx, CommentReplayService_UpdateCommentReplay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) QueryCommentReplayDetail(ctx context.Context, in *QueryCommentReplayDetailReq, opts ...grpc.CallOption) (*QueryCommentReplayDetailResp, error) {
	out := new(QueryCommentReplayDetailResp)
	err := c.cc.Invoke(ctx, CommentReplayService_QueryCommentReplayDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) QueryCommentReplayList(ctx context.Context, in *QueryCommentReplayListReq, opts ...grpc.CallOption) (*QueryCommentReplayListResp, error) {
	out := new(QueryCommentReplayListResp)
	err := c.cc.Invoke(ctx, CommentReplayService_QueryCommentReplayList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentReplayServiceServer is the server API for CommentReplayService service.
// All implementations must embed UnimplementedCommentReplayServiceServer
// for forward compatibility
type CommentReplayServiceServer interface {
	// 添加产品评价回复表
	AddCommentReplay(context.Context, *AddCommentReplayReq) (*AddCommentReplayResp, error)
	// 删除产品评价回复表
	DeleteCommentReplay(context.Context, *DeleteCommentReplayReq) (*DeleteCommentReplayResp, error)
	// 更新产品评价回复表
	UpdateCommentReplay(context.Context, *UpdateCommentReplayReq) (*UpdateCommentReplayResp, error)
	// 查询产品评价回复表详情
	QueryCommentReplayDetail(context.Context, *QueryCommentReplayDetailReq) (*QueryCommentReplayDetailResp, error)
	// 查询产品评价回复表列表
	QueryCommentReplayList(context.Context, *QueryCommentReplayListReq) (*QueryCommentReplayListResp, error)
	mustEmbedUnimplementedCommentReplayServiceServer()
}

// UnimplementedCommentReplayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentReplayServiceServer struct {
}

func (UnimplementedCommentReplayServiceServer) AddCommentReplay(context.Context, *AddCommentReplayReq) (*AddCommentReplayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentReplay not implemented")
}
func (UnimplementedCommentReplayServiceServer) DeleteCommentReplay(context.Context, *DeleteCommentReplayReq) (*DeleteCommentReplayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentReplay not implemented")
}
func (UnimplementedCommentReplayServiceServer) UpdateCommentReplay(context.Context, *UpdateCommentReplayReq) (*UpdateCommentReplayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentReplay not implemented")
}
func (UnimplementedCommentReplayServiceServer) QueryCommentReplayDetail(context.Context, *QueryCommentReplayDetailReq) (*QueryCommentReplayDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentReplayDetail not implemented")
}
func (UnimplementedCommentReplayServiceServer) QueryCommentReplayList(context.Context, *QueryCommentReplayListReq) (*QueryCommentReplayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentReplayList not implemented")
}
func (UnimplementedCommentReplayServiceServer) mustEmbedUnimplementedCommentReplayServiceServer() {}

// UnsafeCommentReplayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentReplayServiceServer will
// result in compilation errors.
type UnsafeCommentReplayServiceServer interface {
	mustEmbedUnimplementedCommentReplayServiceServer()
}

func RegisterCommentReplayServiceServer(s grpc.ServiceRegistrar, srv CommentReplayServiceServer) {
	s.RegisterService(&CommentReplayService_ServiceDesc, srv)
}

func _CommentReplayService_AddCommentReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReplayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).AddCommentReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_AddCommentReplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).AddCommentReplay(ctx, req.(*AddCommentReplayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_DeleteCommentReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReplayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).DeleteCommentReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_DeleteCommentReplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).DeleteCommentReplay(ctx, req.(*DeleteCommentReplayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_UpdateCommentReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReplayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).UpdateCommentReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_UpdateCommentReplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).UpdateCommentReplay(ctx, req.(*UpdateCommentReplayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_QueryCommentReplayDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentReplayDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).QueryCommentReplayDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_QueryCommentReplayDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).QueryCommentReplayDetail(ctx, req.(*QueryCommentReplayDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_QueryCommentReplayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentReplayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).QueryCommentReplayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_QueryCommentReplayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).QueryCommentReplayList(ctx, req.(*QueryCommentReplayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentReplayService_ServiceDesc is the grpc.ServiceDesc for CommentReplayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentReplayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.CommentReplayService",
	HandlerType: (*CommentReplayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommentReplay",
			Handler:    _CommentReplayService_AddCommentReplay_Handler,
		},
		{
			MethodName: "DeleteCommentReplay",
			Handler:    _CommentReplayService_DeleteCommentReplay_Handler,
		},
		{
			MethodName: "UpdateCommentReplay",
			Handler:    _CommentReplayService_UpdateCommentReplay_Handler,
		},
		{
			MethodName: "QueryCommentReplayDetail",
			Handler:    _CommentReplayService_QueryCommentReplayDetail_Handler,
		},
		{
			MethodName: "QueryCommentReplayList",
			Handler:    _CommentReplayService_QueryCommentReplayList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	FeightTemplateService_AddFeightTemplate_FullMethodName         = "/pmsclient.FeightTemplateService/AddFeightTemplate"
	FeightTemplateService_DeleteFeightTemplate_FullMethodName      = "/pmsclient.FeightTemplateService/DeleteFeightTemplate"
	FeightTemplateService_UpdateFeightTemplate_FullMethodName      = "/pmsclient.FeightTemplateService/UpdateFeightTemplate"
	FeightTemplateService_QueryFeightTemplateDetail_FullMethodName = "/pmsclient.FeightTemplateService/QueryFeightTemplateDetail"
	FeightTemplateService_QueryFeightTemplateList_FullMethodName   = "/pmsclient.FeightTemplateService/QueryFeightTemplateList"
)

// FeightTemplateServiceClient is the client API for FeightTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeightTemplateServiceClient interface {
	// 添加运费模版
	AddFeightTemplate(ctx context.Context, in *AddFeightTemplateReq, opts ...grpc.CallOption) (*AddFeightTemplateResp, error)
	// 删除运费模版
	DeleteFeightTemplate(ctx context.Context, in *DeleteFeightTemplateReq, opts ...grpc.CallOption) (*DeleteFeightTemplateResp, error)
	// 更新运费模版
	UpdateFeightTemplate(ctx context.Context, in *UpdateFeightTemplateReq, opts ...grpc.CallOption) (*UpdateFeightTemplateResp, error)
	// 查询运费模版详情
	QueryFeightTemplateDetail(ctx context.Context, in *QueryFeightTemplateDetailReq, opts ...grpc.CallOption) (*QueryFeightTemplateDetailResp, error)
	// 查询运费模版列表
	QueryFeightTemplateList(ctx context.Context, in *QueryFeightTemplateListReq, opts ...grpc.CallOption) (*QueryFeightTemplateListResp, error)
}

type feightTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeightTemplateServiceClient(cc grpc.ClientConnInterface) FeightTemplateServiceClient {
	return &feightTemplateServiceClient{cc}
}

func (c *feightTemplateServiceClient) AddFeightTemplate(ctx context.Context, in *AddFeightTemplateReq, opts ...grpc.CallOption) (*AddFeightTemplateResp, error) {
	out := new(AddFeightTemplateResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_AddFeightTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) DeleteFeightTemplate(ctx context.Context, in *DeleteFeightTemplateReq, opts ...grpc.CallOption) (*DeleteFeightTemplateResp, error) {
	out := new(DeleteFeightTemplateResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_DeleteFeightTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) UpdateFeightTemplate(ctx context.Context, in *UpdateFeightTemplateReq, opts ...grpc.CallOption) (*UpdateFeightTemplateResp, error) {
	out := new(UpdateFeightTemplateResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_UpdateFeightTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) QueryFeightTemplateDetail(ctx context.Context, in *QueryFeightTemplateDetailReq, opts ...grpc.CallOption) (*QueryFeightTemplateDetailResp, error) {
	out := new(QueryFeightTemplateDetailResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_QueryFeightTemplateDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) QueryFeightTemplateList(ctx context.Context, in *QueryFeightTemplateListReq, opts ...grpc.CallOption) (*QueryFeightTemplateListResp, error) {
	out := new(QueryFeightTemplateListResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_QueryFeightTemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeightTemplateServiceServer is the server API for FeightTemplateService service.
// All implementations must embed UnimplementedFeightTemplateServiceServer
// for forward compatibility
type FeightTemplateServiceServer interface {
	// 添加运费模版
	AddFeightTemplate(context.Context, *AddFeightTemplateReq) (*AddFeightTemplateResp, error)
	// 删除运费模版
	DeleteFeightTemplate(context.Context, *DeleteFeightTemplateReq) (*DeleteFeightTemplateResp, error)
	// 更新运费模版
	UpdateFeightTemplate(context.Context, *UpdateFeightTemplateReq) (*UpdateFeightTemplateResp, error)
	// 查询运费模版详情
	QueryFeightTemplateDetail(context.Context, *QueryFeightTemplateDetailReq) (*QueryFeightTemplateDetailResp, error)
	// 查询运费模版列表
	QueryFeightTemplateList(context.Context, *QueryFeightTemplateListReq) (*QueryFeightTemplateListResp, error)
	mustEmbedUnimplementedFeightTemplateServiceServer()
}

// UnimplementedFeightTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeightTemplateServiceServer struct {
}

func (UnimplementedFeightTemplateServiceServer) AddFeightTemplate(context.Context, *AddFeightTemplateReq) (*AddFeightTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeightTemplate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) DeleteFeightTemplate(context.Context, *DeleteFeightTemplateReq) (*DeleteFeightTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeightTemplate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) UpdateFeightTemplate(context.Context, *UpdateFeightTemplateReq) (*UpdateFeightTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeightTemplate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) QueryFeightTemplateDetail(context.Context, *QueryFeightTemplateDetailReq) (*QueryFeightTemplateDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeightTemplateDetail not implemented")
}
func (UnimplementedFeightTemplateServiceServer) QueryFeightTemplateList(context.Context, *QueryFeightTemplateListReq) (*QueryFeightTemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeightTemplateList not implemented")
}
func (UnimplementedFeightTemplateServiceServer) mustEmbedUnimplementedFeightTemplateServiceServer() {}

// UnsafeFeightTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeightTemplateServiceServer will
// result in compilation errors.
type UnsafeFeightTemplateServiceServer interface {
	mustEmbedUnimplementedFeightTemplateServiceServer()
}

func RegisterFeightTemplateServiceServer(s grpc.ServiceRegistrar, srv FeightTemplateServiceServer) {
	s.RegisterService(&FeightTemplateService_ServiceDesc, srv)
}

func _FeightTemplateService_AddFeightTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeightTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).AddFeightTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_AddFeightTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).AddFeightTemplate(ctx, req.(*AddFeightTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_DeleteFeightTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeightTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).DeleteFeightTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_DeleteFeightTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).DeleteFeightTemplate(ctx, req.(*DeleteFeightTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_UpdateFeightTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeightTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).UpdateFeightTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_UpdateFeightTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).UpdateFeightTemplate(ctx, req.(*UpdateFeightTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_QueryFeightTemplateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeightTemplateDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_QueryFeightTemplateDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateDetail(ctx, req.(*QueryFeightTemplateDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_QueryFeightTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeightTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_QueryFeightTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateList(ctx, req.(*QueryFeightTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeightTemplateService_ServiceDesc is the grpc.ServiceDesc for FeightTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeightTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.FeightTemplateService",
	HandlerType: (*FeightTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeightTemplate",
			Handler:    _FeightTemplateService_AddFeightTemplate_Handler,
		},
		{
			MethodName: "DeleteFeightTemplate",
			Handler:    _FeightTemplateService_DeleteFeightTemplate_Handler,
		},
		{
			MethodName: "UpdateFeightTemplate",
			Handler:    _FeightTemplateService_UpdateFeightTemplate_Handler,
		},
		{
			MethodName: "QueryFeightTemplateDetail",
			Handler:    _FeightTemplateService_QueryFeightTemplateDetail_Handler,
		},
		{
			MethodName: "QueryFeightTemplateList",
			Handler:    _FeightTemplateService_QueryFeightTemplateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductService_AddProduct_FullMethodName             = "/pmsclient.ProductService/AddProduct"
	ProductService_QueryProductList_FullMethodName       = "/pmsclient.ProductService/QueryProductList"
	ProductService_QueryProductListByIds_FullMethodName  = "/pmsclient.ProductService/QueryProductListByIds"
	ProductService_UpdateProduct_FullMethodName          = "/pmsclient.ProductService/UpdateProduct"
	ProductService_DeleteProduct_FullMethodName          = "/pmsclient.ProductService/DeleteProduct"
	ProductService_QueryProductDetailById_FullMethodName = "/pmsclient.ProductService/QueryProductDetailById"
	ProductService_UpdateVerifyStatus_FullMethodName     = "/pmsclient.ProductService/UpdateVerifyStatus"
	ProductService_UpdatePublishStatus_FullMethodName    = "/pmsclient.ProductService/UpdatePublishStatus"
	ProductService_UpdateRecommendStatus_FullMethodName  = "/pmsclient.ProductService/UpdateRecommendStatus"
	ProductService_UpdateNewStatus_FullMethodName        = "/pmsclient.ProductService/UpdateNewStatus"
	ProductService_UpdateDeleteStatus_FullMethodName     = "/pmsclient.ProductService/UpdateDeleteStatus"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*AddProductResp, error)
	// 查询商品列表
	QueryProductList(ctx context.Context, in *QueryProductListReq, opts ...grpc.CallOption) (*QueryProductListResp, error)
	QueryProductListByIds(ctx context.Context, in *QueryProductByIdsReq, opts ...grpc.CallOption) (*QueryProductListResp, error)
	UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error)
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error)
	// 查询商品详情
	QueryProductDetailById(ctx context.Context, in *QueryProductDetailByIdReq, opts ...grpc.CallOption) (*QueryProductDetailByIdResp, error)
	// 批量修改审核状态
	UpdateVerifyStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error)
	// 批量上下架商品
	UpdatePublishStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error)
	// 批量推荐商品
	UpdateRecommendStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error)
	// 批量设为新品
	UpdateNewStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error)
	// 批量修改删除状态
	UpdateDeleteStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*AddProductResp, error) {
	out := new(AddProductResp)
	err := c.cc.Invoke(ctx, ProductService_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) QueryProductList(ctx context.Context, in *QueryProductListReq, opts ...grpc.CallOption) (*QueryProductListResp, error) {
	out := new(QueryProductListResp)
	err := c.cc.Invoke(ctx, ProductService_QueryProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) QueryProductListByIds(ctx context.Context, in *QueryProductByIdsReq, opts ...grpc.CallOption) (*QueryProductListResp, error) {
	out := new(QueryProductListResp)
	err := c.cc.Invoke(ctx, ProductService_QueryProductListByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error) {
	out := new(UpdateProductResp)
	err := c.cc.Invoke(ctx, ProductService_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error) {
	out := new(DeleteProductResp)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) QueryProductDetailById(ctx context.Context, in *QueryProductDetailByIdReq, opts ...grpc.CallOption) (*QueryProductDetailByIdResp, error) {
	out := new(QueryProductDetailByIdResp)
	err := c.cc.Invoke(ctx, ProductService_QueryProductDetailById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateVerifyStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error) {
	out := new(UpdateProductStatusResp)
	err := c.cc.Invoke(ctx, ProductService_UpdateVerifyStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdatePublishStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error) {
	out := new(UpdateProductStatusResp)
	err := c.cc.Invoke(ctx, ProductService_UpdatePublishStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateRecommendStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error) {
	out := new(UpdateProductStatusResp)
	err := c.cc.Invoke(ctx, ProductService_UpdateRecommendStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateNewStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error) {
	out := new(UpdateProductStatusResp)
	err := c.cc.Invoke(ctx, ProductService_UpdateNewStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateDeleteStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error) {
	out := new(UpdateProductStatusResp)
	err := c.cc.Invoke(ctx, ProductService_UpdateDeleteStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	AddProduct(context.Context, *AddProductReq) (*AddProductResp, error)
	// 查询商品列表
	QueryProductList(context.Context, *QueryProductListReq) (*QueryProductListResp, error)
	QueryProductListByIds(context.Context, *QueryProductByIdsReq) (*QueryProductListResp, error)
	UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductResp, error)
	DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductResp, error)
	// 查询商品详情
	QueryProductDetailById(context.Context, *QueryProductDetailByIdReq) (*QueryProductDetailByIdResp, error)
	// 批量修改审核状态
	UpdateVerifyStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error)
	// 批量上下架商品
	UpdatePublishStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error)
	// 批量推荐商品
	UpdateRecommendStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error)
	// 批量设为新品
	UpdateNewStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error)
	// 批量修改删除状态
	UpdateDeleteStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) AddProduct(context.Context, *AddProductReq) (*AddProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductServiceServer) QueryProductList(context.Context, *QueryProductListReq) (*QueryProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductList not implemented")
}
func (UnimplementedProductServiceServer) QueryProductListByIds(context.Context, *QueryProductByIdsReq) (*QueryProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductListByIds not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) QueryProductDetailById(context.Context, *QueryProductDetailByIdReq) (*QueryProductDetailByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductDetailById not implemented")
}
func (UnimplementedProductServiceServer) UpdateVerifyStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifyStatus not implemented")
}
func (UnimplementedProductServiceServer) UpdatePublishStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublishStatus not implemented")
}
func (UnimplementedProductServiceServer) UpdateRecommendStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendStatus not implemented")
}
func (UnimplementedProductServiceServer) UpdateNewStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewStatus not implemented")
}
func (UnimplementedProductServiceServer) UpdateDeleteStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeleteStatus not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddProduct(ctx, req.(*AddProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_QueryProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).QueryProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_QueryProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).QueryProductList(ctx, req.(*QueryProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_QueryProductListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).QueryProductListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_QueryProductListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).QueryProductListByIds(ctx, req.(*QueryProductByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*UpdateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_QueryProductDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductDetailByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).QueryProductDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_QueryProductDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).QueryProductDetailById(ctx, req.(*QueryProductDetailByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateVerifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateVerifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateVerifyStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateVerifyStatus(ctx, req.(*UpdateProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdatePublishStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdatePublishStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdatePublishStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdatePublishStatus(ctx, req.(*UpdateProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateRecommendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateRecommendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateRecommendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateRecommendStatus(ctx, req.(*UpdateProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateNewStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateNewStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateNewStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateNewStatus(ctx, req.(*UpdateProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateDeleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateDeleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateDeleteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateDeleteStatus(ctx, req.(*UpdateProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _ProductService_AddProduct_Handler,
		},
		{
			MethodName: "QueryProductList",
			Handler:    _ProductService_QueryProductList_Handler,
		},
		{
			MethodName: "QueryProductListByIds",
			Handler:    _ProductService_QueryProductListByIds_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "QueryProductDetailById",
			Handler:    _ProductService_QueryProductDetailById_Handler,
		},
		{
			MethodName: "UpdateVerifyStatus",
			Handler:    _ProductService_UpdateVerifyStatus_Handler,
		},
		{
			MethodName: "UpdatePublishStatus",
			Handler:    _ProductService_UpdatePublishStatus_Handler,
		},
		{
			MethodName: "UpdateRecommendStatus",
			Handler:    _ProductService_UpdateRecommendStatus_Handler,
		},
		{
			MethodName: "UpdateNewStatus",
			Handler:    _ProductService_UpdateNewStatus_Handler,
		},
		{
			MethodName: "UpdateDeleteStatus",
			Handler:    _ProductService_UpdateDeleteStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductAttributeService_AddProductAttribute_FullMethodName       = "/pmsclient.ProductAttributeService/AddProductAttribute"
	ProductAttributeService_DeleteProductAttribute_FullMethodName    = "/pmsclient.ProductAttributeService/DeleteProductAttribute"
	ProductAttributeService_QueryProductAttributeList_FullMethodName = "/pmsclient.ProductAttributeService/QueryProductAttributeList"
	ProductAttributeService_QueryByproductCategoryId_FullMethodName  = "/pmsclient.ProductAttributeService/QueryByproductCategoryId"
)

// ProductAttributeServiceClient is the client API for ProductAttributeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttributeServiceClient interface {
	// 添加商品属性参数表
	AddProductAttribute(ctx context.Context, in *AddProductAttributeReq, opts ...grpc.CallOption) (*AddProductAttributeResp, error)
	// 删除商品属性参数表
	DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*DeleteProductAttributeResp, error)
	// 查询商品属性参数表列表
	QueryProductAttributeList(ctx context.Context, in *QueryProductAttributeListReq, opts ...grpc.CallOption) (*QueryProductAttributeListResp, error)
	// 根据商品分类的id获取商品属性及属性分类
	QueryByproductCategoryId(ctx context.Context, in *QueryByproductCategoryIdReq, opts ...grpc.CallOption) (*QueryByproductCategoryIdResp, error)
}

type productAttributeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeServiceClient(cc grpc.ClientConnInterface) ProductAttributeServiceClient {
	return &productAttributeServiceClient{cc}
}

func (c *productAttributeServiceClient) AddProductAttribute(ctx context.Context, in *AddProductAttributeReq, opts ...grpc.CallOption) (*AddProductAttributeResp, error) {
	out := new(AddProductAttributeResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_AddProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*DeleteProductAttributeResp, error) {
	out := new(DeleteProductAttributeResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_DeleteProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) QueryProductAttributeList(ctx context.Context, in *QueryProductAttributeListReq, opts ...grpc.CallOption) (*QueryProductAttributeListResp, error) {
	out := new(QueryProductAttributeListResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_QueryProductAttributeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) QueryByproductCategoryId(ctx context.Context, in *QueryByproductCategoryIdReq, opts ...grpc.CallOption) (*QueryByproductCategoryIdResp, error) {
	out := new(QueryByproductCategoryIdResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_QueryByproductCategoryId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeServiceServer is the server API for ProductAttributeService service.
// All implementations must embed UnimplementedProductAttributeServiceServer
// for forward compatibility
type ProductAttributeServiceServer interface {
	// 添加商品属性参数表
	AddProductAttribute(context.Context, *AddProductAttributeReq) (*AddProductAttributeResp, error)
	// 删除商品属性参数表
	DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*DeleteProductAttributeResp, error)
	// 查询商品属性参数表列表
	QueryProductAttributeList(context.Context, *QueryProductAttributeListReq) (*QueryProductAttributeListResp, error)
	// 根据商品分类的id获取商品属性及属性分类
	QueryByproductCategoryId(context.Context, *QueryByproductCategoryIdReq) (*QueryByproductCategoryIdResp, error)
	mustEmbedUnimplementedProductAttributeServiceServer()
}

// UnimplementedProductAttributeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttributeServiceServer struct {
}

func (UnimplementedProductAttributeServiceServer) AddProductAttribute(context.Context, *AddProductAttributeReq) (*AddProductAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttribute not implemented")
}
func (UnimplementedProductAttributeServiceServer) DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*DeleteProductAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttribute not implemented")
}
func (UnimplementedProductAttributeServiceServer) QueryProductAttributeList(context.Context, *QueryProductAttributeListReq) (*QueryProductAttributeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeList not implemented")
}
func (UnimplementedProductAttributeServiceServer) QueryByproductCategoryId(context.Context, *QueryByproductCategoryIdReq) (*QueryByproductCategoryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByproductCategoryId not implemented")
}
func (UnimplementedProductAttributeServiceServer) mustEmbedUnimplementedProductAttributeServiceServer() {
}

// UnsafeProductAttributeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeServiceServer will
// result in compilation errors.
type UnsafeProductAttributeServiceServer interface {
	mustEmbedUnimplementedProductAttributeServiceServer()
}

func RegisterProductAttributeServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeServiceServer) {
	s.RegisterService(&ProductAttributeService_ServiceDesc, srv)
}

func _ProductAttributeService_AddProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).AddProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_AddProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).AddProductAttribute(ctx, req.(*AddProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_DeleteProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).DeleteProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_DeleteProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).DeleteProductAttribute(ctx, req.(*DeleteProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_QueryProductAttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).QueryProductAttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_QueryProductAttributeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).QueryProductAttributeList(ctx, req.(*QueryProductAttributeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_QueryByproductCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByproductCategoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).QueryByproductCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_QueryByproductCategoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).QueryByproductCategoryId(ctx, req.(*QueryByproductCategoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeService",
	HandlerType: (*ProductAttributeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductAttribute",
			Handler:    _ProductAttributeService_AddProductAttribute_Handler,
		},
		{
			MethodName: "DeleteProductAttribute",
			Handler:    _ProductAttributeService_DeleteProductAttribute_Handler,
		},
		{
			MethodName: "QueryProductAttributeList",
			Handler:    _ProductAttributeService_QueryProductAttributeList_Handler,
		},
		{
			MethodName: "QueryByproductCategoryId",
			Handler:    _ProductAttributeService_QueryByproductCategoryId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductAttributeCategoryService_AddProductAttributeCategory_FullMethodName       = "/pmsclient.ProductAttributeCategoryService/AddProductAttributeCategory"
	ProductAttributeCategoryService_DeleteProductAttributeCategory_FullMethodName    = "/pmsclient.ProductAttributeCategoryService/DeleteProductAttributeCategory"
	ProductAttributeCategoryService_UpdateProductAttributeCategory_FullMethodName    = "/pmsclient.ProductAttributeCategoryService/UpdateProductAttributeCategory"
	ProductAttributeCategoryService_QueryProductAttributeCategoryList_FullMethodName = "/pmsclient.ProductAttributeCategoryService/QueryProductAttributeCategoryList"
	ProductAttributeCategoryService_QueryCategoryWithAttrList_FullMethodName         = "/pmsclient.ProductAttributeCategoryService/queryCategoryWithAttrList"
)

// ProductAttributeCategoryServiceClient is the client API for ProductAttributeCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttributeCategoryServiceClient interface {
	// 添加产品属性分类表
	AddProductAttributeCategory(ctx context.Context, in *AddProductAttributeCategoryReq, opts ...grpc.CallOption) (*AddProductAttributeCategoryResp, error)
	// 删除产品属性分类表
	DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryReq, opts ...grpc.CallOption) (*DeleteProductAttributeCategoryResp, error)
	// 更新产品属性分类表
	UpdateProductAttributeCategory(ctx context.Context, in *UpdateProductAttributeCategoryReq, opts ...grpc.CallOption) (*UpdateProductAttributeCategoryResp, error)
	// 查询产品属性分类表列表
	QueryProductAttributeCategoryList(ctx context.Context, in *QueryProductAttributeCategoryListReq, opts ...grpc.CallOption) (*QueryProductAttributeCategoryListResp, error)
	// 获取所有商品属性分类及其下属性
	QueryCategoryWithAttrList(ctx context.Context, in *QueryProductAttributeCategoryListReq, opts ...grpc.CallOption) (*QueryProductAttributeCategoryListResp, error)
}

type productAttributeCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeCategoryServiceClient(cc grpc.ClientConnInterface) ProductAttributeCategoryServiceClient {
	return &productAttributeCategoryServiceClient{cc}
}

func (c *productAttributeCategoryServiceClient) AddProductAttributeCategory(ctx context.Context, in *AddProductAttributeCategoryReq, opts ...grpc.CallOption) (*AddProductAttributeCategoryResp, error) {
	out := new(AddProductAttributeCategoryResp)
	err := c.cc.Invoke(ctx, ProductAttributeCategoryService_AddProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryReq, opts ...grpc.CallOption) (*DeleteProductAttributeCategoryResp, error) {
	out := new(DeleteProductAttributeCategoryResp)
	err := c.cc.Invoke(ctx, ProductAttributeCategoryService_DeleteProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) UpdateProductAttributeCategory(ctx context.Context, in *UpdateProductAttributeCategoryReq, opts ...grpc.CallOption) (*UpdateProductAttributeCategoryResp, error) {
	out := new(UpdateProductAttributeCategoryResp)
	err := c.cc.Invoke(ctx, ProductAttributeCategoryService_UpdateProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) QueryProductAttributeCategoryList(ctx context.Context, in *QueryProductAttributeCategoryListReq, opts ...grpc.CallOption) (*QueryProductAttributeCategoryListResp, error) {
	out := new(QueryProductAttributeCategoryListResp)
	err := c.cc.Invoke(ctx, ProductAttributeCategoryService_QueryProductAttributeCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) QueryCategoryWithAttrList(ctx context.Context, in *QueryProductAttributeCategoryListReq, opts ...grpc.CallOption) (*QueryProductAttributeCategoryListResp, error) {
	out := new(QueryProductAttributeCategoryListResp)
	err := c.cc.Invoke(ctx, ProductAttributeCategoryService_QueryCategoryWithAttrList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeCategoryServiceServer is the server API for ProductAttributeCategoryService service.
// All implementations must embed UnimplementedProductAttributeCategoryServiceServer
// for forward compatibility
type ProductAttributeCategoryServiceServer interface {
	// 添加产品属性分类表
	AddProductAttributeCategory(context.Context, *AddProductAttributeCategoryReq) (*AddProductAttributeCategoryResp, error)
	// 删除产品属性分类表
	DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryReq) (*DeleteProductAttributeCategoryResp, error)
	// 更新产品属性分类表
	UpdateProductAttributeCategory(context.Context, *UpdateProductAttributeCategoryReq) (*UpdateProductAttributeCategoryResp, error)
	// 查询产品属性分类表列表
	QueryProductAttributeCategoryList(context.Context, *QueryProductAttributeCategoryListReq) (*QueryProductAttributeCategoryListResp, error)
	// 获取所有商品属性分类及其下属性
	QueryCategoryWithAttrList(context.Context, *QueryProductAttributeCategoryListReq) (*QueryProductAttributeCategoryListResp, error)
	mustEmbedUnimplementedProductAttributeCategoryServiceServer()
}

// UnimplementedProductAttributeCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttributeCategoryServiceServer struct {
}

func (UnimplementedProductAttributeCategoryServiceServer) AddProductAttributeCategory(context.Context, *AddProductAttributeCategoryReq) (*AddProductAttributeCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttributeCategory not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryReq) (*DeleteProductAttributeCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttributeCategory not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) UpdateProductAttributeCategory(context.Context, *UpdateProductAttributeCategoryReq) (*UpdateProductAttributeCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeCategory not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) QueryProductAttributeCategoryList(context.Context, *QueryProductAttributeCategoryListReq) (*QueryProductAttributeCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeCategoryList not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) QueryCategoryWithAttrList(context.Context, *QueryProductAttributeCategoryListReq) (*QueryProductAttributeCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCategoryWithAttrList not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) mustEmbedUnimplementedProductAttributeCategoryServiceServer() {
}

// UnsafeProductAttributeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeCategoryServiceServer will
// result in compilation errors.
type UnsafeProductAttributeCategoryServiceServer interface {
	mustEmbedUnimplementedProductAttributeCategoryServiceServer()
}

func RegisterProductAttributeCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeCategoryServiceServer) {
	s.RegisterService(&ProductAttributeCategoryService_ServiceDesc, srv)
}

func _ProductAttributeCategoryService_AddProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).AddProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeCategoryService_AddProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).AddProductAttributeCategory(ctx, req.(*AddProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_DeleteProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).DeleteProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeCategoryService_DeleteProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).DeleteProductAttributeCategory(ctx, req.(*DeleteProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_UpdateProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).UpdateProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeCategoryService_UpdateProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).UpdateProductAttributeCategory(ctx, req.(*UpdateProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_QueryProductAttributeCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).QueryProductAttributeCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeCategoryService_QueryProductAttributeCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).QueryProductAttributeCategoryList(ctx, req.(*QueryProductAttributeCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_QueryCategoryWithAttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).QueryCategoryWithAttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeCategoryService_QueryCategoryWithAttrList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).QueryCategoryWithAttrList(ctx, req.(*QueryProductAttributeCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeCategoryService",
	HandlerType: (*ProductAttributeCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductAttributeCategory",
			Handler:    _ProductAttributeCategoryService_AddProductAttributeCategory_Handler,
		},
		{
			MethodName: "DeleteProductAttributeCategory",
			Handler:    _ProductAttributeCategoryService_DeleteProductAttributeCategory_Handler,
		},
		{
			MethodName: "UpdateProductAttributeCategory",
			Handler:    _ProductAttributeCategoryService_UpdateProductAttributeCategory_Handler,
		},
		{
			MethodName: "QueryProductAttributeCategoryList",
			Handler:    _ProductAttributeCategoryService_QueryProductAttributeCategoryList_Handler,
		},
		{
			MethodName: "queryCategoryWithAttrList",
			Handler:    _ProductAttributeCategoryService_QueryCategoryWithAttrList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductAttributeValueService_AddProductAttributeValue_FullMethodName       = "/pmsclient.ProductAttributeValueService/AddProductAttributeValue"
	ProductAttributeValueService_DeleteProductAttributeValue_FullMethodName    = "/pmsclient.ProductAttributeValueService/DeleteProductAttributeValue"
	ProductAttributeValueService_UpdateProductAttributeValue_FullMethodName    = "/pmsclient.ProductAttributeValueService/UpdateProductAttributeValue"
	ProductAttributeValueService_QueryProductAttributeValueList_FullMethodName = "/pmsclient.ProductAttributeValueService/QueryProductAttributeValueList"
)

// ProductAttributeValueServiceClient is the client API for ProductAttributeValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttributeValueServiceClient interface {
	// 添加存储产品参数信息的表
	AddProductAttributeValue(ctx context.Context, in *AddProductAttributeValueReq, opts ...grpc.CallOption) (*AddProductAttributeValueResp, error)
	// 删除存储产品参数信息的表
	DeleteProductAttributeValue(ctx context.Context, in *DeleteProductAttributeValueReq, opts ...grpc.CallOption) (*DeleteProductAttributeValueResp, error)
	// 更新存储产品参数信息的表
	UpdateProductAttributeValue(ctx context.Context, in *UpdateProductAttributeValueReq, opts ...grpc.CallOption) (*UpdateProductAttributeValueResp, error)
	// 查询存储产品参数信息的表列表
	QueryProductAttributeValueList(ctx context.Context, in *QueryProductAttributeValueListReq, opts ...grpc.CallOption) (*QueryProductAttributeValueListResp, error)
}

type productAttributeValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeValueServiceClient(cc grpc.ClientConnInterface) ProductAttributeValueServiceClient {
	return &productAttributeValueServiceClient{cc}
}

func (c *productAttributeValueServiceClient) AddProductAttributeValue(ctx context.Context, in *AddProductAttributeValueReq, opts ...grpc.CallOption) (*AddProductAttributeValueResp, error) {
	out := new(AddProductAttributeValueResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_AddProductAttributeValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) DeleteProductAttributeValue(ctx context.Context, in *DeleteProductAttributeValueReq, opts ...grpc.CallOption) (*DeleteProductAttributeValueResp, error) {
	out := new(DeleteProductAttributeValueResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_DeleteProductAttributeValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) UpdateProductAttributeValue(ctx context.Context, in *UpdateProductAttributeValueReq, opts ...grpc.CallOption) (*UpdateProductAttributeValueResp, error) {
	out := new(UpdateProductAttributeValueResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_UpdateProductAttributeValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) QueryProductAttributeValueList(ctx context.Context, in *QueryProductAttributeValueListReq, opts ...grpc.CallOption) (*QueryProductAttributeValueListResp, error) {
	out := new(QueryProductAttributeValueListResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_QueryProductAttributeValueList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeValueServiceServer is the server API for ProductAttributeValueService service.
// All implementations must embed UnimplementedProductAttributeValueServiceServer
// for forward compatibility
type ProductAttributeValueServiceServer interface {
	// 添加存储产品参数信息的表
	AddProductAttributeValue(context.Context, *AddProductAttributeValueReq) (*AddProductAttributeValueResp, error)
	// 删除存储产品参数信息的表
	DeleteProductAttributeValue(context.Context, *DeleteProductAttributeValueReq) (*DeleteProductAttributeValueResp, error)
	// 更新存储产品参数信息的表
	UpdateProductAttributeValue(context.Context, *UpdateProductAttributeValueReq) (*UpdateProductAttributeValueResp, error)
	// 查询存储产品参数信息的表列表
	QueryProductAttributeValueList(context.Context, *QueryProductAttributeValueListReq) (*QueryProductAttributeValueListResp, error)
	mustEmbedUnimplementedProductAttributeValueServiceServer()
}

// UnimplementedProductAttributeValueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttributeValueServiceServer struct {
}

func (UnimplementedProductAttributeValueServiceServer) AddProductAttributeValue(context.Context, *AddProductAttributeValueReq) (*AddProductAttributeValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttributeValue not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) DeleteProductAttributeValue(context.Context, *DeleteProductAttributeValueReq) (*DeleteProductAttributeValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttributeValue not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) UpdateProductAttributeValue(context.Context, *UpdateProductAttributeValueReq) (*UpdateProductAttributeValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeValue not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) QueryProductAttributeValueList(context.Context, *QueryProductAttributeValueListReq) (*QueryProductAttributeValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeValueList not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) mustEmbedUnimplementedProductAttributeValueServiceServer() {
}

// UnsafeProductAttributeValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeValueServiceServer will
// result in compilation errors.
type UnsafeProductAttributeValueServiceServer interface {
	mustEmbedUnimplementedProductAttributeValueServiceServer()
}

func RegisterProductAttributeValueServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeValueServiceServer) {
	s.RegisterService(&ProductAttributeValueService_ServiceDesc, srv)
}

func _ProductAttributeValueService_AddProductAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAttributeValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).AddProductAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_AddProductAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).AddProductAttributeValue(ctx, req.(*AddProductAttributeValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_DeleteProductAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).DeleteProductAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_DeleteProductAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).DeleteProductAttributeValue(ctx, req.(*DeleteProductAttributeValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_UpdateProductAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).UpdateProductAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_UpdateProductAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).UpdateProductAttributeValue(ctx, req.(*UpdateProductAttributeValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_QueryProductAttributeValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).QueryProductAttributeValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_QueryProductAttributeValueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).QueryProductAttributeValueList(ctx, req.(*QueryProductAttributeValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeValueService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeValueService",
	HandlerType: (*ProductAttributeValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductAttributeValue",
			Handler:    _ProductAttributeValueService_AddProductAttributeValue_Handler,
		},
		{
			MethodName: "DeleteProductAttributeValue",
			Handler:    _ProductAttributeValueService_DeleteProductAttributeValue_Handler,
		},
		{
			MethodName: "UpdateProductAttributeValue",
			Handler:    _ProductAttributeValueService_UpdateProductAttributeValue_Handler,
		},
		{
			MethodName: "QueryProductAttributeValueList",
			Handler:    _ProductAttributeValueService_QueryProductAttributeValueList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductCategoryService_AddProductCategory_FullMethodName           = "/pmsclient.ProductCategoryService/AddProductCategory"
	ProductCategoryService_DeleteProductCategory_FullMethodName        = "/pmsclient.ProductCategoryService/DeleteProductCategory"
	ProductCategoryService_UpdateProductCategory_FullMethodName        = "/pmsclient.ProductCategoryService/UpdateProductCategory"
	ProductCategoryService_UpdateCategoryNavStatus_FullMethodName      = "/pmsclient.ProductCategoryService/UpdateCategoryNavStatus"
	ProductCategoryService_UpdateCategoryShowStatus_FullMethodName     = "/pmsclient.ProductCategoryService/UpdateCategoryShowStatus"
	ProductCategoryService_QueryProductCategoryDetail_FullMethodName   = "/pmsclient.ProductCategoryService/QueryProductCategoryDetail"
	ProductCategoryService_QueryProductCategoryList_FullMethodName     = "/pmsclient.ProductCategoryService/QueryProductCategoryList"
	ProductCategoryService_QueryProductCategoryTreeList_FullMethodName = "/pmsclient.ProductCategoryService/QueryProductCategoryTreeList"
)

// ProductCategoryServiceClient is the client API for ProductCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoryServiceClient interface {
	// 添加产品分类
	AddProductCategory(ctx context.Context, in *AddProductCategoryReq, opts ...grpc.CallOption) (*AddProductCategoryResp, error)
	// 删除产品分类
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*DeleteProductCategoryResp, error)
	// 更新产品分类
	UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryReq, opts ...grpc.CallOption) (*UpdateProductCategoryResp, error)
	// 更新商品分类导航显示状态
	UpdateCategoryNavStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error)
	// 更新商品分类显示状态
	UpdateCategoryShowStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error)
	// 查询产品分类详情
	QueryProductCategoryDetail(ctx context.Context, in *QueryProductCategoryDetailReq, opts ...grpc.CallOption) (*QueryProductCategoryDetailResp, error)
	// 查询产品分类列表
	QueryProductCategoryList(ctx context.Context, in *QueryProductCategoryListReq, opts ...grpc.CallOption) (*QueryProductCategoryListResp, error)
	// 查询商品分类（tree）
	QueryProductCategoryTreeList(ctx context.Context, in *QueryProductCategoryTreeListReq, opts ...grpc.CallOption) (*QueryProductCategoryListTreeResp, error)
}

type productCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryServiceClient(cc grpc.ClientConnInterface) ProductCategoryServiceClient {
	return &productCategoryServiceClient{cc}
}

func (c *productCategoryServiceClient) AddProductCategory(ctx context.Context, in *AddProductCategoryReq, opts ...grpc.CallOption) (*AddProductCategoryResp, error) {
	out := new(AddProductCategoryResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_AddProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*DeleteProductCategoryResp, error) {
	out := new(DeleteProductCategoryResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_DeleteProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryReq, opts ...grpc.CallOption) (*UpdateProductCategoryResp, error) {
	out := new(UpdateProductCategoryResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_UpdateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) UpdateCategoryNavStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error) {
	out := new(UpdateProductCategoryStatusResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_UpdateCategoryNavStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) UpdateCategoryShowStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error) {
	out := new(UpdateProductCategoryStatusResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_UpdateCategoryShowStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) QueryProductCategoryDetail(ctx context.Context, in *QueryProductCategoryDetailReq, opts ...grpc.CallOption) (*QueryProductCategoryDetailResp, error) {
	out := new(QueryProductCategoryDetailResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_QueryProductCategoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) QueryProductCategoryList(ctx context.Context, in *QueryProductCategoryListReq, opts ...grpc.CallOption) (*QueryProductCategoryListResp, error) {
	out := new(QueryProductCategoryListResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_QueryProductCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) QueryProductCategoryTreeList(ctx context.Context, in *QueryProductCategoryTreeListReq, opts ...grpc.CallOption) (*QueryProductCategoryListTreeResp, error) {
	out := new(QueryProductCategoryListTreeResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_QueryProductCategoryTreeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryServiceServer is the server API for ProductCategoryService service.
// All implementations must embed UnimplementedProductCategoryServiceServer
// for forward compatibility
type ProductCategoryServiceServer interface {
	// 添加产品分类
	AddProductCategory(context.Context, *AddProductCategoryReq) (*AddProductCategoryResp, error)
	// 删除产品分类
	DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*DeleteProductCategoryResp, error)
	// 更新产品分类
	UpdateProductCategory(context.Context, *UpdateProductCategoryReq) (*UpdateProductCategoryResp, error)
	// 更新商品分类导航显示状态
	UpdateCategoryNavStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error)
	// 更新商品分类显示状态
	UpdateCategoryShowStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error)
	// 查询产品分类详情
	QueryProductCategoryDetail(context.Context, *QueryProductCategoryDetailReq) (*QueryProductCategoryDetailResp, error)
	// 查询产品分类列表
	QueryProductCategoryList(context.Context, *QueryProductCategoryListReq) (*QueryProductCategoryListResp, error)
	// 查询商品分类（tree）
	QueryProductCategoryTreeList(context.Context, *QueryProductCategoryTreeListReq) (*QueryProductCategoryListTreeResp, error)
	mustEmbedUnimplementedProductCategoryServiceServer()
}

// UnimplementedProductCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoryServiceServer struct {
}

func (UnimplementedProductCategoryServiceServer) AddProductCategory(context.Context, *AddProductCategoryReq) (*AddProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*DeleteProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) UpdateProductCategory(context.Context, *UpdateProductCategoryReq) (*UpdateProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) UpdateCategoryNavStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryNavStatus not implemented")
}
func (UnimplementedProductCategoryServiceServer) UpdateCategoryShowStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryShowStatus not implemented")
}
func (UnimplementedProductCategoryServiceServer) QueryProductCategoryDetail(context.Context, *QueryProductCategoryDetailReq) (*QueryProductCategoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryDetail not implemented")
}
func (UnimplementedProductCategoryServiceServer) QueryProductCategoryList(context.Context, *QueryProductCategoryListReq) (*QueryProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryList not implemented")
}
func (UnimplementedProductCategoryServiceServer) QueryProductCategoryTreeList(context.Context, *QueryProductCategoryTreeListReq) (*QueryProductCategoryListTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryTreeList not implemented")
}
func (UnimplementedProductCategoryServiceServer) mustEmbedUnimplementedProductCategoryServiceServer() {
}

// UnsafeProductCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryServiceServer will
// result in compilation errors.
type UnsafeProductCategoryServiceServer interface {
	mustEmbedUnimplementedProductCategoryServiceServer()
}

func RegisterProductCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryServiceServer) {
	s.RegisterService(&ProductCategoryService_ServiceDesc, srv)
}

func _ProductCategoryService_AddProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).AddProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_AddProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).AddProductCategory(ctx, req.(*AddProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).UpdateProductCategory(ctx, req.(*UpdateProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_UpdateCategoryNavStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).UpdateCategoryNavStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_UpdateCategoryNavStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).UpdateCategoryNavStatus(ctx, req.(*UpdateProductCategoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_UpdateCategoryShowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).UpdateCategoryShowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_UpdateCategoryShowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).UpdateCategoryShowStatus(ctx, req.(*UpdateProductCategoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_QueryProductCategoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_QueryProductCategoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryDetail(ctx, req.(*QueryProductCategoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_QueryProductCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_QueryProductCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryList(ctx, req.(*QueryProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_QueryProductCategoryTreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryTreeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryTreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_QueryProductCategoryTreeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryTreeList(ctx, req.(*QueryProductCategoryTreeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCategoryService",
	HandlerType: (*ProductCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductCategory",
			Handler:    _ProductCategoryService_AddProductCategory_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _ProductCategoryService_DeleteProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _ProductCategoryService_UpdateProductCategory_Handler,
		},
		{
			MethodName: "UpdateCategoryNavStatus",
			Handler:    _ProductCategoryService_UpdateCategoryNavStatus_Handler,
		},
		{
			MethodName: "UpdateCategoryShowStatus",
			Handler:    _ProductCategoryService_UpdateCategoryShowStatus_Handler,
		},
		{
			MethodName: "QueryProductCategoryDetail",
			Handler:    _ProductCategoryService_QueryProductCategoryDetail_Handler,
		},
		{
			MethodName: "QueryProductCategoryList",
			Handler:    _ProductCategoryService_QueryProductCategoryList_Handler,
		},
		{
			MethodName: "QueryProductCategoryTreeList",
			Handler:    _ProductCategoryService_QueryProductCategoryTreeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_FullMethodName       = "/pmsclient.ProductCategoryAttributeRelationService/AddProductCategoryAttributeRelation"
	ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_FullMethodName = "/pmsclient.ProductCategoryAttributeRelationService/QueryProductCategoryAttributeRelationList"
)

// ProductCategoryAttributeRelationServiceClient is the client API for ProductCategoryAttributeRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoryAttributeRelationServiceClient interface {
	// 添加产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
	AddProductCategoryAttributeRelation(ctx context.Context, in *AddProductCategoryAttributeRelationReq, opts ...grpc.CallOption) (*AddProductCategoryAttributeRelationResp, error)
	// 查询产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）列表
	QueryProductCategoryAttributeRelationList(ctx context.Context, in *QueryProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*QueryProductCategoryAttributeRelationListResp, error)
}

type productCategoryAttributeRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryAttributeRelationServiceClient(cc grpc.ClientConnInterface) ProductCategoryAttributeRelationServiceClient {
	return &productCategoryAttributeRelationServiceClient{cc}
}

func (c *productCategoryAttributeRelationServiceClient) AddProductCategoryAttributeRelation(ctx context.Context, in *AddProductCategoryAttributeRelationReq, opts ...grpc.CallOption) (*AddProductCategoryAttributeRelationResp, error) {
	out := new(AddProductCategoryAttributeRelationResp)
	err := c.cc.Invoke(ctx, ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryAttributeRelationServiceClient) QueryProductCategoryAttributeRelationList(ctx context.Context, in *QueryProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*QueryProductCategoryAttributeRelationListResp, error) {
	out := new(QueryProductCategoryAttributeRelationListResp)
	err := c.cc.Invoke(ctx, ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryAttributeRelationServiceServer is the server API for ProductCategoryAttributeRelationService service.
// All implementations must embed UnimplementedProductCategoryAttributeRelationServiceServer
// for forward compatibility
type ProductCategoryAttributeRelationServiceServer interface {
	// 添加产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
	AddProductCategoryAttributeRelation(context.Context, *AddProductCategoryAttributeRelationReq) (*AddProductCategoryAttributeRelationResp, error)
	// 查询产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）列表
	QueryProductCategoryAttributeRelationList(context.Context, *QueryProductCategoryAttributeRelationListReq) (*QueryProductCategoryAttributeRelationListResp, error)
	mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer()
}

// UnimplementedProductCategoryAttributeRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoryAttributeRelationServiceServer struct {
}

func (UnimplementedProductCategoryAttributeRelationServiceServer) AddProductCategoryAttributeRelation(context.Context, *AddProductCategoryAttributeRelationReq) (*AddProductCategoryAttributeRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCategoryAttributeRelation not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) QueryProductCategoryAttributeRelationList(context.Context, *QueryProductCategoryAttributeRelationListReq) (*QueryProductCategoryAttributeRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryAttributeRelationList not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer() {
}

// UnsafeProductCategoryAttributeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryAttributeRelationServiceServer will
// result in compilation errors.
type UnsafeProductCategoryAttributeRelationServiceServer interface {
	mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer()
}

func RegisterProductCategoryAttributeRelationServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryAttributeRelationServiceServer) {
	s.RegisterService(&ProductCategoryAttributeRelationService_ServiceDesc, srv)
}

func _ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCategoryAttributeRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).AddProductCategoryAttributeRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).AddProductCategoryAttributeRelation(ctx, req.(*AddProductCategoryAttributeRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryAttributeRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).QueryProductCategoryAttributeRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).QueryProductCategoryAttributeRelationList(ctx, req.(*QueryProductCategoryAttributeRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryAttributeRelationService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryAttributeRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryAttributeRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCategoryAttributeRelationService",
	HandlerType: (*ProductCategoryAttributeRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductCategoryAttributeRelation",
			Handler:    _ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_Handler,
		},
		{
			MethodName: "QueryProductCategoryAttributeRelationList",
			Handler:    _ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductCollectService_AddProductCollect_FullMethodName         = "/pmsclient.ProductCollectService/AddProductCollect"
	ProductCollectService_DeleteProductCollect_FullMethodName      = "/pmsclient.ProductCollectService/DeleteProductCollect"
	ProductCollectService_QueryProductCollectDetail_FullMethodName = "/pmsclient.ProductCollectService/QueryProductCollectDetail"
	ProductCollectService_QueryProductCollectList_FullMethodName   = "/pmsclient.ProductCollectService/QueryProductCollectList"
)

// ProductCollectServiceClient is the client API for ProductCollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCollectServiceClient interface {
	// 添加收藏表
	AddProductCollect(ctx context.Context, in *AddProductCollectReq, opts ...grpc.CallOption) (*AddProductCollectResp, error)
	// 删除收藏表
	DeleteProductCollect(ctx context.Context, in *DeleteProductCollectReq, opts ...grpc.CallOption) (*DeleteProductCollectResp, error)
	// 查询收藏表详情
	QueryProductCollectDetail(ctx context.Context, in *QueryProductCollectDetailReq, opts ...grpc.CallOption) (*QueryProductCollectDetailResp, error)
	// 查询收藏表列表
	QueryProductCollectList(ctx context.Context, in *QueryProductCollectListReq, opts ...grpc.CallOption) (*QueryProductCollectListResp, error)
}

type productCollectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCollectServiceClient(cc grpc.ClientConnInterface) ProductCollectServiceClient {
	return &productCollectServiceClient{cc}
}

func (c *productCollectServiceClient) AddProductCollect(ctx context.Context, in *AddProductCollectReq, opts ...grpc.CallOption) (*AddProductCollectResp, error) {
	out := new(AddProductCollectResp)
	err := c.cc.Invoke(ctx, ProductCollectService_AddProductCollect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectServiceClient) DeleteProductCollect(ctx context.Context, in *DeleteProductCollectReq, opts ...grpc.CallOption) (*DeleteProductCollectResp, error) {
	out := new(DeleteProductCollectResp)
	err := c.cc.Invoke(ctx, ProductCollectService_DeleteProductCollect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectServiceClient) QueryProductCollectDetail(ctx context.Context, in *QueryProductCollectDetailReq, opts ...grpc.CallOption) (*QueryProductCollectDetailResp, error) {
	out := new(QueryProductCollectDetailResp)
	err := c.cc.Invoke(ctx, ProductCollectService_QueryProductCollectDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectServiceClient) QueryProductCollectList(ctx context.Context, in *QueryProductCollectListReq, opts ...grpc.CallOption) (*QueryProductCollectListResp, error) {
	out := new(QueryProductCollectListResp)
	err := c.cc.Invoke(ctx, ProductCollectService_QueryProductCollectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCollectServiceServer is the server API for ProductCollectService service.
// All implementations must embed UnimplementedProductCollectServiceServer
// for forward compatibility
type ProductCollectServiceServer interface {
	// 添加收藏表
	AddProductCollect(context.Context, *AddProductCollectReq) (*AddProductCollectResp, error)
	// 删除收藏表
	DeleteProductCollect(context.Context, *DeleteProductCollectReq) (*DeleteProductCollectResp, error)
	// 查询收藏表详情
	QueryProductCollectDetail(context.Context, *QueryProductCollectDetailReq) (*QueryProductCollectDetailResp, error)
	// 查询收藏表列表
	QueryProductCollectList(context.Context, *QueryProductCollectListReq) (*QueryProductCollectListResp, error)
	mustEmbedUnimplementedProductCollectServiceServer()
}

// UnimplementedProductCollectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCollectServiceServer struct {
}

func (UnimplementedProductCollectServiceServer) AddProductCollect(context.Context, *AddProductCollectReq) (*AddProductCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCollect not implemented")
}
func (UnimplementedProductCollectServiceServer) DeleteProductCollect(context.Context, *DeleteProductCollectReq) (*DeleteProductCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCollect not implemented")
}
func (UnimplementedProductCollectServiceServer) QueryProductCollectDetail(context.Context, *QueryProductCollectDetailReq) (*QueryProductCollectDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCollectDetail not implemented")
}
func (UnimplementedProductCollectServiceServer) QueryProductCollectList(context.Context, *QueryProductCollectListReq) (*QueryProductCollectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCollectList not implemented")
}
func (UnimplementedProductCollectServiceServer) mustEmbedUnimplementedProductCollectServiceServer() {}

// UnsafeProductCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCollectServiceServer will
// result in compilation errors.
type UnsafeProductCollectServiceServer interface {
	mustEmbedUnimplementedProductCollectServiceServer()
}

func RegisterProductCollectServiceServer(s grpc.ServiceRegistrar, srv ProductCollectServiceServer) {
	s.RegisterService(&ProductCollectService_ServiceDesc, srv)
}

func _ProductCollectService_AddProductCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).AddProductCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_AddProductCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).AddProductCollect(ctx, req.(*AddProductCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectService_DeleteProductCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).DeleteProductCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_DeleteProductCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).DeleteProductCollect(ctx, req.(*DeleteProductCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectService_QueryProductCollectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCollectDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).QueryProductCollectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_QueryProductCollectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).QueryProductCollectDetail(ctx, req.(*QueryProductCollectDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectService_QueryProductCollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCollectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).QueryProductCollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_QueryProductCollectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).QueryProductCollectList(ctx, req.(*QueryProductCollectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCollectService_ServiceDesc is the grpc.ServiceDesc for ProductCollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCollectService",
	HandlerType: (*ProductCollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductCollect",
			Handler:    _ProductCollectService_AddProductCollect_Handler,
		},
		{
			MethodName: "DeleteProductCollect",
			Handler:    _ProductCollectService_DeleteProductCollect_Handler,
		},
		{
			MethodName: "QueryProductCollectDetail",
			Handler:    _ProductCollectService_QueryProductCollectDetail_Handler,
		},
		{
			MethodName: "QueryProductCollectList",
			Handler:    _ProductCollectService_QueryProductCollectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductFullReductionService_AddProductFullReduction_FullMethodName       = "/pmsclient.ProductFullReductionService/AddProductFullReduction"
	ProductFullReductionService_DeleteProductFullReduction_FullMethodName    = "/pmsclient.ProductFullReductionService/DeleteProductFullReduction"
	ProductFullReductionService_QueryProductFullReductionList_FullMethodName = "/pmsclient.ProductFullReductionService/QueryProductFullReductionList"
)

// ProductFullReductionServiceClient is the client API for ProductFullReductionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductFullReductionServiceClient interface {
	// 添加产品满减表(只针对同商品)
	AddProductFullReduction(ctx context.Context, in *AddProductFullReductionReq, opts ...grpc.CallOption) (*AddProductFullReductionResp, error)
	// 删除产品满减表(只针对同商品)
	DeleteProductFullReduction(ctx context.Context, in *DeleteProductFullReductionReq, opts ...grpc.CallOption) (*DeleteProductFullReductionResp, error)
	// 查询产品满减表(只针对同商品)列表
	QueryProductFullReductionList(ctx context.Context, in *QueryProductFullReductionListReq, opts ...grpc.CallOption) (*QueryProductFullReductionListResp, error)
}

type productFullReductionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductFullReductionServiceClient(cc grpc.ClientConnInterface) ProductFullReductionServiceClient {
	return &productFullReductionServiceClient{cc}
}

func (c *productFullReductionServiceClient) AddProductFullReduction(ctx context.Context, in *AddProductFullReductionReq, opts ...grpc.CallOption) (*AddProductFullReductionResp, error) {
	out := new(AddProductFullReductionResp)
	err := c.cc.Invoke(ctx, ProductFullReductionService_AddProductFullReduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) DeleteProductFullReduction(ctx context.Context, in *DeleteProductFullReductionReq, opts ...grpc.CallOption) (*DeleteProductFullReductionResp, error) {
	out := new(DeleteProductFullReductionResp)
	err := c.cc.Invoke(ctx, ProductFullReductionService_DeleteProductFullReduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) QueryProductFullReductionList(ctx context.Context, in *QueryProductFullReductionListReq, opts ...grpc.CallOption) (*QueryProductFullReductionListResp, error) {
	out := new(QueryProductFullReductionListResp)
	err := c.cc.Invoke(ctx, ProductFullReductionService_QueryProductFullReductionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductFullReductionServiceServer is the server API for ProductFullReductionService service.
// All implementations must embed UnimplementedProductFullReductionServiceServer
// for forward compatibility
type ProductFullReductionServiceServer interface {
	// 添加产品满减表(只针对同商品)
	AddProductFullReduction(context.Context, *AddProductFullReductionReq) (*AddProductFullReductionResp, error)
	// 删除产品满减表(只针对同商品)
	DeleteProductFullReduction(context.Context, *DeleteProductFullReductionReq) (*DeleteProductFullReductionResp, error)
	// 查询产品满减表(只针对同商品)列表
	QueryProductFullReductionList(context.Context, *QueryProductFullReductionListReq) (*QueryProductFullReductionListResp, error)
	mustEmbedUnimplementedProductFullReductionServiceServer()
}

// UnimplementedProductFullReductionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductFullReductionServiceServer struct {
}

func (UnimplementedProductFullReductionServiceServer) AddProductFullReduction(context.Context, *AddProductFullReductionReq) (*AddProductFullReductionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductFullReduction not implemented")
}
func (UnimplementedProductFullReductionServiceServer) DeleteProductFullReduction(context.Context, *DeleteProductFullReductionReq) (*DeleteProductFullReductionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductFullReduction not implemented")
}
func (UnimplementedProductFullReductionServiceServer) QueryProductFullReductionList(context.Context, *QueryProductFullReductionListReq) (*QueryProductFullReductionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductFullReductionList not implemented")
}
func (UnimplementedProductFullReductionServiceServer) mustEmbedUnimplementedProductFullReductionServiceServer() {
}

// UnsafeProductFullReductionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductFullReductionServiceServer will
// result in compilation errors.
type UnsafeProductFullReductionServiceServer interface {
	mustEmbedUnimplementedProductFullReductionServiceServer()
}

func RegisterProductFullReductionServiceServer(s grpc.ServiceRegistrar, srv ProductFullReductionServiceServer) {
	s.RegisterService(&ProductFullReductionService_ServiceDesc, srv)
}

func _ProductFullReductionService_AddProductFullReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductFullReductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).AddProductFullReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFullReductionService_AddProductFullReduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).AddProductFullReduction(ctx, req.(*AddProductFullReductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_DeleteProductFullReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductFullReductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).DeleteProductFullReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFullReductionService_DeleteProductFullReduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).DeleteProductFullReduction(ctx, req.(*DeleteProductFullReductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_QueryProductFullReductionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductFullReductionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).QueryProductFullReductionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFullReductionService_QueryProductFullReductionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).QueryProductFullReductionList(ctx, req.(*QueryProductFullReductionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductFullReductionService_ServiceDesc is the grpc.ServiceDesc for ProductFullReductionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductFullReductionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductFullReductionService",
	HandlerType: (*ProductFullReductionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductFullReduction",
			Handler:    _ProductFullReductionService_AddProductFullReduction_Handler,
		},
		{
			MethodName: "DeleteProductFullReduction",
			Handler:    _ProductFullReductionService_DeleteProductFullReduction_Handler,
		},
		{
			MethodName: "QueryProductFullReductionList",
			Handler:    _ProductFullReductionService_QueryProductFullReductionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductLadderService_AddProductLadder_FullMethodName         = "/pmsclient.ProductLadderService/AddProductLadder"
	ProductLadderService_DeleteProductLadder_FullMethodName      = "/pmsclient.ProductLadderService/DeleteProductLadder"
	ProductLadderService_UpdateProductLadder_FullMethodName      = "/pmsclient.ProductLadderService/UpdateProductLadder"
	ProductLadderService_QueryProductLadderDetail_FullMethodName = "/pmsclient.ProductLadderService/QueryProductLadderDetail"
	ProductLadderService_QueryProductLadderList_FullMethodName   = "/pmsclient.ProductLadderService/QueryProductLadderList"
)

// ProductLadderServiceClient is the client API for ProductLadderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductLadderServiceClient interface {
	// 添加产品阶梯价格表(只针对同商品)
	AddProductLadder(ctx context.Context, in *AddProductLadderReq, opts ...grpc.CallOption) (*AddProductLadderResp, error)
	// 删除产品阶梯价格表(只针对同商品)
	DeleteProductLadder(ctx context.Context, in *DeleteProductLadderReq, opts ...grpc.CallOption) (*DeleteProductLadderResp, error)
	// 更新产品阶梯价格表(只针对同商品)
	UpdateProductLadder(ctx context.Context, in *UpdateProductLadderReq, opts ...grpc.CallOption) (*UpdateProductLadderResp, error)
	// 查询产品阶梯价格表(只针对同商品)详情
	QueryProductLadderDetail(ctx context.Context, in *QueryProductLadderDetailReq, opts ...grpc.CallOption) (*QueryProductLadderDetailResp, error)
	// 查询产品阶梯价格表(只针对同商品)列表
	QueryProductLadderList(ctx context.Context, in *QueryProductLadderListReq, opts ...grpc.CallOption) (*QueryProductLadderListResp, error)
}

type productLadderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductLadderServiceClient(cc grpc.ClientConnInterface) ProductLadderServiceClient {
	return &productLadderServiceClient{cc}
}

func (c *productLadderServiceClient) AddProductLadder(ctx context.Context, in *AddProductLadderReq, opts ...grpc.CallOption) (*AddProductLadderResp, error) {
	out := new(AddProductLadderResp)
	err := c.cc.Invoke(ctx, ProductLadderService_AddProductLadder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) DeleteProductLadder(ctx context.Context, in *DeleteProductLadderReq, opts ...grpc.CallOption) (*DeleteProductLadderResp, error) {
	out := new(DeleteProductLadderResp)
	err := c.cc.Invoke(ctx, ProductLadderService_DeleteProductLadder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) UpdateProductLadder(ctx context.Context, in *UpdateProductLadderReq, opts ...grpc.CallOption) (*UpdateProductLadderResp, error) {
	out := new(UpdateProductLadderResp)
	err := c.cc.Invoke(ctx, ProductLadderService_UpdateProductLadder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) QueryProductLadderDetail(ctx context.Context, in *QueryProductLadderDetailReq, opts ...grpc.CallOption) (*QueryProductLadderDetailResp, error) {
	out := new(QueryProductLadderDetailResp)
	err := c.cc.Invoke(ctx, ProductLadderService_QueryProductLadderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) QueryProductLadderList(ctx context.Context, in *QueryProductLadderListReq, opts ...grpc.CallOption) (*QueryProductLadderListResp, error) {
	out := new(QueryProductLadderListResp)
	err := c.cc.Invoke(ctx, ProductLadderService_QueryProductLadderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductLadderServiceServer is the server API for ProductLadderService service.
// All implementations must embed UnimplementedProductLadderServiceServer
// for forward compatibility
type ProductLadderServiceServer interface {
	// 添加产品阶梯价格表(只针对同商品)
	AddProductLadder(context.Context, *AddProductLadderReq) (*AddProductLadderResp, error)
	// 删除产品阶梯价格表(只针对同商品)
	DeleteProductLadder(context.Context, *DeleteProductLadderReq) (*DeleteProductLadderResp, error)
	// 更新产品阶梯价格表(只针对同商品)
	UpdateProductLadder(context.Context, *UpdateProductLadderReq) (*UpdateProductLadderResp, error)
	// 查询产品阶梯价格表(只针对同商品)详情
	QueryProductLadderDetail(context.Context, *QueryProductLadderDetailReq) (*QueryProductLadderDetailResp, error)
	// 查询产品阶梯价格表(只针对同商品)列表
	QueryProductLadderList(context.Context, *QueryProductLadderListReq) (*QueryProductLadderListResp, error)
	mustEmbedUnimplementedProductLadderServiceServer()
}

// UnimplementedProductLadderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductLadderServiceServer struct {
}

func (UnimplementedProductLadderServiceServer) AddProductLadder(context.Context, *AddProductLadderReq) (*AddProductLadderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductLadder not implemented")
}
func (UnimplementedProductLadderServiceServer) DeleteProductLadder(context.Context, *DeleteProductLadderReq) (*DeleteProductLadderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductLadder not implemented")
}
func (UnimplementedProductLadderServiceServer) UpdateProductLadder(context.Context, *UpdateProductLadderReq) (*UpdateProductLadderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductLadder not implemented")
}
func (UnimplementedProductLadderServiceServer) QueryProductLadderDetail(context.Context, *QueryProductLadderDetailReq) (*QueryProductLadderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductLadderDetail not implemented")
}
func (UnimplementedProductLadderServiceServer) QueryProductLadderList(context.Context, *QueryProductLadderListReq) (*QueryProductLadderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductLadderList not implemented")
}
func (UnimplementedProductLadderServiceServer) mustEmbedUnimplementedProductLadderServiceServer() {}

// UnsafeProductLadderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductLadderServiceServer will
// result in compilation errors.
type UnsafeProductLadderServiceServer interface {
	mustEmbedUnimplementedProductLadderServiceServer()
}

func RegisterProductLadderServiceServer(s grpc.ServiceRegistrar, srv ProductLadderServiceServer) {
	s.RegisterService(&ProductLadderService_ServiceDesc, srv)
}

func _ProductLadderService_AddProductLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductLadderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).AddProductLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_AddProductLadder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).AddProductLadder(ctx, req.(*AddProductLadderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_DeleteProductLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductLadderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).DeleteProductLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_DeleteProductLadder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).DeleteProductLadder(ctx, req.(*DeleteProductLadderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_UpdateProductLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductLadderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).UpdateProductLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_UpdateProductLadder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).UpdateProductLadder(ctx, req.(*UpdateProductLadderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_QueryProductLadderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductLadderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).QueryProductLadderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_QueryProductLadderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).QueryProductLadderDetail(ctx, req.(*QueryProductLadderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_QueryProductLadderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductLadderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).QueryProductLadderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_QueryProductLadderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).QueryProductLadderList(ctx, req.(*QueryProductLadderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductLadderService_ServiceDesc is the grpc.ServiceDesc for ProductLadderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductLadderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductLadderService",
	HandlerType: (*ProductLadderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductLadder",
			Handler:    _ProductLadderService_AddProductLadder_Handler,
		},
		{
			MethodName: "DeleteProductLadder",
			Handler:    _ProductLadderService_DeleteProductLadder_Handler,
		},
		{
			MethodName: "UpdateProductLadder",
			Handler:    _ProductLadderService_UpdateProductLadder_Handler,
		},
		{
			MethodName: "QueryProductLadderDetail",
			Handler:    _ProductLadderService_QueryProductLadderDetail_Handler,
		},
		{
			MethodName: "QueryProductLadderList",
			Handler:    _ProductLadderService_QueryProductLadderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductOperateLogService_AddProductOperateLog_FullMethodName         = "/pmsclient.ProductOperateLogService/AddProductOperateLog"
	ProductOperateLogService_DeleteProductOperateLog_FullMethodName      = "/pmsclient.ProductOperateLogService/DeleteProductOperateLog"
	ProductOperateLogService_QueryProductOperateLogDetail_FullMethodName = "/pmsclient.ProductOperateLogService/QueryProductOperateLogDetail"
	ProductOperateLogService_QueryProductOperateLogList_FullMethodName   = "/pmsclient.ProductOperateLogService/QueryProductOperateLogList"
)

// ProductOperateLogServiceClient is the client API for ProductOperateLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOperateLogServiceClient interface {
	// 添加
	AddProductOperateLog(ctx context.Context, in *AddProductOperateLogReq, opts ...grpc.CallOption) (*AddProductOperateLogResp, error)
	// 删除
	DeleteProductOperateLog(ctx context.Context, in *DeleteProductOperateLogReq, opts ...grpc.CallOption) (*DeleteProductOperateLogResp, error)
	// 查询详情
	QueryProductOperateLogDetail(ctx context.Context, in *QueryProductOperateLogDetailReq, opts ...grpc.CallOption) (*QueryProductOperateLogDetailResp, error)
	// 查询列表
	QueryProductOperateLogList(ctx context.Context, in *QueryProductOperateLogListReq, opts ...grpc.CallOption) (*QueryProductOperateLogListResp, error)
}

type productOperateLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOperateLogServiceClient(cc grpc.ClientConnInterface) ProductOperateLogServiceClient {
	return &productOperateLogServiceClient{cc}
}

func (c *productOperateLogServiceClient) AddProductOperateLog(ctx context.Context, in *AddProductOperateLogReq, opts ...grpc.CallOption) (*AddProductOperateLogResp, error) {
	out := new(AddProductOperateLogResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_AddProductOperateLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) DeleteProductOperateLog(ctx context.Context, in *DeleteProductOperateLogReq, opts ...grpc.CallOption) (*DeleteProductOperateLogResp, error) {
	out := new(DeleteProductOperateLogResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_DeleteProductOperateLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) QueryProductOperateLogDetail(ctx context.Context, in *QueryProductOperateLogDetailReq, opts ...grpc.CallOption) (*QueryProductOperateLogDetailResp, error) {
	out := new(QueryProductOperateLogDetailResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_QueryProductOperateLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) QueryProductOperateLogList(ctx context.Context, in *QueryProductOperateLogListReq, opts ...grpc.CallOption) (*QueryProductOperateLogListResp, error) {
	out := new(QueryProductOperateLogListResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_QueryProductOperateLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOperateLogServiceServer is the server API for ProductOperateLogService service.
// All implementations must embed UnimplementedProductOperateLogServiceServer
// for forward compatibility
type ProductOperateLogServiceServer interface {
	// 添加
	AddProductOperateLog(context.Context, *AddProductOperateLogReq) (*AddProductOperateLogResp, error)
	// 删除
	DeleteProductOperateLog(context.Context, *DeleteProductOperateLogReq) (*DeleteProductOperateLogResp, error)
	// 查询详情
	QueryProductOperateLogDetail(context.Context, *QueryProductOperateLogDetailReq) (*QueryProductOperateLogDetailResp, error)
	// 查询列表
	QueryProductOperateLogList(context.Context, *QueryProductOperateLogListReq) (*QueryProductOperateLogListResp, error)
	mustEmbedUnimplementedProductOperateLogServiceServer()
}

// UnimplementedProductOperateLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductOperateLogServiceServer struct {
}

func (UnimplementedProductOperateLogServiceServer) AddProductOperateLog(context.Context, *AddProductOperateLogReq) (*AddProductOperateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductOperateLog not implemented")
}
func (UnimplementedProductOperateLogServiceServer) DeleteProductOperateLog(context.Context, *DeleteProductOperateLogReq) (*DeleteProductOperateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductOperateLog not implemented")
}
func (UnimplementedProductOperateLogServiceServer) QueryProductOperateLogDetail(context.Context, *QueryProductOperateLogDetailReq) (*QueryProductOperateLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductOperateLogDetail not implemented")
}
func (UnimplementedProductOperateLogServiceServer) QueryProductOperateLogList(context.Context, *QueryProductOperateLogListReq) (*QueryProductOperateLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductOperateLogList not implemented")
}
func (UnimplementedProductOperateLogServiceServer) mustEmbedUnimplementedProductOperateLogServiceServer() {
}

// UnsafeProductOperateLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOperateLogServiceServer will
// result in compilation errors.
type UnsafeProductOperateLogServiceServer interface {
	mustEmbedUnimplementedProductOperateLogServiceServer()
}

func RegisterProductOperateLogServiceServer(s grpc.ServiceRegistrar, srv ProductOperateLogServiceServer) {
	s.RegisterService(&ProductOperateLogService_ServiceDesc, srv)
}

func _ProductOperateLogService_AddProductOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductOperateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).AddProductOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_AddProductOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).AddProductOperateLog(ctx, req.(*AddProductOperateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_DeleteProductOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductOperateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).DeleteProductOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_DeleteProductOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).DeleteProductOperateLog(ctx, req.(*DeleteProductOperateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_QueryProductOperateLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductOperateLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_QueryProductOperateLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogDetail(ctx, req.(*QueryProductOperateLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_QueryProductOperateLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductOperateLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_QueryProductOperateLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogList(ctx, req.(*QueryProductOperateLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOperateLogService_ServiceDesc is the grpc.ServiceDesc for ProductOperateLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOperateLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductOperateLogService",
	HandlerType: (*ProductOperateLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductOperateLog",
			Handler:    _ProductOperateLogService_AddProductOperateLog_Handler,
		},
		{
			MethodName: "DeleteProductOperateLog",
			Handler:    _ProductOperateLogService_DeleteProductOperateLog_Handler,
		},
		{
			MethodName: "QueryProductOperateLogDetail",
			Handler:    _ProductOperateLogService_QueryProductOperateLogDetail_Handler,
		},
		{
			MethodName: "QueryProductOperateLogList",
			Handler:    _ProductOperateLogService_QueryProductOperateLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductVertifyRecordService_AddProductVertifyRecord_FullMethodName          = "/pmsclient.ProductVertifyRecordService/AddProductVertifyRecord"
	ProductVertifyRecordService_DeleteProductVertifyRecord_FullMethodName       = "/pmsclient.ProductVertifyRecordService/DeleteProductVertifyRecord"
	ProductVertifyRecordService_UpdateProductVertifyRecord_FullMethodName       = "/pmsclient.ProductVertifyRecordService/UpdateProductVertifyRecord"
	ProductVertifyRecordService_UpdateProductVertifyRecordStatus_FullMethodName = "/pmsclient.ProductVertifyRecordService/UpdateProductVertifyRecordStatus"
	ProductVertifyRecordService_QueryProductVertifyRecordDetail_FullMethodName  = "/pmsclient.ProductVertifyRecordService/QueryProductVertifyRecordDetail"
	ProductVertifyRecordService_QueryProductVertifyRecordList_FullMethodName    = "/pmsclient.ProductVertifyRecordService/QueryProductVertifyRecordList"
)

// ProductVertifyRecordServiceClient is the client API for ProductVertifyRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductVertifyRecordServiceClient interface {
	// 添加商品审核记录
	AddProductVertifyRecord(ctx context.Context, in *AddProductVertifyRecordReq, opts ...grpc.CallOption) (*AddProductVertifyRecordResp, error)
	// 删除商品审核记录
	DeleteProductVertifyRecord(ctx context.Context, in *DeleteProductVertifyRecordReq, opts ...grpc.CallOption) (*DeleteProductVertifyRecordResp, error)
	// 更新商品审核记录
	UpdateProductVertifyRecord(ctx context.Context, in *UpdateProductVertifyRecordReq, opts ...grpc.CallOption) (*UpdateProductVertifyRecordResp, error)
	// 更新商品审核记录状态
	UpdateProductVertifyRecordStatus(ctx context.Context, in *UpdateProductVertifyRecordStatusReq, opts ...grpc.CallOption) (*UpdateProductVertifyRecordStatusResp, error)
	// 查询商品审核记录详情
	QueryProductVertifyRecordDetail(ctx context.Context, in *QueryProductVertifyRecordDetailReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordDetailResp, error)
	// 查询商品审核记录列表
	QueryProductVertifyRecordList(ctx context.Context, in *QueryProductVertifyRecordListReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordListResp, error)
}

type productVertifyRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductVertifyRecordServiceClient(cc grpc.ClientConnInterface) ProductVertifyRecordServiceClient {
	return &productVertifyRecordServiceClient{cc}
}

func (c *productVertifyRecordServiceClient) AddProductVertifyRecord(ctx context.Context, in *AddProductVertifyRecordReq, opts ...grpc.CallOption) (*AddProductVertifyRecordResp, error) {
	out := new(AddProductVertifyRecordResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_AddProductVertifyRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) DeleteProductVertifyRecord(ctx context.Context, in *DeleteProductVertifyRecordReq, opts ...grpc.CallOption) (*DeleteProductVertifyRecordResp, error) {
	out := new(DeleteProductVertifyRecordResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_DeleteProductVertifyRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) UpdateProductVertifyRecord(ctx context.Context, in *UpdateProductVertifyRecordReq, opts ...grpc.CallOption) (*UpdateProductVertifyRecordResp, error) {
	out := new(UpdateProductVertifyRecordResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_UpdateProductVertifyRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) UpdateProductVertifyRecordStatus(ctx context.Context, in *UpdateProductVertifyRecordStatusReq, opts ...grpc.CallOption) (*UpdateProductVertifyRecordStatusResp, error) {
	out := new(UpdateProductVertifyRecordStatusResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_UpdateProductVertifyRecordStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) QueryProductVertifyRecordDetail(ctx context.Context, in *QueryProductVertifyRecordDetailReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordDetailResp, error) {
	out := new(QueryProductVertifyRecordDetailResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_QueryProductVertifyRecordDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) QueryProductVertifyRecordList(ctx context.Context, in *QueryProductVertifyRecordListReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordListResp, error) {
	out := new(QueryProductVertifyRecordListResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_QueryProductVertifyRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductVertifyRecordServiceServer is the server API for ProductVertifyRecordService service.
// All implementations must embed UnimplementedProductVertifyRecordServiceServer
// for forward compatibility
type ProductVertifyRecordServiceServer interface {
	// 添加商品审核记录
	AddProductVertifyRecord(context.Context, *AddProductVertifyRecordReq) (*AddProductVertifyRecordResp, error)
	// 删除商品审核记录
	DeleteProductVertifyRecord(context.Context, *DeleteProductVertifyRecordReq) (*DeleteProductVertifyRecordResp, error)
	// 更新商品审核记录
	UpdateProductVertifyRecord(context.Context, *UpdateProductVertifyRecordReq) (*UpdateProductVertifyRecordResp, error)
	// 更新商品审核记录状态
	UpdateProductVertifyRecordStatus(context.Context, *UpdateProductVertifyRecordStatusReq) (*UpdateProductVertifyRecordStatusResp, error)
	// 查询商品审核记录详情
	QueryProductVertifyRecordDetail(context.Context, *QueryProductVertifyRecordDetailReq) (*QueryProductVertifyRecordDetailResp, error)
	// 查询商品审核记录列表
	QueryProductVertifyRecordList(context.Context, *QueryProductVertifyRecordListReq) (*QueryProductVertifyRecordListResp, error)
	mustEmbedUnimplementedProductVertifyRecordServiceServer()
}

// UnimplementedProductVertifyRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductVertifyRecordServiceServer struct {
}

func (UnimplementedProductVertifyRecordServiceServer) AddProductVertifyRecord(context.Context, *AddProductVertifyRecordReq) (*AddProductVertifyRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductVertifyRecord not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) DeleteProductVertifyRecord(context.Context, *DeleteProductVertifyRecordReq) (*DeleteProductVertifyRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductVertifyRecord not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) UpdateProductVertifyRecord(context.Context, *UpdateProductVertifyRecordReq) (*UpdateProductVertifyRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductVertifyRecord not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) UpdateProductVertifyRecordStatus(context.Context, *UpdateProductVertifyRecordStatusReq) (*UpdateProductVertifyRecordStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductVertifyRecordStatus not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) QueryProductVertifyRecordDetail(context.Context, *QueryProductVertifyRecordDetailReq) (*QueryProductVertifyRecordDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductVertifyRecordDetail not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) QueryProductVertifyRecordList(context.Context, *QueryProductVertifyRecordListReq) (*QueryProductVertifyRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductVertifyRecordList not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) mustEmbedUnimplementedProductVertifyRecordServiceServer() {
}

// UnsafeProductVertifyRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductVertifyRecordServiceServer will
// result in compilation errors.
type UnsafeProductVertifyRecordServiceServer interface {
	mustEmbedUnimplementedProductVertifyRecordServiceServer()
}

func RegisterProductVertifyRecordServiceServer(s grpc.ServiceRegistrar, srv ProductVertifyRecordServiceServer) {
	s.RegisterService(&ProductVertifyRecordService_ServiceDesc, srv)
}

func _ProductVertifyRecordService_AddProductVertifyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductVertifyRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).AddProductVertifyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_AddProductVertifyRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).AddProductVertifyRecord(ctx, req.(*AddProductVertifyRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_DeleteProductVertifyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductVertifyRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).DeleteProductVertifyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_DeleteProductVertifyRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).DeleteProductVertifyRecord(ctx, req.(*DeleteProductVertifyRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_UpdateProductVertifyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductVertifyRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).UpdateProductVertifyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_UpdateProductVertifyRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).UpdateProductVertifyRecord(ctx, req.(*UpdateProductVertifyRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_UpdateProductVertifyRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductVertifyRecordStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).UpdateProductVertifyRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_UpdateProductVertifyRecordStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).UpdateProductVertifyRecordStatus(ctx, req.(*UpdateProductVertifyRecordStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_QueryProductVertifyRecordDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductVertifyRecordDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_QueryProductVertifyRecordDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordDetail(ctx, req.(*QueryProductVertifyRecordDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_QueryProductVertifyRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductVertifyRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_QueryProductVertifyRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordList(ctx, req.(*QueryProductVertifyRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductVertifyRecordService_ServiceDesc is the grpc.ServiceDesc for ProductVertifyRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductVertifyRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductVertifyRecordService",
	HandlerType: (*ProductVertifyRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductVertifyRecord",
			Handler:    _ProductVertifyRecordService_AddProductVertifyRecord_Handler,
		},
		{
			MethodName: "DeleteProductVertifyRecord",
			Handler:    _ProductVertifyRecordService_DeleteProductVertifyRecord_Handler,
		},
		{
			MethodName: "UpdateProductVertifyRecord",
			Handler:    _ProductVertifyRecordService_UpdateProductVertifyRecord_Handler,
		},
		{
			MethodName: "UpdateProductVertifyRecordStatus",
			Handler:    _ProductVertifyRecordService_UpdateProductVertifyRecordStatus_Handler,
		},
		{
			MethodName: "QueryProductVertifyRecordDetail",
			Handler:    _ProductVertifyRecordService_QueryProductVertifyRecordDetail_Handler,
		},
		{
			MethodName: "QueryProductVertifyRecordList",
			Handler:    _ProductVertifyRecordService_QueryProductVertifyRecordList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	SkuStockService_AddSkuStock_FullMethodName                 = "/pmsclient.SkuStockService/AddSkuStock"
	SkuStockService_DeleteSkuStock_FullMethodName              = "/pmsclient.SkuStockService/DeleteSkuStock"
	SkuStockService_UpdateSkuStock_FullMethodName              = "/pmsclient.SkuStockService/UpdateSkuStock"
	SkuStockService_QuerySkuStockDetail_FullMethodName         = "/pmsclient.SkuStockService/QuerySkuStockDetail"
	SkuStockService_QuerySkuStockList_FullMethodName           = "/pmsclient.SkuStockService/QuerySkuStockList"
	SkuStockService_ReleaseSkuStockLock_FullMethodName         = "/pmsclient.SkuStockService/ReleaseSkuStockLock"
	SkuStockService_LockSkuStockLock_FullMethodName            = "/pmsclient.SkuStockService/LockSkuStockLock"
	SkuStockService_QuerySkuStockByProductSkuId_FullMethodName = "/pmsclient.SkuStockService/QuerySkuStockByProductSkuId"
)

// SkuStockServiceClient is the client API for SkuStockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkuStockServiceClient interface {
	// 添加sku的库存
	AddSkuStock(ctx context.Context, in *AddSkuStockReq, opts ...grpc.CallOption) (*AddSkuStockResp, error)
	// 删除sku的库存
	DeleteSkuStock(ctx context.Context, in *DeleteSkuStockReq, opts ...grpc.CallOption) (*DeleteSkuStockResp, error)
	// 更新sku的库存
	UpdateSkuStock(ctx context.Context, in *UpdateSkuStockReq, opts ...grpc.CallOption) (*UpdateSkuStockResp, error)
	// 查询sku的库存详情
	QuerySkuStockDetail(ctx context.Context, in *QuerySkuStockDetailReq, opts ...grpc.CallOption) (*QuerySkuStockDetailResp, error)
	// 查询sku的库存列表
	QuerySkuStockList(ctx context.Context, in *QuerySkuStockListReq, opts ...grpc.CallOption) (*QuerySkuStockListResp, error)
	// 取消订单的时候,释放库存
	ReleaseSkuStockLock(ctx context.Context, in *ReleaseSkuStockLockReq, opts ...grpc.CallOption) (*ReleaseSkuStockLockResp, error)
	// 下单的时候,锁定库存
	LockSkuStockLock(ctx context.Context, in *LockSkuStockLockReq, opts ...grpc.CallOption) (*LockSkuStockLockResp, error)
	// 根据ProductSkuId查询sku
	QuerySkuStockByProductSkuId(ctx context.Context, in *QuerySkuStockByProductSkuIdReq, opts ...grpc.CallOption) (*SkuStockListData, error)
}

type skuStockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkuStockServiceClient(cc grpc.ClientConnInterface) SkuStockServiceClient {
	return &skuStockServiceClient{cc}
}

func (c *skuStockServiceClient) AddSkuStock(ctx context.Context, in *AddSkuStockReq, opts ...grpc.CallOption) (*AddSkuStockResp, error) {
	out := new(AddSkuStockResp)
	err := c.cc.Invoke(ctx, SkuStockService_AddSkuStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) DeleteSkuStock(ctx context.Context, in *DeleteSkuStockReq, opts ...grpc.CallOption) (*DeleteSkuStockResp, error) {
	out := new(DeleteSkuStockResp)
	err := c.cc.Invoke(ctx, SkuStockService_DeleteSkuStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) UpdateSkuStock(ctx context.Context, in *UpdateSkuStockReq, opts ...grpc.CallOption) (*UpdateSkuStockResp, error) {
	out := new(UpdateSkuStockResp)
	err := c.cc.Invoke(ctx, SkuStockService_UpdateSkuStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) QuerySkuStockDetail(ctx context.Context, in *QuerySkuStockDetailReq, opts ...grpc.CallOption) (*QuerySkuStockDetailResp, error) {
	out := new(QuerySkuStockDetailResp)
	err := c.cc.Invoke(ctx, SkuStockService_QuerySkuStockDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) QuerySkuStockList(ctx context.Context, in *QuerySkuStockListReq, opts ...grpc.CallOption) (*QuerySkuStockListResp, error) {
	out := new(QuerySkuStockListResp)
	err := c.cc.Invoke(ctx, SkuStockService_QuerySkuStockList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) ReleaseSkuStockLock(ctx context.Context, in *ReleaseSkuStockLockReq, opts ...grpc.CallOption) (*ReleaseSkuStockLockResp, error) {
	out := new(ReleaseSkuStockLockResp)
	err := c.cc.Invoke(ctx, SkuStockService_ReleaseSkuStockLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) LockSkuStockLock(ctx context.Context, in *LockSkuStockLockReq, opts ...grpc.CallOption) (*LockSkuStockLockResp, error) {
	out := new(LockSkuStockLockResp)
	err := c.cc.Invoke(ctx, SkuStockService_LockSkuStockLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) QuerySkuStockByProductSkuId(ctx context.Context, in *QuerySkuStockByProductSkuIdReq, opts ...grpc.CallOption) (*SkuStockListData, error) {
	out := new(SkuStockListData)
	err := c.cc.Invoke(ctx, SkuStockService_QuerySkuStockByProductSkuId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkuStockServiceServer is the server API for SkuStockService service.
// All implementations must embed UnimplementedSkuStockServiceServer
// for forward compatibility
type SkuStockServiceServer interface {
	// 添加sku的库存
	AddSkuStock(context.Context, *AddSkuStockReq) (*AddSkuStockResp, error)
	// 删除sku的库存
	DeleteSkuStock(context.Context, *DeleteSkuStockReq) (*DeleteSkuStockResp, error)
	// 更新sku的库存
	UpdateSkuStock(context.Context, *UpdateSkuStockReq) (*UpdateSkuStockResp, error)
	// 查询sku的库存详情
	QuerySkuStockDetail(context.Context, *QuerySkuStockDetailReq) (*QuerySkuStockDetailResp, error)
	// 查询sku的库存列表
	QuerySkuStockList(context.Context, *QuerySkuStockListReq) (*QuerySkuStockListResp, error)
	// 取消订单的时候,释放库存
	ReleaseSkuStockLock(context.Context, *ReleaseSkuStockLockReq) (*ReleaseSkuStockLockResp, error)
	// 下单的时候,锁定库存
	LockSkuStockLock(context.Context, *LockSkuStockLockReq) (*LockSkuStockLockResp, error)
	// 根据ProductSkuId查询sku
	QuerySkuStockByProductSkuId(context.Context, *QuerySkuStockByProductSkuIdReq) (*SkuStockListData, error)
	mustEmbedUnimplementedSkuStockServiceServer()
}

// UnimplementedSkuStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSkuStockServiceServer struct {
}

func (UnimplementedSkuStockServiceServer) AddSkuStock(context.Context, *AddSkuStockReq) (*AddSkuStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkuStock not implemented")
}
func (UnimplementedSkuStockServiceServer) DeleteSkuStock(context.Context, *DeleteSkuStockReq) (*DeleteSkuStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkuStock not implemented")
}
func (UnimplementedSkuStockServiceServer) UpdateSkuStock(context.Context, *UpdateSkuStockReq) (*UpdateSkuStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkuStock not implemented")
}
func (UnimplementedSkuStockServiceServer) QuerySkuStockDetail(context.Context, *QuerySkuStockDetailReq) (*QuerySkuStockDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySkuStockDetail not implemented")
}
func (UnimplementedSkuStockServiceServer) QuerySkuStockList(context.Context, *QuerySkuStockListReq) (*QuerySkuStockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySkuStockList not implemented")
}
func (UnimplementedSkuStockServiceServer) ReleaseSkuStockLock(context.Context, *ReleaseSkuStockLockReq) (*ReleaseSkuStockLockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSkuStockLock not implemented")
}
func (UnimplementedSkuStockServiceServer) LockSkuStockLock(context.Context, *LockSkuStockLockReq) (*LockSkuStockLockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSkuStockLock not implemented")
}
func (UnimplementedSkuStockServiceServer) QuerySkuStockByProductSkuId(context.Context, *QuerySkuStockByProductSkuIdReq) (*SkuStockListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySkuStockByProductSkuId not implemented")
}
func (UnimplementedSkuStockServiceServer) mustEmbedUnimplementedSkuStockServiceServer() {}

// UnsafeSkuStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkuStockServiceServer will
// result in compilation errors.
type UnsafeSkuStockServiceServer interface {
	mustEmbedUnimplementedSkuStockServiceServer()
}

func RegisterSkuStockServiceServer(s grpc.ServiceRegistrar, srv SkuStockServiceServer) {
	s.RegisterService(&SkuStockService_ServiceDesc, srv)
}

func _SkuStockService_AddSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkuStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).AddSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_AddSkuStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).AddSkuStock(ctx, req.(*AddSkuStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_DeleteSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkuStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).DeleteSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_DeleteSkuStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).DeleteSkuStock(ctx, req.(*DeleteSkuStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_UpdateSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkuStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).UpdateSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_UpdateSkuStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).UpdateSkuStock(ctx, req.(*UpdateSkuStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_QuerySkuStockDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySkuStockDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).QuerySkuStockDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_QuerySkuStockDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).QuerySkuStockDetail(ctx, req.(*QuerySkuStockDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_QuerySkuStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySkuStockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).QuerySkuStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_QuerySkuStockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).QuerySkuStockList(ctx, req.(*QuerySkuStockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_ReleaseSkuStockLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSkuStockLockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).ReleaseSkuStockLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_ReleaseSkuStockLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).ReleaseSkuStockLock(ctx, req.(*ReleaseSkuStockLockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_LockSkuStockLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockSkuStockLockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).LockSkuStockLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_LockSkuStockLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).LockSkuStockLock(ctx, req.(*LockSkuStockLockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_QuerySkuStockByProductSkuId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySkuStockByProductSkuIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).QuerySkuStockByProductSkuId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkuStockService_QuerySkuStockByProductSkuId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).QuerySkuStockByProductSkuId(ctx, req.(*QuerySkuStockByProductSkuIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SkuStockService_ServiceDesc is the grpc.ServiceDesc for SkuStockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkuStockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.SkuStockService",
	HandlerType: (*SkuStockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSkuStock",
			Handler:    _SkuStockService_AddSkuStock_Handler,
		},
		{
			MethodName: "DeleteSkuStock",
			Handler:    _SkuStockService_DeleteSkuStock_Handler,
		},
		{
			MethodName: "UpdateSkuStock",
			Handler:    _SkuStockService_UpdateSkuStock_Handler,
		},
		{
			MethodName: "QuerySkuStockDetail",
			Handler:    _SkuStockService_QuerySkuStockDetail_Handler,
		},
		{
			MethodName: "QuerySkuStockList",
			Handler:    _SkuStockService_QuerySkuStockList_Handler,
		},
		{
			MethodName: "ReleaseSkuStockLock",
			Handler:    _SkuStockService_ReleaseSkuStockLock_Handler,
		},
		{
			MethodName: "LockSkuStockLock",
			Handler:    _SkuStockService_LockSkuStockLock_Handler,
		},
		{
			MethodName: "QuerySkuStockByProductSkuId",
			Handler:    _SkuStockService_QuerySkuStockByProductSkuId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

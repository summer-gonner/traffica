syntax = "proto3";

package main;

option go_package = "./proto";

// 添加sku的库存
message AddSkuStockReq {
  int32 stock = 1; //库存
  int32 lock_stock = 2; //锁定库存
  int32 low_stock = 3; //预警库存
  string pic = 4; //展示图片
  int64 price = 5; //
  int64 product_id = 6; //
  int64 promotion_price = 7; //单品促销价格
  int32 sale = 8; //销量
  string sku_code = 9; //sku编码
  string sp_data = 10; //商品销售属性，json格式


}

message AddSkuStockResp {
  string pong = 1;
}

// 删除sku的库存
message DeleteSkuStockReq {
  repeated int64 ids = 1;
}

message DeleteSkuStockResp {
  string pong = 1;
}

// 更新sku的库存
message UpdateSkuStockReq {
  repeated UpdateSkuStockData    SkuStockList = 1;

}
message UpdateSkuStockData {
  int64 id = 1; //
  int32 lock_stock = 2; //锁定库存
  int32 low_stock = 3; //预警库存
  string pic = 4; //展示图片
  int64 price = 5; //
  int64 product_id = 6; //
  int64 promotion_price = 7; //单品促销价格
  int32 sale = 8; //销量
  string sku_code = 9; //sku编码
  string sp_data = 10; //商品销售属性，json格式
  int32 stock = 11; //库存

}


message UpdateSkuStockResp {
  string pong = 1;
}

// 查询sku的库存详情
message QuerySkuStockDetailReq {
    int64 id = 1;
}

message QuerySkuStockDetailResp {
  int64 id = 1; //
  int32 lock_stock = 2; //锁定库存
  int32 low_stock = 3; //预警库存
  string pic = 4; //展示图片
  int64 price = 5; //
  int64 product_id = 6; //
  int64 promotion_price = 7; //单品促销价格
  int32 sale = 8; //销量
  string sku_code = 9; //sku编码
  string sp_data = 10; //商品销售属性，json格式
  int32 stock = 11; //库存

}

// 分页查询sku的库存列表
message QuerySkuStockListReq {
  int64 product_id = 1; //
  string sku_code = 2; //sku编码

}

message SkuStockListData {
  int64 id = 1; //
  int32 lock_stock = 2; //锁定库存
  int32 low_stock = 3; //预警库存
  string pic = 4; //展示图片
  int64 price = 5; //
  int64 product_id = 6; //
  int64 promotion_price = 7; //单品促销价格
  int32 sale = 8; //销量
  string sku_code = 9; //sku编码
  string sp_data = 10; //商品销售属性，json格式
  int32 stock = 11; //库存

}

message QuerySkuStockListResp {
  int64 total = 1;
  repeated  SkuStockListData list = 2;
}

message ReleaseSkuStockLockReq {
  repeated ReleaseSkuStockLockData data = 1;
}

message ReleaseSkuStockLockData {
  int64    ProductSkuId = 1;
  int32    ProductQuantity = 2;
}
message ReleaseSkuStockLockResp {
  string pong = 1;
}

message LockSkuStockLockReq {
  repeated LockSkuStockLockData data = 1;
}

message LockSkuStockLockData {
  int64    ProductSkuId = 1;
  int32    ProductQuantity = 2;
}
message LockSkuStockLockResp {
  string pong = 1;
}

message QuerySkuStockByProductSkuIdReq {
  int64    ProductSkuId = 1;
}

// sku的库存
service SkuStockService {
  // 添加sku的库存
  rpc AddSkuStock(AddSkuStockReq) returns (AddSkuStockResp){}
  // 删除sku的库存
  rpc DeleteSkuStock(DeleteSkuStockReq) returns (DeleteSkuStockResp){}
  // 更新sku的库存
  rpc UpdateSkuStock(UpdateSkuStockReq) returns (UpdateSkuStockResp ){}
  // 查询sku的库存详情
   rpc QuerySkuStockDetail(QuerySkuStockDetailReq) returns (QuerySkuStockDetailResp){}
  // 查询sku的库存列表
  rpc QuerySkuStockList(QuerySkuStockListReq) returns (QuerySkuStockListResp){}


  //取消订单的时候,释放库存
  rpc ReleaseSkuStockLock(ReleaseSkuStockLockReq) returns(ReleaseSkuStockLockResp);
  //下单的时候,锁定库存
  rpc LockSkuStockLock(LockSkuStockLockReq) returns(LockSkuStockLockResp);
  //根据ProductSkuId查询sku
  rpc QuerySkuStockByProductSkuId(QuerySkuStockByProductSkuIdReq) returns(SkuStockListData);

}

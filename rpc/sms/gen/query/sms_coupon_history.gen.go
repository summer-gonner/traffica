// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsCouponHistory(db *gorm.DB, opts ...gen.DOOption) smsCouponHistory {
	_smsCouponHistory := smsCouponHistory{}

	_smsCouponHistory.smsCouponHistoryDo.UseDB(db, opts...)
	_smsCouponHistory.smsCouponHistoryDo.UseModel(&model.SmsCouponHistory{})

	tableName := _smsCouponHistory.smsCouponHistoryDo.TableName()
	_smsCouponHistory.ALL = field.NewAsterisk(tableName)
	_smsCouponHistory.ID = field.NewInt64(tableName, "id")
	_smsCouponHistory.CouponID = field.NewInt64(tableName, "coupon_id")
	_smsCouponHistory.MemberID = field.NewInt64(tableName, "member_id")
	_smsCouponHistory.CouponCode = field.NewString(tableName, "coupon_code")
	_smsCouponHistory.MemberNickname = field.NewString(tableName, "member_nickname")
	_smsCouponHistory.GetType = field.NewInt32(tableName, "get_type")
	_smsCouponHistory.CreateTime = field.NewTime(tableName, "create_time")
	_smsCouponHistory.UseStatus = field.NewInt32(tableName, "use_status")
	_smsCouponHistory.UseTime = field.NewTime(tableName, "use_time")
	_smsCouponHistory.OrderID = field.NewInt64(tableName, "order_id")
	_smsCouponHistory.OrderSn = field.NewString(tableName, "order_sn")

	_smsCouponHistory.fillFieldMap()

	return _smsCouponHistory
}

// smsCouponHistory 优惠券使用、领取历史表
type smsCouponHistory struct {
	smsCouponHistoryDo smsCouponHistoryDo

	ALL            field.Asterisk
	ID             field.Int64
	CouponID       field.Int64  // 优惠券id
	MemberID       field.Int64  // 会员id
	CouponCode     field.String // 优惠码
	MemberNickname field.String // 领取人昵称
	GetType        field.Int32  // 获取类型：0->后台赠送；1->主动获取
	CreateTime     field.Time   // 领取时间
	UseStatus      field.Int32  // 使用状态：0->未使用；1->已使用；2->已过期
	UseTime        field.Time   // 使用时间
	OrderID        field.Int64  // 订单编号
	OrderSn        field.String // 订单号码

	fieldMap map[string]field.Expr
}

func (s smsCouponHistory) Table(newTableName string) *smsCouponHistory {
	s.smsCouponHistoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponHistory) As(alias string) *smsCouponHistory {
	s.smsCouponHistoryDo.DO = *(s.smsCouponHistoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponHistory) updateTableName(table string) *smsCouponHistory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CouponID = field.NewInt64(table, "coupon_id")
	s.MemberID = field.NewInt64(table, "member_id")
	s.CouponCode = field.NewString(table, "coupon_code")
	s.MemberNickname = field.NewString(table, "member_nickname")
	s.GetType = field.NewInt32(table, "get_type")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UseStatus = field.NewInt32(table, "use_status")
	s.UseTime = field.NewTime(table, "use_time")
	s.OrderID = field.NewInt64(table, "order_id")
	s.OrderSn = field.NewString(table, "order_sn")

	s.fillFieldMap()

	return s
}

func (s *smsCouponHistory) WithContext(ctx context.Context) ISmsCouponHistoryDo {
	return s.smsCouponHistoryDo.WithContext(ctx)
}

func (s smsCouponHistory) TableName() string { return s.smsCouponHistoryDo.TableName() }

func (s smsCouponHistory) Alias() string { return s.smsCouponHistoryDo.Alias() }

func (s smsCouponHistory) Columns(cols ...field.Expr) gen.Columns {
	return s.smsCouponHistoryDo.Columns(cols...)
}

func (s *smsCouponHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponHistory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["coupon_code"] = s.CouponCode
	s.fieldMap["member_nickname"] = s.MemberNickname
	s.fieldMap["get_type"] = s.GetType
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["use_status"] = s.UseStatus
	s.fieldMap["use_time"] = s.UseTime
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["order_sn"] = s.OrderSn
}

func (s smsCouponHistory) clone(db *gorm.DB) smsCouponHistory {
	s.smsCouponHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponHistory) replaceDB(db *gorm.DB) smsCouponHistory {
	s.smsCouponHistoryDo.ReplaceDB(db)
	return s
}

type smsCouponHistoryDo struct{ gen.DO }

type ISmsCouponHistoryDo interface {
	gen.SubQuery
	Debug() ISmsCouponHistoryDo
	WithContext(ctx context.Context) ISmsCouponHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponHistoryDo
	WriteDB() ISmsCouponHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponHistoryDo
	Not(conds ...gen.Condition) ISmsCouponHistoryDo
	Or(conds ...gen.Condition) ISmsCouponHistoryDo
	Select(conds ...field.Expr) ISmsCouponHistoryDo
	Where(conds ...gen.Condition) ISmsCouponHistoryDo
	Order(conds ...field.Expr) ISmsCouponHistoryDo
	Distinct(cols ...field.Expr) ISmsCouponHistoryDo
	Omit(cols ...field.Expr) ISmsCouponHistoryDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponHistoryDo
	Group(cols ...field.Expr) ISmsCouponHistoryDo
	Having(conds ...gen.Condition) ISmsCouponHistoryDo
	Limit(limit int) ISmsCouponHistoryDo
	Offset(offset int) ISmsCouponHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponHistoryDo
	Unscoped() ISmsCouponHistoryDo
	Create(values ...*model.SmsCouponHistory) error
	CreateInBatches(values []*model.SmsCouponHistory, batchSize int) error
	Save(values ...*model.SmsCouponHistory) error
	First() (*model.SmsCouponHistory, error)
	Take() (*model.SmsCouponHistory, error)
	Last() (*model.SmsCouponHistory, error)
	Find() ([]*model.SmsCouponHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponHistory, err error)
	FindInBatches(result *[]*model.SmsCouponHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponHistoryDo
	Assign(attrs ...field.AssignExpr) ISmsCouponHistoryDo
	Joins(fields ...field.RelationField) ISmsCouponHistoryDo
	Preload(fields ...field.RelationField) ISmsCouponHistoryDo
	FirstOrInit() (*model.SmsCouponHistory, error)
	FirstOrCreate() (*model.SmsCouponHistory, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponHistoryDo) Debug() ISmsCouponHistoryDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponHistoryDo) WithContext(ctx context.Context) ISmsCouponHistoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponHistoryDo) ReadDB() ISmsCouponHistoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponHistoryDo) WriteDB() ISmsCouponHistoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponHistoryDo) Session(config *gorm.Session) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponHistoryDo) Clauses(conds ...clause.Expression) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponHistoryDo) Returning(value interface{}, columns ...string) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponHistoryDo) Not(conds ...gen.Condition) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponHistoryDo) Or(conds ...gen.Condition) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponHistoryDo) Select(conds ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponHistoryDo) Where(conds ...gen.Condition) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponHistoryDo) Order(conds ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponHistoryDo) Distinct(cols ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponHistoryDo) Omit(cols ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponHistoryDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponHistoryDo) Group(cols ...field.Expr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponHistoryDo) Having(conds ...gen.Condition) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponHistoryDo) Limit(limit int) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponHistoryDo) Offset(offset int) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponHistoryDo) Unscoped() ISmsCouponHistoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponHistoryDo) Create(values ...*model.SmsCouponHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponHistoryDo) CreateInBatches(values []*model.SmsCouponHistory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponHistoryDo) Save(values ...*model.SmsCouponHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponHistoryDo) First() (*model.SmsCouponHistory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponHistory), nil
	}
}

func (s smsCouponHistoryDo) Take() (*model.SmsCouponHistory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponHistory), nil
	}
}

func (s smsCouponHistoryDo) Last() (*model.SmsCouponHistory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponHistory), nil
	}
}

func (s smsCouponHistoryDo) Find() ([]*model.SmsCouponHistory, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponHistory), err
}

func (s smsCouponHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponHistory, err error) {
	buf := make([]*model.SmsCouponHistory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponHistoryDo) FindInBatches(result *[]*model.SmsCouponHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponHistoryDo) Attrs(attrs ...field.AssignExpr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponHistoryDo) Assign(attrs ...field.AssignExpr) ISmsCouponHistoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponHistoryDo) Joins(fields ...field.RelationField) ISmsCouponHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponHistoryDo) Preload(fields ...field.RelationField) ISmsCouponHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponHistoryDo) FirstOrInit() (*model.SmsCouponHistory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponHistory), nil
	}
}

func (s smsCouponHistoryDo) FirstOrCreate() (*model.SmsCouponHistory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponHistory), nil
	}
}

func (s smsCouponHistoryDo) FindByPage(offset int, limit int) (result []*model.SmsCouponHistory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponHistoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponHistoryDo) Delete(models ...*model.SmsCouponHistory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponHistoryDo) withDO(do gen.Dao) *smsCouponHistoryDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsCouponProductCategoryRelation(db *gorm.DB, opts ...gen.DOOption) smsCouponProductCategoryRelation {
	_smsCouponProductCategoryRelation := smsCouponProductCategoryRelation{}

	_smsCouponProductCategoryRelation.smsCouponProductCategoryRelationDo.UseDB(db, opts...)
	_smsCouponProductCategoryRelation.smsCouponProductCategoryRelationDo.UseModel(&model.SmsCouponProductCategoryRelation{})

	tableName := _smsCouponProductCategoryRelation.smsCouponProductCategoryRelationDo.TableName()
	_smsCouponProductCategoryRelation.ALL = field.NewAsterisk(tableName)
	_smsCouponProductCategoryRelation.ID = field.NewInt64(tableName, "id")
	_smsCouponProductCategoryRelation.CouponID = field.NewInt64(tableName, "coupon_id")
	_smsCouponProductCategoryRelation.ProductCategoryID = field.NewInt64(tableName, "product_category_id")
	_smsCouponProductCategoryRelation.ProductCategoryName = field.NewString(tableName, "product_category_name")
	_smsCouponProductCategoryRelation.ParentCategoryName = field.NewString(tableName, "parent_category_name")

	_smsCouponProductCategoryRelation.fillFieldMap()

	return _smsCouponProductCategoryRelation
}

// smsCouponProductCategoryRelation 优惠券和产品分类关系表
type smsCouponProductCategoryRelation struct {
	smsCouponProductCategoryRelationDo smsCouponProductCategoryRelationDo

	ALL                 field.Asterisk
	ID                  field.Int64
	CouponID            field.Int64  // 优惠券id
	ProductCategoryID   field.Int64  // 产品分类id
	ProductCategoryName field.String // 产品分类名称
	ParentCategoryName  field.String // 父分类名称

	fieldMap map[string]field.Expr
}

func (s smsCouponProductCategoryRelation) Table(newTableName string) *smsCouponProductCategoryRelation {
	s.smsCouponProductCategoryRelationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponProductCategoryRelation) As(alias string) *smsCouponProductCategoryRelation {
	s.smsCouponProductCategoryRelationDo.DO = *(s.smsCouponProductCategoryRelationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponProductCategoryRelation) updateTableName(table string) *smsCouponProductCategoryRelation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CouponID = field.NewInt64(table, "coupon_id")
	s.ProductCategoryID = field.NewInt64(table, "product_category_id")
	s.ProductCategoryName = field.NewString(table, "product_category_name")
	s.ParentCategoryName = field.NewString(table, "parent_category_name")

	s.fillFieldMap()

	return s
}

func (s *smsCouponProductCategoryRelation) WithContext(ctx context.Context) ISmsCouponProductCategoryRelationDo {
	return s.smsCouponProductCategoryRelationDo.WithContext(ctx)
}

func (s smsCouponProductCategoryRelation) TableName() string {
	return s.smsCouponProductCategoryRelationDo.TableName()
}

func (s smsCouponProductCategoryRelation) Alias() string {
	return s.smsCouponProductCategoryRelationDo.Alias()
}

func (s smsCouponProductCategoryRelation) Columns(cols ...field.Expr) gen.Columns {
	return s.smsCouponProductCategoryRelationDo.Columns(cols...)
}

func (s *smsCouponProductCategoryRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponProductCategoryRelation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["product_category_id"] = s.ProductCategoryID
	s.fieldMap["product_category_name"] = s.ProductCategoryName
	s.fieldMap["parent_category_name"] = s.ParentCategoryName
}

func (s smsCouponProductCategoryRelation) clone(db *gorm.DB) smsCouponProductCategoryRelation {
	s.smsCouponProductCategoryRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponProductCategoryRelation) replaceDB(db *gorm.DB) smsCouponProductCategoryRelation {
	s.smsCouponProductCategoryRelationDo.ReplaceDB(db)
	return s
}

type smsCouponProductCategoryRelationDo struct{ gen.DO }

type ISmsCouponProductCategoryRelationDo interface {
	gen.SubQuery
	Debug() ISmsCouponProductCategoryRelationDo
	WithContext(ctx context.Context) ISmsCouponProductCategoryRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponProductCategoryRelationDo
	WriteDB() ISmsCouponProductCategoryRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponProductCategoryRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponProductCategoryRelationDo
	Not(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo
	Or(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo
	Select(conds ...field.Expr) ISmsCouponProductCategoryRelationDo
	Where(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo
	Order(conds ...field.Expr) ISmsCouponProductCategoryRelationDo
	Distinct(cols ...field.Expr) ISmsCouponProductCategoryRelationDo
	Omit(cols ...field.Expr) ISmsCouponProductCategoryRelationDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponProductCategoryRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductCategoryRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductCategoryRelationDo
	Group(cols ...field.Expr) ISmsCouponProductCategoryRelationDo
	Having(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo
	Limit(limit int) ISmsCouponProductCategoryRelationDo
	Offset(offset int) ISmsCouponProductCategoryRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponProductCategoryRelationDo
	Unscoped() ISmsCouponProductCategoryRelationDo
	Create(values ...*model.SmsCouponProductCategoryRelation) error
	CreateInBatches(values []*model.SmsCouponProductCategoryRelation, batchSize int) error
	Save(values ...*model.SmsCouponProductCategoryRelation) error
	First() (*model.SmsCouponProductCategoryRelation, error)
	Take() (*model.SmsCouponProductCategoryRelation, error)
	Last() (*model.SmsCouponProductCategoryRelation, error)
	Find() ([]*model.SmsCouponProductCategoryRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponProductCategoryRelation, err error)
	FindInBatches(result *[]*model.SmsCouponProductCategoryRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponProductCategoryRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponProductCategoryRelationDo
	Assign(attrs ...field.AssignExpr) ISmsCouponProductCategoryRelationDo
	Joins(fields ...field.RelationField) ISmsCouponProductCategoryRelationDo
	Preload(fields ...field.RelationField) ISmsCouponProductCategoryRelationDo
	FirstOrInit() (*model.SmsCouponProductCategoryRelation, error)
	FirstOrCreate() (*model.SmsCouponProductCategoryRelation, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponProductCategoryRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponProductCategoryRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponProductCategoryRelationDo) Debug() ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponProductCategoryRelationDo) WithContext(ctx context.Context) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponProductCategoryRelationDo) ReadDB() ISmsCouponProductCategoryRelationDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponProductCategoryRelationDo) WriteDB() ISmsCouponProductCategoryRelationDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponProductCategoryRelationDo) Session(config *gorm.Session) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponProductCategoryRelationDo) Clauses(conds ...clause.Expression) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponProductCategoryRelationDo) Returning(value interface{}, columns ...string) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponProductCategoryRelationDo) Not(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponProductCategoryRelationDo) Or(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponProductCategoryRelationDo) Select(conds ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponProductCategoryRelationDo) Where(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponProductCategoryRelationDo) Order(conds ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponProductCategoryRelationDo) Distinct(cols ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponProductCategoryRelationDo) Omit(cols ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponProductCategoryRelationDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponProductCategoryRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponProductCategoryRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponProductCategoryRelationDo) Group(cols ...field.Expr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponProductCategoryRelationDo) Having(conds ...gen.Condition) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponProductCategoryRelationDo) Limit(limit int) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponProductCategoryRelationDo) Offset(offset int) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponProductCategoryRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponProductCategoryRelationDo) Unscoped() ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponProductCategoryRelationDo) Create(values ...*model.SmsCouponProductCategoryRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponProductCategoryRelationDo) CreateInBatches(values []*model.SmsCouponProductCategoryRelation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponProductCategoryRelationDo) Save(values ...*model.SmsCouponProductCategoryRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponProductCategoryRelationDo) First() (*model.SmsCouponProductCategoryRelation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductCategoryRelation), nil
	}
}

func (s smsCouponProductCategoryRelationDo) Take() (*model.SmsCouponProductCategoryRelation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductCategoryRelation), nil
	}
}

func (s smsCouponProductCategoryRelationDo) Last() (*model.SmsCouponProductCategoryRelation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductCategoryRelation), nil
	}
}

func (s smsCouponProductCategoryRelationDo) Find() ([]*model.SmsCouponProductCategoryRelation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponProductCategoryRelation), err
}

func (s smsCouponProductCategoryRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponProductCategoryRelation, err error) {
	buf := make([]*model.SmsCouponProductCategoryRelation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponProductCategoryRelationDo) FindInBatches(result *[]*model.SmsCouponProductCategoryRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponProductCategoryRelationDo) Attrs(attrs ...field.AssignExpr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponProductCategoryRelationDo) Assign(attrs ...field.AssignExpr) ISmsCouponProductCategoryRelationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponProductCategoryRelationDo) Joins(fields ...field.RelationField) ISmsCouponProductCategoryRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponProductCategoryRelationDo) Preload(fields ...field.RelationField) ISmsCouponProductCategoryRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponProductCategoryRelationDo) FirstOrInit() (*model.SmsCouponProductCategoryRelation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductCategoryRelation), nil
	}
}

func (s smsCouponProductCategoryRelationDo) FirstOrCreate() (*model.SmsCouponProductCategoryRelation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductCategoryRelation), nil
	}
}

func (s smsCouponProductCategoryRelationDo) FindByPage(offset int, limit int) (result []*model.SmsCouponProductCategoryRelation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponProductCategoryRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponProductCategoryRelationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponProductCategoryRelationDo) Delete(models ...*model.SmsCouponProductCategoryRelation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponProductCategoryRelationDo) withDO(do gen.Dao) *smsCouponProductCategoryRelationDo {
	s.DO = *do.(*gen.DO)
	return s
}

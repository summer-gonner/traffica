// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsCouponProductRelation(db *gorm.DB, opts ...gen.DOOption) smsCouponProductRelation {
	_smsCouponProductRelation := smsCouponProductRelation{}

	_smsCouponProductRelation.smsCouponProductRelationDo.UseDB(db, opts...)
	_smsCouponProductRelation.smsCouponProductRelationDo.UseModel(&model.SmsCouponProductRelation{})

	tableName := _smsCouponProductRelation.smsCouponProductRelationDo.TableName()
	_smsCouponProductRelation.ALL = field.NewAsterisk(tableName)
	_smsCouponProductRelation.ID = field.NewInt64(tableName, "id")
	_smsCouponProductRelation.CouponID = field.NewInt64(tableName, "coupon_id")
	_smsCouponProductRelation.ProductID = field.NewInt64(tableName, "product_id")
	_smsCouponProductRelation.ProductName = field.NewString(tableName, "product_name")
	_smsCouponProductRelation.ProductSn = field.NewString(tableName, "product_sn")

	_smsCouponProductRelation.fillFieldMap()

	return _smsCouponProductRelation
}

// smsCouponProductRelation 优惠券和产品的关系表
type smsCouponProductRelation struct {
	smsCouponProductRelationDo smsCouponProductRelationDo

	ALL         field.Asterisk
	ID          field.Int64
	CouponID    field.Int64  // 优惠券id
	ProductID   field.Int64  // 产品id
	ProductName field.String // 商品名称
	ProductSn   field.String // 商品编码

	fieldMap map[string]field.Expr
}

func (s smsCouponProductRelation) Table(newTableName string) *smsCouponProductRelation {
	s.smsCouponProductRelationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponProductRelation) As(alias string) *smsCouponProductRelation {
	s.smsCouponProductRelationDo.DO = *(s.smsCouponProductRelationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponProductRelation) updateTableName(table string) *smsCouponProductRelation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CouponID = field.NewInt64(table, "coupon_id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.ProductName = field.NewString(table, "product_name")
	s.ProductSn = field.NewString(table, "product_sn")

	s.fillFieldMap()

	return s
}

func (s *smsCouponProductRelation) WithContext(ctx context.Context) ISmsCouponProductRelationDo {
	return s.smsCouponProductRelationDo.WithContext(ctx)
}

func (s smsCouponProductRelation) TableName() string { return s.smsCouponProductRelationDo.TableName() }

func (s smsCouponProductRelation) Alias() string { return s.smsCouponProductRelationDo.Alias() }

func (s smsCouponProductRelation) Columns(cols ...field.Expr) gen.Columns {
	return s.smsCouponProductRelationDo.Columns(cols...)
}

func (s *smsCouponProductRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponProductRelation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["product_name"] = s.ProductName
	s.fieldMap["product_sn"] = s.ProductSn
}

func (s smsCouponProductRelation) clone(db *gorm.DB) smsCouponProductRelation {
	s.smsCouponProductRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponProductRelation) replaceDB(db *gorm.DB) smsCouponProductRelation {
	s.smsCouponProductRelationDo.ReplaceDB(db)
	return s
}

type smsCouponProductRelationDo struct{ gen.DO }

type ISmsCouponProductRelationDo interface {
	gen.SubQuery
	Debug() ISmsCouponProductRelationDo
	WithContext(ctx context.Context) ISmsCouponProductRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponProductRelationDo
	WriteDB() ISmsCouponProductRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponProductRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponProductRelationDo
	Not(conds ...gen.Condition) ISmsCouponProductRelationDo
	Or(conds ...gen.Condition) ISmsCouponProductRelationDo
	Select(conds ...field.Expr) ISmsCouponProductRelationDo
	Where(conds ...gen.Condition) ISmsCouponProductRelationDo
	Order(conds ...field.Expr) ISmsCouponProductRelationDo
	Distinct(cols ...field.Expr) ISmsCouponProductRelationDo
	Omit(cols ...field.Expr) ISmsCouponProductRelationDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponProductRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductRelationDo
	Group(cols ...field.Expr) ISmsCouponProductRelationDo
	Having(conds ...gen.Condition) ISmsCouponProductRelationDo
	Limit(limit int) ISmsCouponProductRelationDo
	Offset(offset int) ISmsCouponProductRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponProductRelationDo
	Unscoped() ISmsCouponProductRelationDo
	Create(values ...*model.SmsCouponProductRelation) error
	CreateInBatches(values []*model.SmsCouponProductRelation, batchSize int) error
	Save(values ...*model.SmsCouponProductRelation) error
	First() (*model.SmsCouponProductRelation, error)
	Take() (*model.SmsCouponProductRelation, error)
	Last() (*model.SmsCouponProductRelation, error)
	Find() ([]*model.SmsCouponProductRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponProductRelation, err error)
	FindInBatches(result *[]*model.SmsCouponProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponProductRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponProductRelationDo
	Assign(attrs ...field.AssignExpr) ISmsCouponProductRelationDo
	Joins(fields ...field.RelationField) ISmsCouponProductRelationDo
	Preload(fields ...field.RelationField) ISmsCouponProductRelationDo
	FirstOrInit() (*model.SmsCouponProductRelation, error)
	FirstOrCreate() (*model.SmsCouponProductRelation, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponProductRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponProductRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponProductRelationDo) Debug() ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponProductRelationDo) WithContext(ctx context.Context) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponProductRelationDo) ReadDB() ISmsCouponProductRelationDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponProductRelationDo) WriteDB() ISmsCouponProductRelationDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponProductRelationDo) Session(config *gorm.Session) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponProductRelationDo) Clauses(conds ...clause.Expression) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponProductRelationDo) Returning(value interface{}, columns ...string) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponProductRelationDo) Not(conds ...gen.Condition) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponProductRelationDo) Or(conds ...gen.Condition) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponProductRelationDo) Select(conds ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponProductRelationDo) Where(conds ...gen.Condition) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponProductRelationDo) Order(conds ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponProductRelationDo) Distinct(cols ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponProductRelationDo) Omit(cols ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponProductRelationDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponProductRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponProductRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponProductRelationDo) Group(cols ...field.Expr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponProductRelationDo) Having(conds ...gen.Condition) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponProductRelationDo) Limit(limit int) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponProductRelationDo) Offset(offset int) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponProductRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponProductRelationDo) Unscoped() ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponProductRelationDo) Create(values ...*model.SmsCouponProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponProductRelationDo) CreateInBatches(values []*model.SmsCouponProductRelation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponProductRelationDo) Save(values ...*model.SmsCouponProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponProductRelationDo) First() (*model.SmsCouponProductRelation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductRelation), nil
	}
}

func (s smsCouponProductRelationDo) Take() (*model.SmsCouponProductRelation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductRelation), nil
	}
}

func (s smsCouponProductRelationDo) Last() (*model.SmsCouponProductRelation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductRelation), nil
	}
}

func (s smsCouponProductRelationDo) Find() ([]*model.SmsCouponProductRelation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponProductRelation), err
}

func (s smsCouponProductRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponProductRelation, err error) {
	buf := make([]*model.SmsCouponProductRelation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponProductRelationDo) FindInBatches(result *[]*model.SmsCouponProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponProductRelationDo) Attrs(attrs ...field.AssignExpr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponProductRelationDo) Assign(attrs ...field.AssignExpr) ISmsCouponProductRelationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponProductRelationDo) Joins(fields ...field.RelationField) ISmsCouponProductRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponProductRelationDo) Preload(fields ...field.RelationField) ISmsCouponProductRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponProductRelationDo) FirstOrInit() (*model.SmsCouponProductRelation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductRelation), nil
	}
}

func (s smsCouponProductRelationDo) FirstOrCreate() (*model.SmsCouponProductRelation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponProductRelation), nil
	}
}

func (s smsCouponProductRelationDo) FindByPage(offset int, limit int) (result []*model.SmsCouponProductRelation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponProductRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponProductRelationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponProductRelationDo) Delete(models ...*model.SmsCouponProductRelation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponProductRelationDo) withDO(do gen.Dao) *smsCouponProductRelationDo {
	s.DO = *do.(*gen.DO)
	return s
}

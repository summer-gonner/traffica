// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsFlashPromotionLog(db *gorm.DB, opts ...gen.DOOption) smsFlashPromotionLog {
	_smsFlashPromotionLog := smsFlashPromotionLog{}

	_smsFlashPromotionLog.smsFlashPromotionLogDo.UseDB(db, opts...)
	_smsFlashPromotionLog.smsFlashPromotionLogDo.UseModel(&model.SmsFlashPromotionLog{})

	tableName := _smsFlashPromotionLog.smsFlashPromotionLogDo.TableName()
	_smsFlashPromotionLog.ALL = field.NewAsterisk(tableName)
	_smsFlashPromotionLog.ID = field.NewInt64(tableName, "id")
	_smsFlashPromotionLog.MemberID = field.NewInt64(tableName, "member_id")
	_smsFlashPromotionLog.ProductID = field.NewInt64(tableName, "product_id")
	_smsFlashPromotionLog.MemberPhone = field.NewString(tableName, "member_phone")
	_smsFlashPromotionLog.ProductName = field.NewString(tableName, "product_name")
	_smsFlashPromotionLog.SubscribeTime = field.NewTime(tableName, "subscribe_time")
	_smsFlashPromotionLog.SendTime = field.NewTime(tableName, "send_time")

	_smsFlashPromotionLog.fillFieldMap()

	return _smsFlashPromotionLog
}

// smsFlashPromotionLog 限时购通知记录
type smsFlashPromotionLog struct {
	smsFlashPromotionLogDo smsFlashPromotionLogDo

	ALL           field.Asterisk
	ID            field.Int64  // 编号
	MemberID      field.Int64  // 会员id
	ProductID     field.Int64  // 商品id
	MemberPhone   field.String // 会员电话
	ProductName   field.String // 商品名称
	SubscribeTime field.Time   // 会员订阅时间
	SendTime      field.Time   // 发送时间

	fieldMap map[string]field.Expr
}

func (s smsFlashPromotionLog) Table(newTableName string) *smsFlashPromotionLog {
	s.smsFlashPromotionLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsFlashPromotionLog) As(alias string) *smsFlashPromotionLog {
	s.smsFlashPromotionLogDo.DO = *(s.smsFlashPromotionLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsFlashPromotionLog) updateTableName(table string) *smsFlashPromotionLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MemberID = field.NewInt64(table, "member_id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.MemberPhone = field.NewString(table, "member_phone")
	s.ProductName = field.NewString(table, "product_name")
	s.SubscribeTime = field.NewTime(table, "subscribe_time")
	s.SendTime = field.NewTime(table, "send_time")

	s.fillFieldMap()

	return s
}

func (s *smsFlashPromotionLog) WithContext(ctx context.Context) ISmsFlashPromotionLogDo {
	return s.smsFlashPromotionLogDo.WithContext(ctx)
}

func (s smsFlashPromotionLog) TableName() string { return s.smsFlashPromotionLogDo.TableName() }

func (s smsFlashPromotionLog) Alias() string { return s.smsFlashPromotionLogDo.Alias() }

func (s smsFlashPromotionLog) Columns(cols ...field.Expr) gen.Columns {
	return s.smsFlashPromotionLogDo.Columns(cols...)
}

func (s *smsFlashPromotionLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsFlashPromotionLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["member_phone"] = s.MemberPhone
	s.fieldMap["product_name"] = s.ProductName
	s.fieldMap["subscribe_time"] = s.SubscribeTime
	s.fieldMap["send_time"] = s.SendTime
}

func (s smsFlashPromotionLog) clone(db *gorm.DB) smsFlashPromotionLog {
	s.smsFlashPromotionLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsFlashPromotionLog) replaceDB(db *gorm.DB) smsFlashPromotionLog {
	s.smsFlashPromotionLogDo.ReplaceDB(db)
	return s
}

type smsFlashPromotionLogDo struct{ gen.DO }

type ISmsFlashPromotionLogDo interface {
	gen.SubQuery
	Debug() ISmsFlashPromotionLogDo
	WithContext(ctx context.Context) ISmsFlashPromotionLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsFlashPromotionLogDo
	WriteDB() ISmsFlashPromotionLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsFlashPromotionLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsFlashPromotionLogDo
	Not(conds ...gen.Condition) ISmsFlashPromotionLogDo
	Or(conds ...gen.Condition) ISmsFlashPromotionLogDo
	Select(conds ...field.Expr) ISmsFlashPromotionLogDo
	Where(conds ...gen.Condition) ISmsFlashPromotionLogDo
	Order(conds ...field.Expr) ISmsFlashPromotionLogDo
	Distinct(cols ...field.Expr) ISmsFlashPromotionLogDo
	Omit(cols ...field.Expr) ISmsFlashPromotionLogDo
	Join(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionLogDo
	Group(cols ...field.Expr) ISmsFlashPromotionLogDo
	Having(conds ...gen.Condition) ISmsFlashPromotionLogDo
	Limit(limit int) ISmsFlashPromotionLogDo
	Offset(offset int) ISmsFlashPromotionLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsFlashPromotionLogDo
	Unscoped() ISmsFlashPromotionLogDo
	Create(values ...*model.SmsFlashPromotionLog) error
	CreateInBatches(values []*model.SmsFlashPromotionLog, batchSize int) error
	Save(values ...*model.SmsFlashPromotionLog) error
	First() (*model.SmsFlashPromotionLog, error)
	Take() (*model.SmsFlashPromotionLog, error)
	Last() (*model.SmsFlashPromotionLog, error)
	Find() ([]*model.SmsFlashPromotionLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsFlashPromotionLog, err error)
	FindInBatches(result *[]*model.SmsFlashPromotionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsFlashPromotionLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsFlashPromotionLogDo
	Assign(attrs ...field.AssignExpr) ISmsFlashPromotionLogDo
	Joins(fields ...field.RelationField) ISmsFlashPromotionLogDo
	Preload(fields ...field.RelationField) ISmsFlashPromotionLogDo
	FirstOrInit() (*model.SmsFlashPromotionLog, error)
	FirstOrCreate() (*model.SmsFlashPromotionLog, error)
	FindByPage(offset int, limit int) (result []*model.SmsFlashPromotionLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsFlashPromotionLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsFlashPromotionLogDo) Debug() ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Debug())
}

func (s smsFlashPromotionLogDo) WithContext(ctx context.Context) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsFlashPromotionLogDo) ReadDB() ISmsFlashPromotionLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsFlashPromotionLogDo) WriteDB() ISmsFlashPromotionLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsFlashPromotionLogDo) Session(config *gorm.Session) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsFlashPromotionLogDo) Clauses(conds ...clause.Expression) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsFlashPromotionLogDo) Returning(value interface{}, columns ...string) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsFlashPromotionLogDo) Not(conds ...gen.Condition) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsFlashPromotionLogDo) Or(conds ...gen.Condition) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsFlashPromotionLogDo) Select(conds ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsFlashPromotionLogDo) Where(conds ...gen.Condition) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsFlashPromotionLogDo) Order(conds ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsFlashPromotionLogDo) Distinct(cols ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsFlashPromotionLogDo) Omit(cols ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsFlashPromotionLogDo) Join(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsFlashPromotionLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsFlashPromotionLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsFlashPromotionLogDo) Group(cols ...field.Expr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsFlashPromotionLogDo) Having(conds ...gen.Condition) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsFlashPromotionLogDo) Limit(limit int) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsFlashPromotionLogDo) Offset(offset int) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsFlashPromotionLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsFlashPromotionLogDo) Unscoped() ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsFlashPromotionLogDo) Create(values ...*model.SmsFlashPromotionLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsFlashPromotionLogDo) CreateInBatches(values []*model.SmsFlashPromotionLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsFlashPromotionLogDo) Save(values ...*model.SmsFlashPromotionLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsFlashPromotionLogDo) First() (*model.SmsFlashPromotionLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionLog), nil
	}
}

func (s smsFlashPromotionLogDo) Take() (*model.SmsFlashPromotionLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionLog), nil
	}
}

func (s smsFlashPromotionLogDo) Last() (*model.SmsFlashPromotionLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionLog), nil
	}
}

func (s smsFlashPromotionLogDo) Find() ([]*model.SmsFlashPromotionLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsFlashPromotionLog), err
}

func (s smsFlashPromotionLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsFlashPromotionLog, err error) {
	buf := make([]*model.SmsFlashPromotionLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsFlashPromotionLogDo) FindInBatches(result *[]*model.SmsFlashPromotionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsFlashPromotionLogDo) Attrs(attrs ...field.AssignExpr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsFlashPromotionLogDo) Assign(attrs ...field.AssignExpr) ISmsFlashPromotionLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsFlashPromotionLogDo) Joins(fields ...field.RelationField) ISmsFlashPromotionLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsFlashPromotionLogDo) Preload(fields ...field.RelationField) ISmsFlashPromotionLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsFlashPromotionLogDo) FirstOrInit() (*model.SmsFlashPromotionLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionLog), nil
	}
}

func (s smsFlashPromotionLogDo) FirstOrCreate() (*model.SmsFlashPromotionLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionLog), nil
	}
}

func (s smsFlashPromotionLogDo) FindByPage(offset int, limit int) (result []*model.SmsFlashPromotionLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsFlashPromotionLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsFlashPromotionLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsFlashPromotionLogDo) Delete(models ...*model.SmsFlashPromotionLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsFlashPromotionLogDo) withDO(do gen.Dao) *smsFlashPromotionLogDo {
	s.DO = *do.(*gen.DO)
	return s
}

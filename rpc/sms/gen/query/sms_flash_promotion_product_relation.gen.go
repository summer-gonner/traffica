// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsFlashPromotionProductRelation(db *gorm.DB, opts ...gen.DOOption) smsFlashPromotionProductRelation {
	_smsFlashPromotionProductRelation := smsFlashPromotionProductRelation{}

	_smsFlashPromotionProductRelation.smsFlashPromotionProductRelationDo.UseDB(db, opts...)
	_smsFlashPromotionProductRelation.smsFlashPromotionProductRelationDo.UseModel(&model.SmsFlashPromotionProductRelation{})

	tableName := _smsFlashPromotionProductRelation.smsFlashPromotionProductRelationDo.TableName()
	_smsFlashPromotionProductRelation.ALL = field.NewAsterisk(tableName)
	_smsFlashPromotionProductRelation.ID = field.NewInt64(tableName, "id")
	_smsFlashPromotionProductRelation.FlashPromotionID = field.NewInt64(tableName, "flash_promotion_id")
	_smsFlashPromotionProductRelation.FlashPromotionSessionID = field.NewInt64(tableName, "flash_promotion_session_id")
	_smsFlashPromotionProductRelation.ProductID = field.NewInt64(tableName, "product_id")
	_smsFlashPromotionProductRelation.FlashPromotionPrice = field.NewInt64(tableName, "flash_promotion_price")
	_smsFlashPromotionProductRelation.FlashPromotionCount = field.NewInt32(tableName, "flash_promotion_count")
	_smsFlashPromotionProductRelation.FlashPromotionLimit = field.NewInt32(tableName, "flash_promotion_limit")
	_smsFlashPromotionProductRelation.Sort = field.NewInt32(tableName, "sort")

	_smsFlashPromotionProductRelation.fillFieldMap()

	return _smsFlashPromotionProductRelation
}

// smsFlashPromotionProductRelation 商品限时购与商品关系表
type smsFlashPromotionProductRelation struct {
	smsFlashPromotionProductRelationDo smsFlashPromotionProductRelationDo

	ALL                     field.Asterisk
	ID                      field.Int64 // 编号
	FlashPromotionID        field.Int64 // 限时购id
	FlashPromotionSessionID field.Int64 // 编号
	ProductID               field.Int64 // 商品id
	FlashPromotionPrice     field.Int64 // 限时购价格
	FlashPromotionCount     field.Int32 // 限时购数量
	FlashPromotionLimit     field.Int32 // 每人限购数量
	Sort                    field.Int32 // 排序

	fieldMap map[string]field.Expr
}

func (s smsFlashPromotionProductRelation) Table(newTableName string) *smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsFlashPromotionProductRelation) As(alias string) *smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.DO = *(s.smsFlashPromotionProductRelationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsFlashPromotionProductRelation) updateTableName(table string) *smsFlashPromotionProductRelation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.FlashPromotionID = field.NewInt64(table, "flash_promotion_id")
	s.FlashPromotionSessionID = field.NewInt64(table, "flash_promotion_session_id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.FlashPromotionPrice = field.NewInt64(table, "flash_promotion_price")
	s.FlashPromotionCount = field.NewInt32(table, "flash_promotion_count")
	s.FlashPromotionLimit = field.NewInt32(table, "flash_promotion_limit")
	s.Sort = field.NewInt32(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsFlashPromotionProductRelation) WithContext(ctx context.Context) ISmsFlashPromotionProductRelationDo {
	return s.smsFlashPromotionProductRelationDo.WithContext(ctx)
}

func (s smsFlashPromotionProductRelation) TableName() string {
	return s.smsFlashPromotionProductRelationDo.TableName()
}

func (s smsFlashPromotionProductRelation) Alias() string {
	return s.smsFlashPromotionProductRelationDo.Alias()
}

func (s smsFlashPromotionProductRelation) Columns(cols ...field.Expr) gen.Columns {
	return s.smsFlashPromotionProductRelationDo.Columns(cols...)
}

func (s *smsFlashPromotionProductRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsFlashPromotionProductRelation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["flash_promotion_id"] = s.FlashPromotionID
	s.fieldMap["flash_promotion_session_id"] = s.FlashPromotionSessionID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["flash_promotion_price"] = s.FlashPromotionPrice
	s.fieldMap["flash_promotion_count"] = s.FlashPromotionCount
	s.fieldMap["flash_promotion_limit"] = s.FlashPromotionLimit
	s.fieldMap["sort"] = s.Sort
}

func (s smsFlashPromotionProductRelation) clone(db *gorm.DB) smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsFlashPromotionProductRelation) replaceDB(db *gorm.DB) smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.ReplaceDB(db)
	return s
}

type smsFlashPromotionProductRelationDo struct{ gen.DO }

type ISmsFlashPromotionProductRelationDo interface {
	gen.SubQuery
	Debug() ISmsFlashPromotionProductRelationDo
	WithContext(ctx context.Context) ISmsFlashPromotionProductRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsFlashPromotionProductRelationDo
	WriteDB() ISmsFlashPromotionProductRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsFlashPromotionProductRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsFlashPromotionProductRelationDo
	Not(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo
	Or(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo
	Select(conds ...field.Expr) ISmsFlashPromotionProductRelationDo
	Where(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo
	Order(conds ...field.Expr) ISmsFlashPromotionProductRelationDo
	Distinct(cols ...field.Expr) ISmsFlashPromotionProductRelationDo
	Omit(cols ...field.Expr) ISmsFlashPromotionProductRelationDo
	Join(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionProductRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionProductRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionProductRelationDo
	Group(cols ...field.Expr) ISmsFlashPromotionProductRelationDo
	Having(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo
	Limit(limit int) ISmsFlashPromotionProductRelationDo
	Offset(offset int) ISmsFlashPromotionProductRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsFlashPromotionProductRelationDo
	Unscoped() ISmsFlashPromotionProductRelationDo
	Create(values ...*model.SmsFlashPromotionProductRelation) error
	CreateInBatches(values []*model.SmsFlashPromotionProductRelation, batchSize int) error
	Save(values ...*model.SmsFlashPromotionProductRelation) error
	First() (*model.SmsFlashPromotionProductRelation, error)
	Take() (*model.SmsFlashPromotionProductRelation, error)
	Last() (*model.SmsFlashPromotionProductRelation, error)
	Find() ([]*model.SmsFlashPromotionProductRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsFlashPromotionProductRelation, err error)
	FindInBatches(result *[]*model.SmsFlashPromotionProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsFlashPromotionProductRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsFlashPromotionProductRelationDo
	Assign(attrs ...field.AssignExpr) ISmsFlashPromotionProductRelationDo
	Joins(fields ...field.RelationField) ISmsFlashPromotionProductRelationDo
	Preload(fields ...field.RelationField) ISmsFlashPromotionProductRelationDo
	FirstOrInit() (*model.SmsFlashPromotionProductRelation, error)
	FirstOrCreate() (*model.SmsFlashPromotionProductRelation, error)
	FindByPage(offset int, limit int) (result []*model.SmsFlashPromotionProductRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsFlashPromotionProductRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsFlashPromotionProductRelationDo) Debug() ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Debug())
}

func (s smsFlashPromotionProductRelationDo) WithContext(ctx context.Context) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsFlashPromotionProductRelationDo) ReadDB() ISmsFlashPromotionProductRelationDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsFlashPromotionProductRelationDo) WriteDB() ISmsFlashPromotionProductRelationDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsFlashPromotionProductRelationDo) Session(config *gorm.Session) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsFlashPromotionProductRelationDo) Clauses(conds ...clause.Expression) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsFlashPromotionProductRelationDo) Returning(value interface{}, columns ...string) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsFlashPromotionProductRelationDo) Not(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsFlashPromotionProductRelationDo) Or(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsFlashPromotionProductRelationDo) Select(conds ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsFlashPromotionProductRelationDo) Where(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsFlashPromotionProductRelationDo) Order(conds ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsFlashPromotionProductRelationDo) Distinct(cols ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsFlashPromotionProductRelationDo) Omit(cols ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsFlashPromotionProductRelationDo) Join(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsFlashPromotionProductRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsFlashPromotionProductRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsFlashPromotionProductRelationDo) Group(cols ...field.Expr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsFlashPromotionProductRelationDo) Having(conds ...gen.Condition) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsFlashPromotionProductRelationDo) Limit(limit int) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsFlashPromotionProductRelationDo) Offset(offset int) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsFlashPromotionProductRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsFlashPromotionProductRelationDo) Unscoped() ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsFlashPromotionProductRelationDo) Create(values ...*model.SmsFlashPromotionProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsFlashPromotionProductRelationDo) CreateInBatches(values []*model.SmsFlashPromotionProductRelation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsFlashPromotionProductRelationDo) Save(values ...*model.SmsFlashPromotionProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsFlashPromotionProductRelationDo) First() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) Take() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) Last() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) Find() ([]*model.SmsFlashPromotionProductRelation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsFlashPromotionProductRelation), err
}

func (s smsFlashPromotionProductRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsFlashPromotionProductRelation, err error) {
	buf := make([]*model.SmsFlashPromotionProductRelation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsFlashPromotionProductRelationDo) FindInBatches(result *[]*model.SmsFlashPromotionProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsFlashPromotionProductRelationDo) Attrs(attrs ...field.AssignExpr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsFlashPromotionProductRelationDo) Assign(attrs ...field.AssignExpr) ISmsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsFlashPromotionProductRelationDo) Joins(fields ...field.RelationField) ISmsFlashPromotionProductRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsFlashPromotionProductRelationDo) Preload(fields ...field.RelationField) ISmsFlashPromotionProductRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsFlashPromotionProductRelationDo) FirstOrInit() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) FirstOrCreate() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) FindByPage(offset int, limit int) (result []*model.SmsFlashPromotionProductRelation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsFlashPromotionProductRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsFlashPromotionProductRelationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsFlashPromotionProductRelationDo) Delete(models ...*model.SmsFlashPromotionProductRelation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsFlashPromotionProductRelationDo) withDO(do gen.Dao) *smsFlashPromotionProductRelationDo {
	s.DO = *do.(*gen.DO)
	return s
}

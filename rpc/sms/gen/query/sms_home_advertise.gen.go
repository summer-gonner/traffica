// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsHomeAdvertise(db *gorm.DB, opts ...gen.DOOption) smsHomeAdvertise {
	_smsHomeAdvertise := smsHomeAdvertise{}

	_smsHomeAdvertise.smsHomeAdvertiseDo.UseDB(db, opts...)
	_smsHomeAdvertise.smsHomeAdvertiseDo.UseModel(&model.SmsHomeAdvertise{})

	tableName := _smsHomeAdvertise.smsHomeAdvertiseDo.TableName()
	_smsHomeAdvertise.ALL = field.NewAsterisk(tableName)
	_smsHomeAdvertise.ID = field.NewInt64(tableName, "id")
	_smsHomeAdvertise.Name = field.NewString(tableName, "name")
	_smsHomeAdvertise.Type = field.NewInt32(tableName, "type")
	_smsHomeAdvertise.Pic = field.NewString(tableName, "pic")
	_smsHomeAdvertise.StartTime = field.NewTime(tableName, "start_time")
	_smsHomeAdvertise.EndTime = field.NewTime(tableName, "end_time")
	_smsHomeAdvertise.Status = field.NewInt32(tableName, "status")
	_smsHomeAdvertise.ClickCount = field.NewInt32(tableName, "click_count")
	_smsHomeAdvertise.OrderCount = field.NewInt32(tableName, "order_count")
	_smsHomeAdvertise.URL = field.NewString(tableName, "url")
	_smsHomeAdvertise.Note = field.NewString(tableName, "note")
	_smsHomeAdvertise.Sort = field.NewInt32(tableName, "sort")

	_smsHomeAdvertise.fillFieldMap()

	return _smsHomeAdvertise
}

// smsHomeAdvertise 首页轮播广告表
type smsHomeAdvertise struct {
	smsHomeAdvertiseDo smsHomeAdvertiseDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String // 名称
	Type       field.Int32  // 轮播位置：0->PC首页轮播；1->app首页轮播
	Pic        field.String // 图片地址
	StartTime  field.Time   // 开始时间
	EndTime    field.Time   // 结束时间
	Status     field.Int32  // 上下线状态：0->下线；1->上线
	ClickCount field.Int32  // 点击数
	OrderCount field.Int32  // 下单数
	URL        field.String // 链接地址
	Note       field.String // 备注
	Sort       field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (s smsHomeAdvertise) Table(newTableName string) *smsHomeAdvertise {
	s.smsHomeAdvertiseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsHomeAdvertise) As(alias string) *smsHomeAdvertise {
	s.smsHomeAdvertiseDo.DO = *(s.smsHomeAdvertiseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsHomeAdvertise) updateTableName(table string) *smsHomeAdvertise {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewInt32(table, "type")
	s.Pic = field.NewString(table, "pic")
	s.StartTime = field.NewTime(table, "start_time")
	s.EndTime = field.NewTime(table, "end_time")
	s.Status = field.NewInt32(table, "status")
	s.ClickCount = field.NewInt32(table, "click_count")
	s.OrderCount = field.NewInt32(table, "order_count")
	s.URL = field.NewString(table, "url")
	s.Note = field.NewString(table, "note")
	s.Sort = field.NewInt32(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsHomeAdvertise) WithContext(ctx context.Context) ISmsHomeAdvertiseDo {
	return s.smsHomeAdvertiseDo.WithContext(ctx)
}

func (s smsHomeAdvertise) TableName() string { return s.smsHomeAdvertiseDo.TableName() }

func (s smsHomeAdvertise) Alias() string { return s.smsHomeAdvertiseDo.Alias() }

func (s smsHomeAdvertise) Columns(cols ...field.Expr) gen.Columns {
	return s.smsHomeAdvertiseDo.Columns(cols...)
}

func (s *smsHomeAdvertise) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsHomeAdvertise) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["pic"] = s.Pic
	s.fieldMap["start_time"] = s.StartTime
	s.fieldMap["end_time"] = s.EndTime
	s.fieldMap["status"] = s.Status
	s.fieldMap["click_count"] = s.ClickCount
	s.fieldMap["order_count"] = s.OrderCount
	s.fieldMap["url"] = s.URL
	s.fieldMap["note"] = s.Note
	s.fieldMap["sort"] = s.Sort
}

func (s smsHomeAdvertise) clone(db *gorm.DB) smsHomeAdvertise {
	s.smsHomeAdvertiseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsHomeAdvertise) replaceDB(db *gorm.DB) smsHomeAdvertise {
	s.smsHomeAdvertiseDo.ReplaceDB(db)
	return s
}

type smsHomeAdvertiseDo struct{ gen.DO }

type ISmsHomeAdvertiseDo interface {
	gen.SubQuery
	Debug() ISmsHomeAdvertiseDo
	WithContext(ctx context.Context) ISmsHomeAdvertiseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsHomeAdvertiseDo
	WriteDB() ISmsHomeAdvertiseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsHomeAdvertiseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsHomeAdvertiseDo
	Not(conds ...gen.Condition) ISmsHomeAdvertiseDo
	Or(conds ...gen.Condition) ISmsHomeAdvertiseDo
	Select(conds ...field.Expr) ISmsHomeAdvertiseDo
	Where(conds ...gen.Condition) ISmsHomeAdvertiseDo
	Order(conds ...field.Expr) ISmsHomeAdvertiseDo
	Distinct(cols ...field.Expr) ISmsHomeAdvertiseDo
	Omit(cols ...field.Expr) ISmsHomeAdvertiseDo
	Join(table schema.Tabler, on ...field.Expr) ISmsHomeAdvertiseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeAdvertiseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeAdvertiseDo
	Group(cols ...field.Expr) ISmsHomeAdvertiseDo
	Having(conds ...gen.Condition) ISmsHomeAdvertiseDo
	Limit(limit int) ISmsHomeAdvertiseDo
	Offset(offset int) ISmsHomeAdvertiseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeAdvertiseDo
	Unscoped() ISmsHomeAdvertiseDo
	Create(values ...*model.SmsHomeAdvertise) error
	CreateInBatches(values []*model.SmsHomeAdvertise, batchSize int) error
	Save(values ...*model.SmsHomeAdvertise) error
	First() (*model.SmsHomeAdvertise, error)
	Take() (*model.SmsHomeAdvertise, error)
	Last() (*model.SmsHomeAdvertise, error)
	Find() ([]*model.SmsHomeAdvertise, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeAdvertise, err error)
	FindInBatches(result *[]*model.SmsHomeAdvertise, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsHomeAdvertise) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsHomeAdvertiseDo
	Assign(attrs ...field.AssignExpr) ISmsHomeAdvertiseDo
	Joins(fields ...field.RelationField) ISmsHomeAdvertiseDo
	Preload(fields ...field.RelationField) ISmsHomeAdvertiseDo
	FirstOrInit() (*model.SmsHomeAdvertise, error)
	FirstOrCreate() (*model.SmsHomeAdvertise, error)
	FindByPage(offset int, limit int) (result []*model.SmsHomeAdvertise, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsHomeAdvertiseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsHomeAdvertiseDo) Debug() ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Debug())
}

func (s smsHomeAdvertiseDo) WithContext(ctx context.Context) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsHomeAdvertiseDo) ReadDB() ISmsHomeAdvertiseDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsHomeAdvertiseDo) WriteDB() ISmsHomeAdvertiseDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsHomeAdvertiseDo) Session(config *gorm.Session) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsHomeAdvertiseDo) Clauses(conds ...clause.Expression) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsHomeAdvertiseDo) Returning(value interface{}, columns ...string) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsHomeAdvertiseDo) Not(conds ...gen.Condition) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsHomeAdvertiseDo) Or(conds ...gen.Condition) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsHomeAdvertiseDo) Select(conds ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsHomeAdvertiseDo) Where(conds ...gen.Condition) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsHomeAdvertiseDo) Order(conds ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsHomeAdvertiseDo) Distinct(cols ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsHomeAdvertiseDo) Omit(cols ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsHomeAdvertiseDo) Join(table schema.Tabler, on ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsHomeAdvertiseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsHomeAdvertiseDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsHomeAdvertiseDo) Group(cols ...field.Expr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsHomeAdvertiseDo) Having(conds ...gen.Condition) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsHomeAdvertiseDo) Limit(limit int) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsHomeAdvertiseDo) Offset(offset int) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsHomeAdvertiseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsHomeAdvertiseDo) Unscoped() ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsHomeAdvertiseDo) Create(values ...*model.SmsHomeAdvertise) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsHomeAdvertiseDo) CreateInBatches(values []*model.SmsHomeAdvertise, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsHomeAdvertiseDo) Save(values ...*model.SmsHomeAdvertise) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsHomeAdvertiseDo) First() (*model.SmsHomeAdvertise, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeAdvertise), nil
	}
}

func (s smsHomeAdvertiseDo) Take() (*model.SmsHomeAdvertise, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeAdvertise), nil
	}
}

func (s smsHomeAdvertiseDo) Last() (*model.SmsHomeAdvertise, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeAdvertise), nil
	}
}

func (s smsHomeAdvertiseDo) Find() ([]*model.SmsHomeAdvertise, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsHomeAdvertise), err
}

func (s smsHomeAdvertiseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeAdvertise, err error) {
	buf := make([]*model.SmsHomeAdvertise, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsHomeAdvertiseDo) FindInBatches(result *[]*model.SmsHomeAdvertise, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsHomeAdvertiseDo) Attrs(attrs ...field.AssignExpr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsHomeAdvertiseDo) Assign(attrs ...field.AssignExpr) ISmsHomeAdvertiseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsHomeAdvertiseDo) Joins(fields ...field.RelationField) ISmsHomeAdvertiseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsHomeAdvertiseDo) Preload(fields ...field.RelationField) ISmsHomeAdvertiseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsHomeAdvertiseDo) FirstOrInit() (*model.SmsHomeAdvertise, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeAdvertise), nil
	}
}

func (s smsHomeAdvertiseDo) FirstOrCreate() (*model.SmsHomeAdvertise, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeAdvertise), nil
	}
}

func (s smsHomeAdvertiseDo) FindByPage(offset int, limit int) (result []*model.SmsHomeAdvertise, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsHomeAdvertiseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsHomeAdvertiseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsHomeAdvertiseDo) Delete(models ...*model.SmsHomeAdvertise) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsHomeAdvertiseDo) withDO(do gen.Dao) *smsHomeAdvertiseDo {
	s.DO = *do.(*gen.DO)
	return s
}

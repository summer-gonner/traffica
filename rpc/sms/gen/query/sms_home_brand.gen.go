// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsHomeBrand(db *gorm.DB, opts ...gen.DOOption) smsHomeBrand {
	_smsHomeBrand := smsHomeBrand{}

	_smsHomeBrand.smsHomeBrandDo.UseDB(db, opts...)
	_smsHomeBrand.smsHomeBrandDo.UseModel(&model.SmsHomeBrand{})

	tableName := _smsHomeBrand.smsHomeBrandDo.TableName()
	_smsHomeBrand.ALL = field.NewAsterisk(tableName)
	_smsHomeBrand.ID = field.NewInt64(tableName, "id")
	_smsHomeBrand.BrandID = field.NewInt64(tableName, "brand_id")
	_smsHomeBrand.BrandName = field.NewString(tableName, "brand_name")
	_smsHomeBrand.RecommendStatus = field.NewInt32(tableName, "recommend_status")
	_smsHomeBrand.Sort = field.NewInt32(tableName, "sort")

	_smsHomeBrand.fillFieldMap()

	return _smsHomeBrand
}

// smsHomeBrand 首页推荐品牌表
type smsHomeBrand struct {
	smsHomeBrandDo smsHomeBrandDo

	ALL             field.Asterisk
	ID              field.Int64
	BrandID         field.Int64  // 商品品牌id
	BrandName       field.String // 商品品牌名称
	RecommendStatus field.Int32  // 推荐状态：0->不推荐;1->推荐
	Sort            field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (s smsHomeBrand) Table(newTableName string) *smsHomeBrand {
	s.smsHomeBrandDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsHomeBrand) As(alias string) *smsHomeBrand {
	s.smsHomeBrandDo.DO = *(s.smsHomeBrandDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsHomeBrand) updateTableName(table string) *smsHomeBrand {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.BrandID = field.NewInt64(table, "brand_id")
	s.BrandName = field.NewString(table, "brand_name")
	s.RecommendStatus = field.NewInt32(table, "recommend_status")
	s.Sort = field.NewInt32(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsHomeBrand) WithContext(ctx context.Context) ISmsHomeBrandDo {
	return s.smsHomeBrandDo.WithContext(ctx)
}

func (s smsHomeBrand) TableName() string { return s.smsHomeBrandDo.TableName() }

func (s smsHomeBrand) Alias() string { return s.smsHomeBrandDo.Alias() }

func (s smsHomeBrand) Columns(cols ...field.Expr) gen.Columns {
	return s.smsHomeBrandDo.Columns(cols...)
}

func (s *smsHomeBrand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsHomeBrand) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["brand_id"] = s.BrandID
	s.fieldMap["brand_name"] = s.BrandName
	s.fieldMap["recommend_status"] = s.RecommendStatus
	s.fieldMap["sort"] = s.Sort
}

func (s smsHomeBrand) clone(db *gorm.DB) smsHomeBrand {
	s.smsHomeBrandDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsHomeBrand) replaceDB(db *gorm.DB) smsHomeBrand {
	s.smsHomeBrandDo.ReplaceDB(db)
	return s
}

type smsHomeBrandDo struct{ gen.DO }

type ISmsHomeBrandDo interface {
	gen.SubQuery
	Debug() ISmsHomeBrandDo
	WithContext(ctx context.Context) ISmsHomeBrandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsHomeBrandDo
	WriteDB() ISmsHomeBrandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsHomeBrandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsHomeBrandDo
	Not(conds ...gen.Condition) ISmsHomeBrandDo
	Or(conds ...gen.Condition) ISmsHomeBrandDo
	Select(conds ...field.Expr) ISmsHomeBrandDo
	Where(conds ...gen.Condition) ISmsHomeBrandDo
	Order(conds ...field.Expr) ISmsHomeBrandDo
	Distinct(cols ...field.Expr) ISmsHomeBrandDo
	Omit(cols ...field.Expr) ISmsHomeBrandDo
	Join(table schema.Tabler, on ...field.Expr) ISmsHomeBrandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeBrandDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeBrandDo
	Group(cols ...field.Expr) ISmsHomeBrandDo
	Having(conds ...gen.Condition) ISmsHomeBrandDo
	Limit(limit int) ISmsHomeBrandDo
	Offset(offset int) ISmsHomeBrandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeBrandDo
	Unscoped() ISmsHomeBrandDo
	Create(values ...*model.SmsHomeBrand) error
	CreateInBatches(values []*model.SmsHomeBrand, batchSize int) error
	Save(values ...*model.SmsHomeBrand) error
	First() (*model.SmsHomeBrand, error)
	Take() (*model.SmsHomeBrand, error)
	Last() (*model.SmsHomeBrand, error)
	Find() ([]*model.SmsHomeBrand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeBrand, err error)
	FindInBatches(result *[]*model.SmsHomeBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsHomeBrand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsHomeBrandDo
	Assign(attrs ...field.AssignExpr) ISmsHomeBrandDo
	Joins(fields ...field.RelationField) ISmsHomeBrandDo
	Preload(fields ...field.RelationField) ISmsHomeBrandDo
	FirstOrInit() (*model.SmsHomeBrand, error)
	FirstOrCreate() (*model.SmsHomeBrand, error)
	FindByPage(offset int, limit int) (result []*model.SmsHomeBrand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsHomeBrandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsHomeBrandDo) Debug() ISmsHomeBrandDo {
	return s.withDO(s.DO.Debug())
}

func (s smsHomeBrandDo) WithContext(ctx context.Context) ISmsHomeBrandDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsHomeBrandDo) ReadDB() ISmsHomeBrandDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsHomeBrandDo) WriteDB() ISmsHomeBrandDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsHomeBrandDo) Session(config *gorm.Session) ISmsHomeBrandDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsHomeBrandDo) Clauses(conds ...clause.Expression) ISmsHomeBrandDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsHomeBrandDo) Returning(value interface{}, columns ...string) ISmsHomeBrandDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsHomeBrandDo) Not(conds ...gen.Condition) ISmsHomeBrandDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsHomeBrandDo) Or(conds ...gen.Condition) ISmsHomeBrandDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsHomeBrandDo) Select(conds ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsHomeBrandDo) Where(conds ...gen.Condition) ISmsHomeBrandDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsHomeBrandDo) Order(conds ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsHomeBrandDo) Distinct(cols ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsHomeBrandDo) Omit(cols ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsHomeBrandDo) Join(table schema.Tabler, on ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsHomeBrandDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsHomeBrandDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsHomeBrandDo) Group(cols ...field.Expr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsHomeBrandDo) Having(conds ...gen.Condition) ISmsHomeBrandDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsHomeBrandDo) Limit(limit int) ISmsHomeBrandDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsHomeBrandDo) Offset(offset int) ISmsHomeBrandDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsHomeBrandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeBrandDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsHomeBrandDo) Unscoped() ISmsHomeBrandDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsHomeBrandDo) Create(values ...*model.SmsHomeBrand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsHomeBrandDo) CreateInBatches(values []*model.SmsHomeBrand, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsHomeBrandDo) Save(values ...*model.SmsHomeBrand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsHomeBrandDo) First() (*model.SmsHomeBrand, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeBrand), nil
	}
}

func (s smsHomeBrandDo) Take() (*model.SmsHomeBrand, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeBrand), nil
	}
}

func (s smsHomeBrandDo) Last() (*model.SmsHomeBrand, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeBrand), nil
	}
}

func (s smsHomeBrandDo) Find() ([]*model.SmsHomeBrand, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsHomeBrand), err
}

func (s smsHomeBrandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeBrand, err error) {
	buf := make([]*model.SmsHomeBrand, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsHomeBrandDo) FindInBatches(result *[]*model.SmsHomeBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsHomeBrandDo) Attrs(attrs ...field.AssignExpr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsHomeBrandDo) Assign(attrs ...field.AssignExpr) ISmsHomeBrandDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsHomeBrandDo) Joins(fields ...field.RelationField) ISmsHomeBrandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsHomeBrandDo) Preload(fields ...field.RelationField) ISmsHomeBrandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsHomeBrandDo) FirstOrInit() (*model.SmsHomeBrand, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeBrand), nil
	}
}

func (s smsHomeBrandDo) FirstOrCreate() (*model.SmsHomeBrand, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeBrand), nil
	}
}

func (s smsHomeBrandDo) FindByPage(offset int, limit int) (result []*model.SmsHomeBrand, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsHomeBrandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsHomeBrandDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsHomeBrandDo) Delete(models ...*model.SmsHomeBrand) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsHomeBrandDo) withDO(do gen.Dao) *smsHomeBrandDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsHomeNewProduct(db *gorm.DB, opts ...gen.DOOption) smsHomeNewProduct {
	_smsHomeNewProduct := smsHomeNewProduct{}

	_smsHomeNewProduct.smsHomeNewProductDo.UseDB(db, opts...)
	_smsHomeNewProduct.smsHomeNewProductDo.UseModel(&model.SmsHomeNewProduct{})

	tableName := _smsHomeNewProduct.smsHomeNewProductDo.TableName()
	_smsHomeNewProduct.ALL = field.NewAsterisk(tableName)
	_smsHomeNewProduct.ID = field.NewInt64(tableName, "id")
	_smsHomeNewProduct.ProductID = field.NewInt64(tableName, "product_id")
	_smsHomeNewProduct.ProductName = field.NewString(tableName, "product_name")
	_smsHomeNewProduct.RecommendStatus = field.NewInt32(tableName, "recommend_status")
	_smsHomeNewProduct.Sort = field.NewInt32(tableName, "sort")

	_smsHomeNewProduct.fillFieldMap()

	return _smsHomeNewProduct
}

// smsHomeNewProduct 新鲜好物表
type smsHomeNewProduct struct {
	smsHomeNewProductDo smsHomeNewProductDo

	ALL             field.Asterisk
	ID              field.Int64
	ProductID       field.Int64  // 商品id
	ProductName     field.String // 商品名称
	RecommendStatus field.Int32  // 推荐状态：0->不推荐;1->推荐
	Sort            field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (s smsHomeNewProduct) Table(newTableName string) *smsHomeNewProduct {
	s.smsHomeNewProductDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsHomeNewProduct) As(alias string) *smsHomeNewProduct {
	s.smsHomeNewProductDo.DO = *(s.smsHomeNewProductDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsHomeNewProduct) updateTableName(table string) *smsHomeNewProduct {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.ProductName = field.NewString(table, "product_name")
	s.RecommendStatus = field.NewInt32(table, "recommend_status")
	s.Sort = field.NewInt32(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsHomeNewProduct) WithContext(ctx context.Context) ISmsHomeNewProductDo {
	return s.smsHomeNewProductDo.WithContext(ctx)
}

func (s smsHomeNewProduct) TableName() string { return s.smsHomeNewProductDo.TableName() }

func (s smsHomeNewProduct) Alias() string { return s.smsHomeNewProductDo.Alias() }

func (s smsHomeNewProduct) Columns(cols ...field.Expr) gen.Columns {
	return s.smsHomeNewProductDo.Columns(cols...)
}

func (s *smsHomeNewProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsHomeNewProduct) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["product_name"] = s.ProductName
	s.fieldMap["recommend_status"] = s.RecommendStatus
	s.fieldMap["sort"] = s.Sort
}

func (s smsHomeNewProduct) clone(db *gorm.DB) smsHomeNewProduct {
	s.smsHomeNewProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsHomeNewProduct) replaceDB(db *gorm.DB) smsHomeNewProduct {
	s.smsHomeNewProductDo.ReplaceDB(db)
	return s
}

type smsHomeNewProductDo struct{ gen.DO }

type ISmsHomeNewProductDo interface {
	gen.SubQuery
	Debug() ISmsHomeNewProductDo
	WithContext(ctx context.Context) ISmsHomeNewProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsHomeNewProductDo
	WriteDB() ISmsHomeNewProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsHomeNewProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsHomeNewProductDo
	Not(conds ...gen.Condition) ISmsHomeNewProductDo
	Or(conds ...gen.Condition) ISmsHomeNewProductDo
	Select(conds ...field.Expr) ISmsHomeNewProductDo
	Where(conds ...gen.Condition) ISmsHomeNewProductDo
	Order(conds ...field.Expr) ISmsHomeNewProductDo
	Distinct(cols ...field.Expr) ISmsHomeNewProductDo
	Omit(cols ...field.Expr) ISmsHomeNewProductDo
	Join(table schema.Tabler, on ...field.Expr) ISmsHomeNewProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeNewProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeNewProductDo
	Group(cols ...field.Expr) ISmsHomeNewProductDo
	Having(conds ...gen.Condition) ISmsHomeNewProductDo
	Limit(limit int) ISmsHomeNewProductDo
	Offset(offset int) ISmsHomeNewProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeNewProductDo
	Unscoped() ISmsHomeNewProductDo
	Create(values ...*model.SmsHomeNewProduct) error
	CreateInBatches(values []*model.SmsHomeNewProduct, batchSize int) error
	Save(values ...*model.SmsHomeNewProduct) error
	First() (*model.SmsHomeNewProduct, error)
	Take() (*model.SmsHomeNewProduct, error)
	Last() (*model.SmsHomeNewProduct, error)
	Find() ([]*model.SmsHomeNewProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeNewProduct, err error)
	FindInBatches(result *[]*model.SmsHomeNewProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsHomeNewProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsHomeNewProductDo
	Assign(attrs ...field.AssignExpr) ISmsHomeNewProductDo
	Joins(fields ...field.RelationField) ISmsHomeNewProductDo
	Preload(fields ...field.RelationField) ISmsHomeNewProductDo
	FirstOrInit() (*model.SmsHomeNewProduct, error)
	FirstOrCreate() (*model.SmsHomeNewProduct, error)
	FindByPage(offset int, limit int) (result []*model.SmsHomeNewProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsHomeNewProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsHomeNewProductDo) Debug() ISmsHomeNewProductDo {
	return s.withDO(s.DO.Debug())
}

func (s smsHomeNewProductDo) WithContext(ctx context.Context) ISmsHomeNewProductDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsHomeNewProductDo) ReadDB() ISmsHomeNewProductDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsHomeNewProductDo) WriteDB() ISmsHomeNewProductDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsHomeNewProductDo) Session(config *gorm.Session) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsHomeNewProductDo) Clauses(conds ...clause.Expression) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsHomeNewProductDo) Returning(value interface{}, columns ...string) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsHomeNewProductDo) Not(conds ...gen.Condition) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsHomeNewProductDo) Or(conds ...gen.Condition) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsHomeNewProductDo) Select(conds ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsHomeNewProductDo) Where(conds ...gen.Condition) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsHomeNewProductDo) Order(conds ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsHomeNewProductDo) Distinct(cols ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsHomeNewProductDo) Omit(cols ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsHomeNewProductDo) Join(table schema.Tabler, on ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsHomeNewProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsHomeNewProductDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsHomeNewProductDo) Group(cols ...field.Expr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsHomeNewProductDo) Having(conds ...gen.Condition) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsHomeNewProductDo) Limit(limit int) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsHomeNewProductDo) Offset(offset int) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsHomeNewProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsHomeNewProductDo) Unscoped() ISmsHomeNewProductDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsHomeNewProductDo) Create(values ...*model.SmsHomeNewProduct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsHomeNewProductDo) CreateInBatches(values []*model.SmsHomeNewProduct, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsHomeNewProductDo) Save(values ...*model.SmsHomeNewProduct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsHomeNewProductDo) First() (*model.SmsHomeNewProduct, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeNewProduct), nil
	}
}

func (s smsHomeNewProductDo) Take() (*model.SmsHomeNewProduct, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeNewProduct), nil
	}
}

func (s smsHomeNewProductDo) Last() (*model.SmsHomeNewProduct, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeNewProduct), nil
	}
}

func (s smsHomeNewProductDo) Find() ([]*model.SmsHomeNewProduct, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsHomeNewProduct), err
}

func (s smsHomeNewProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeNewProduct, err error) {
	buf := make([]*model.SmsHomeNewProduct, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsHomeNewProductDo) FindInBatches(result *[]*model.SmsHomeNewProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsHomeNewProductDo) Attrs(attrs ...field.AssignExpr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsHomeNewProductDo) Assign(attrs ...field.AssignExpr) ISmsHomeNewProductDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsHomeNewProductDo) Joins(fields ...field.RelationField) ISmsHomeNewProductDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsHomeNewProductDo) Preload(fields ...field.RelationField) ISmsHomeNewProductDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsHomeNewProductDo) FirstOrInit() (*model.SmsHomeNewProduct, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeNewProduct), nil
	}
}

func (s smsHomeNewProductDo) FirstOrCreate() (*model.SmsHomeNewProduct, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeNewProduct), nil
	}
}

func (s smsHomeNewProductDo) FindByPage(offset int, limit int) (result []*model.SmsHomeNewProduct, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsHomeNewProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsHomeNewProductDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsHomeNewProductDo) Delete(models ...*model.SmsHomeNewProduct) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsHomeNewProductDo) withDO(do gen.Dao) *smsHomeNewProductDo {
	s.DO = *do.(*gen.DO)
	return s
}

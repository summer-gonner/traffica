// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsHomeRecommendSubject(db *gorm.DB, opts ...gen.DOOption) smsHomeRecommendSubject {
	_smsHomeRecommendSubject := smsHomeRecommendSubject{}

	_smsHomeRecommendSubject.smsHomeRecommendSubjectDo.UseDB(db, opts...)
	_smsHomeRecommendSubject.smsHomeRecommendSubjectDo.UseModel(&model.SmsHomeRecommendSubject{})

	tableName := _smsHomeRecommendSubject.smsHomeRecommendSubjectDo.TableName()
	_smsHomeRecommendSubject.ALL = field.NewAsterisk(tableName)
	_smsHomeRecommendSubject.ID = field.NewInt64(tableName, "id")
	_smsHomeRecommendSubject.SubjectID = field.NewInt64(tableName, "subject_id")
	_smsHomeRecommendSubject.SubjectName = field.NewString(tableName, "subject_name")
	_smsHomeRecommendSubject.RecommendStatus = field.NewInt32(tableName, "recommend_status")
	_smsHomeRecommendSubject.Sort = field.NewInt32(tableName, "sort")

	_smsHomeRecommendSubject.fillFieldMap()

	return _smsHomeRecommendSubject
}

// smsHomeRecommendSubject 首页推荐专题表
type smsHomeRecommendSubject struct {
	smsHomeRecommendSubjectDo smsHomeRecommendSubjectDo

	ALL             field.Asterisk
	ID              field.Int64
	SubjectID       field.Int64  // 专题id
	SubjectName     field.String // 专题名称
	RecommendStatus field.Int32  // 推荐状态：0->不推荐;1->推荐
	Sort            field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (s smsHomeRecommendSubject) Table(newTableName string) *smsHomeRecommendSubject {
	s.smsHomeRecommendSubjectDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsHomeRecommendSubject) As(alias string) *smsHomeRecommendSubject {
	s.smsHomeRecommendSubjectDo.DO = *(s.smsHomeRecommendSubjectDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsHomeRecommendSubject) updateTableName(table string) *smsHomeRecommendSubject {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SubjectID = field.NewInt64(table, "subject_id")
	s.SubjectName = field.NewString(table, "subject_name")
	s.RecommendStatus = field.NewInt32(table, "recommend_status")
	s.Sort = field.NewInt32(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsHomeRecommendSubject) WithContext(ctx context.Context) ISmsHomeRecommendSubjectDo {
	return s.smsHomeRecommendSubjectDo.WithContext(ctx)
}

func (s smsHomeRecommendSubject) TableName() string { return s.smsHomeRecommendSubjectDo.TableName() }

func (s smsHomeRecommendSubject) Alias() string { return s.smsHomeRecommendSubjectDo.Alias() }

func (s smsHomeRecommendSubject) Columns(cols ...field.Expr) gen.Columns {
	return s.smsHomeRecommendSubjectDo.Columns(cols...)
}

func (s *smsHomeRecommendSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsHomeRecommendSubject) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["subject_id"] = s.SubjectID
	s.fieldMap["subject_name"] = s.SubjectName
	s.fieldMap["recommend_status"] = s.RecommendStatus
	s.fieldMap["sort"] = s.Sort
}

func (s smsHomeRecommendSubject) clone(db *gorm.DB) smsHomeRecommendSubject {
	s.smsHomeRecommendSubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsHomeRecommendSubject) replaceDB(db *gorm.DB) smsHomeRecommendSubject {
	s.smsHomeRecommendSubjectDo.ReplaceDB(db)
	return s
}

type smsHomeRecommendSubjectDo struct{ gen.DO }

type ISmsHomeRecommendSubjectDo interface {
	gen.SubQuery
	Debug() ISmsHomeRecommendSubjectDo
	WithContext(ctx context.Context) ISmsHomeRecommendSubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsHomeRecommendSubjectDo
	WriteDB() ISmsHomeRecommendSubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsHomeRecommendSubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsHomeRecommendSubjectDo
	Not(conds ...gen.Condition) ISmsHomeRecommendSubjectDo
	Or(conds ...gen.Condition) ISmsHomeRecommendSubjectDo
	Select(conds ...field.Expr) ISmsHomeRecommendSubjectDo
	Where(conds ...gen.Condition) ISmsHomeRecommendSubjectDo
	Order(conds ...field.Expr) ISmsHomeRecommendSubjectDo
	Distinct(cols ...field.Expr) ISmsHomeRecommendSubjectDo
	Omit(cols ...field.Expr) ISmsHomeRecommendSubjectDo
	Join(table schema.Tabler, on ...field.Expr) ISmsHomeRecommendSubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeRecommendSubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeRecommendSubjectDo
	Group(cols ...field.Expr) ISmsHomeRecommendSubjectDo
	Having(conds ...gen.Condition) ISmsHomeRecommendSubjectDo
	Limit(limit int) ISmsHomeRecommendSubjectDo
	Offset(offset int) ISmsHomeRecommendSubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeRecommendSubjectDo
	Unscoped() ISmsHomeRecommendSubjectDo
	Create(values ...*model.SmsHomeRecommendSubject) error
	CreateInBatches(values []*model.SmsHomeRecommendSubject, batchSize int) error
	Save(values ...*model.SmsHomeRecommendSubject) error
	First() (*model.SmsHomeRecommendSubject, error)
	Take() (*model.SmsHomeRecommendSubject, error)
	Last() (*model.SmsHomeRecommendSubject, error)
	Find() ([]*model.SmsHomeRecommendSubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeRecommendSubject, err error)
	FindInBatches(result *[]*model.SmsHomeRecommendSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsHomeRecommendSubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsHomeRecommendSubjectDo
	Assign(attrs ...field.AssignExpr) ISmsHomeRecommendSubjectDo
	Joins(fields ...field.RelationField) ISmsHomeRecommendSubjectDo
	Preload(fields ...field.RelationField) ISmsHomeRecommendSubjectDo
	FirstOrInit() (*model.SmsHomeRecommendSubject, error)
	FirstOrCreate() (*model.SmsHomeRecommendSubject, error)
	FindByPage(offset int, limit int) (result []*model.SmsHomeRecommendSubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsHomeRecommendSubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsHomeRecommendSubjectDo) Debug() ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Debug())
}

func (s smsHomeRecommendSubjectDo) WithContext(ctx context.Context) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsHomeRecommendSubjectDo) ReadDB() ISmsHomeRecommendSubjectDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsHomeRecommendSubjectDo) WriteDB() ISmsHomeRecommendSubjectDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsHomeRecommendSubjectDo) Session(config *gorm.Session) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsHomeRecommendSubjectDo) Clauses(conds ...clause.Expression) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsHomeRecommendSubjectDo) Returning(value interface{}, columns ...string) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsHomeRecommendSubjectDo) Not(conds ...gen.Condition) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsHomeRecommendSubjectDo) Or(conds ...gen.Condition) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsHomeRecommendSubjectDo) Select(conds ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsHomeRecommendSubjectDo) Where(conds ...gen.Condition) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsHomeRecommendSubjectDo) Order(conds ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsHomeRecommendSubjectDo) Distinct(cols ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsHomeRecommendSubjectDo) Omit(cols ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsHomeRecommendSubjectDo) Join(table schema.Tabler, on ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsHomeRecommendSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsHomeRecommendSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsHomeRecommendSubjectDo) Group(cols ...field.Expr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsHomeRecommendSubjectDo) Having(conds ...gen.Condition) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsHomeRecommendSubjectDo) Limit(limit int) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsHomeRecommendSubjectDo) Offset(offset int) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsHomeRecommendSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsHomeRecommendSubjectDo) Unscoped() ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsHomeRecommendSubjectDo) Create(values ...*model.SmsHomeRecommendSubject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsHomeRecommendSubjectDo) CreateInBatches(values []*model.SmsHomeRecommendSubject, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsHomeRecommendSubjectDo) Save(values ...*model.SmsHomeRecommendSubject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsHomeRecommendSubjectDo) First() (*model.SmsHomeRecommendSubject, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeRecommendSubject), nil
	}
}

func (s smsHomeRecommendSubjectDo) Take() (*model.SmsHomeRecommendSubject, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeRecommendSubject), nil
	}
}

func (s smsHomeRecommendSubjectDo) Last() (*model.SmsHomeRecommendSubject, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeRecommendSubject), nil
	}
}

func (s smsHomeRecommendSubjectDo) Find() ([]*model.SmsHomeRecommendSubject, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsHomeRecommendSubject), err
}

func (s smsHomeRecommendSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeRecommendSubject, err error) {
	buf := make([]*model.SmsHomeRecommendSubject, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsHomeRecommendSubjectDo) FindInBatches(result *[]*model.SmsHomeRecommendSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsHomeRecommendSubjectDo) Attrs(attrs ...field.AssignExpr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsHomeRecommendSubjectDo) Assign(attrs ...field.AssignExpr) ISmsHomeRecommendSubjectDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsHomeRecommendSubjectDo) Joins(fields ...field.RelationField) ISmsHomeRecommendSubjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsHomeRecommendSubjectDo) Preload(fields ...field.RelationField) ISmsHomeRecommendSubjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsHomeRecommendSubjectDo) FirstOrInit() (*model.SmsHomeRecommendSubject, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeRecommendSubject), nil
	}
}

func (s smsHomeRecommendSubjectDo) FirstOrCreate() (*model.SmsHomeRecommendSubject, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeRecommendSubject), nil
	}
}

func (s smsHomeRecommendSubjectDo) FindByPage(offset int, limit int) (result []*model.SmsHomeRecommendSubject, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsHomeRecommendSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsHomeRecommendSubjectDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsHomeRecommendSubjectDo) Delete(models ...*model.SmsHomeRecommendSubject) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsHomeRecommendSubjectDo) withDO(do gen.Dao) *smsHomeRecommendSubjectDo {
	s.DO = *do.(*gen.DO)
	return s
}

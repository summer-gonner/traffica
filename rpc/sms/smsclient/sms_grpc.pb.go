// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/sms/sms.proto

package smsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CouponService_AddCoupon_FullMethodName                                      = "/smsclient.CouponService/AddCoupon"
	CouponService_QueryCouponList_FullMethodName                                = "/smsclient.CouponService/QueryCouponList"
	CouponService_UpdateCoupon_FullMethodName                                   = "/smsclient.CouponService/UpdateCoupon"
	CouponService_DeleteCoupon_FullMethodName                                   = "/smsclient.CouponService/DeleteCoupon"
	CouponService_QueryCouponFindById_FullMethodName                            = "/smsclient.CouponService/QueryCouponFindById"
	CouponService_QueryCouponFindByIds_FullMethodName                           = "/smsclient.CouponService/QueryCouponFindByIds"
	CouponService_QueryCouponFindByProductIdAndProductCategoryId_FullMethodName = "/smsclient.CouponService/QueryCouponFindByProductIdAndProductCategoryId"
)

// CouponServiceClient is the client API for CouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponServiceClient interface {
	// 添加优惠券
	AddCoupon(ctx context.Context, in *AddOrUpdateCouponReq, opts ...grpc.CallOption) (*AddOrUpdateCouponResp, error)
	// 查询优惠券
	QueryCouponList(ctx context.Context, in *QueryCouponListReq, opts ...grpc.CallOption) (*QueryCouponListResp, error)
	// 更新优惠券
	UpdateCoupon(ctx context.Context, in *AddOrUpdateCouponReq, opts ...grpc.CallOption) (*AddOrUpdateCouponResp, error)
	// 删除优惠券
	DeleteCoupon(ctx context.Context, in *DeleteCouponReq, opts ...grpc.CallOption) (*DeleteCouponResp, error)
	// 根据优惠券id查询优惠券
	QueryCouponFindById(ctx context.Context, in *QueryCouponFindByIdReq, opts ...grpc.CallOption) (*QueryCouponFindByIdResp, error)
	// 根据优惠券ids查询优惠券
	QueryCouponFindByIds(ctx context.Context, in *QueryCouponFindByIdsReq, opts ...grpc.CallOption) (*QueryCouponFindByIdsResp, error)
	// 根据商品Id和分类id查询可用的优惠券(app)
	QueryCouponFindByProductIdAndProductCategoryId(ctx context.Context, in *CouponFindByProductIdAndProductCategoryIdReq, opts ...grpc.CallOption) (*CouponFindByProductIdAndProductCategoryIdResp, error)
}

type couponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponServiceClient(cc grpc.ClientConnInterface) CouponServiceClient {
	return &couponServiceClient{cc}
}

func (c *couponServiceClient) AddCoupon(ctx context.Context, in *AddOrUpdateCouponReq, opts ...grpc.CallOption) (*AddOrUpdateCouponResp, error) {
	out := new(AddOrUpdateCouponResp)
	err := c.cc.Invoke(ctx, CouponService_AddCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponList(ctx context.Context, in *QueryCouponListReq, opts ...grpc.CallOption) (*QueryCouponListResp, error) {
	out := new(QueryCouponListResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) UpdateCoupon(ctx context.Context, in *AddOrUpdateCouponReq, opts ...grpc.CallOption) (*AddOrUpdateCouponResp, error) {
	out := new(AddOrUpdateCouponResp)
	err := c.cc.Invoke(ctx, CouponService_UpdateCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) DeleteCoupon(ctx context.Context, in *DeleteCouponReq, opts ...grpc.CallOption) (*DeleteCouponResp, error) {
	out := new(DeleteCouponResp)
	err := c.cc.Invoke(ctx, CouponService_DeleteCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponFindById(ctx context.Context, in *QueryCouponFindByIdReq, opts ...grpc.CallOption) (*QueryCouponFindByIdResp, error) {
	out := new(QueryCouponFindByIdResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponFindByIds(ctx context.Context, in *QueryCouponFindByIdsReq, opts ...grpc.CallOption) (*QueryCouponFindByIdsResp, error) {
	out := new(QueryCouponFindByIdsResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponFindByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponFindByProductIdAndProductCategoryId(ctx context.Context, in *CouponFindByProductIdAndProductCategoryIdReq, opts ...grpc.CallOption) (*CouponFindByProductIdAndProductCategoryIdResp, error) {
	out := new(CouponFindByProductIdAndProductCategoryIdResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponFindByProductIdAndProductCategoryId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServiceServer is the server API for CouponService service.
// All implementations must embed UnimplementedCouponServiceServer
// for forward compatibility
type CouponServiceServer interface {
	// 添加优惠券
	AddCoupon(context.Context, *AddOrUpdateCouponReq) (*AddOrUpdateCouponResp, error)
	// 查询优惠券
	QueryCouponList(context.Context, *QueryCouponListReq) (*QueryCouponListResp, error)
	// 更新优惠券
	UpdateCoupon(context.Context, *AddOrUpdateCouponReq) (*AddOrUpdateCouponResp, error)
	// 删除优惠券
	DeleteCoupon(context.Context, *DeleteCouponReq) (*DeleteCouponResp, error)
	// 根据优惠券id查询优惠券
	QueryCouponFindById(context.Context, *QueryCouponFindByIdReq) (*QueryCouponFindByIdResp, error)
	// 根据优惠券ids查询优惠券
	QueryCouponFindByIds(context.Context, *QueryCouponFindByIdsReq) (*QueryCouponFindByIdsResp, error)
	// 根据商品Id和分类id查询可用的优惠券(app)
	QueryCouponFindByProductIdAndProductCategoryId(context.Context, *CouponFindByProductIdAndProductCategoryIdReq) (*CouponFindByProductIdAndProductCategoryIdResp, error)
	mustEmbedUnimplementedCouponServiceServer()
}

// UnimplementedCouponServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponServiceServer struct {
}

func (UnimplementedCouponServiceServer) AddCoupon(context.Context, *AddOrUpdateCouponReq) (*AddOrUpdateCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoupon not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponList(context.Context, *QueryCouponListReq) (*QueryCouponListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponList not implemented")
}
func (UnimplementedCouponServiceServer) UpdateCoupon(context.Context, *AddOrUpdateCouponReq) (*AddOrUpdateCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoupon not implemented")
}
func (UnimplementedCouponServiceServer) DeleteCoupon(context.Context, *DeleteCouponReq) (*DeleteCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoupon not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponFindById(context.Context, *QueryCouponFindByIdReq) (*QueryCouponFindByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponFindById not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponFindByIds(context.Context, *QueryCouponFindByIdsReq) (*QueryCouponFindByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponFindByIds not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponFindByProductIdAndProductCategoryId(context.Context, *CouponFindByProductIdAndProductCategoryIdReq) (*CouponFindByProductIdAndProductCategoryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponFindByProductIdAndProductCategoryId not implemented")
}
func (UnimplementedCouponServiceServer) mustEmbedUnimplementedCouponServiceServer() {}

// UnsafeCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServiceServer will
// result in compilation errors.
type UnsafeCouponServiceServer interface {
	mustEmbedUnimplementedCouponServiceServer()
}

func RegisterCouponServiceServer(s grpc.ServiceRegistrar, srv CouponServiceServer) {
	s.RegisterService(&CouponService_ServiceDesc, srv)
}

func _CouponService_AddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).AddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_AddCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).AddCoupon(ctx, req.(*AddOrUpdateCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponList(ctx, req.(*QueryCouponListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_UpdateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).UpdateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_UpdateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).UpdateCoupon(ctx, req.(*AddOrUpdateCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_DeleteCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).DeleteCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_DeleteCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).DeleteCoupon(ctx, req.(*DeleteCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponFindById(ctx, req.(*QueryCouponFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponFindByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponFindByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponFindByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponFindByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponFindByIds(ctx, req.(*QueryCouponFindByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponFindByProductIdAndProductCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponFindByProductIdAndProductCategoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponFindByProductIdAndProductCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponFindByProductIdAndProductCategoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponFindByProductIdAndProductCategoryId(ctx, req.(*CouponFindByProductIdAndProductCategoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponService_ServiceDesc is the grpc.ServiceDesc for CouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.CouponService",
	HandlerType: (*CouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCoupon",
			Handler:    _CouponService_AddCoupon_Handler,
		},
		{
			MethodName: "QueryCouponList",
			Handler:    _CouponService_QueryCouponList_Handler,
		},
		{
			MethodName: "UpdateCoupon",
			Handler:    _CouponService_UpdateCoupon_Handler,
		},
		{
			MethodName: "DeleteCoupon",
			Handler:    _CouponService_DeleteCoupon_Handler,
		},
		{
			MethodName: "QueryCouponFindById",
			Handler:    _CouponService_QueryCouponFindById_Handler,
		},
		{
			MethodName: "QueryCouponFindByIds",
			Handler:    _CouponService_QueryCouponFindByIds_Handler,
		},
		{
			MethodName: "QueryCouponFindByProductIdAndProductCategoryId",
			Handler:    _CouponService_QueryCouponFindByProductIdAndProductCategoryId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	CouponHistoryService_AddCouponHistory_FullMethodName             = "/smsclient.CouponHistoryService/AddCouponHistory"
	CouponHistoryService_DeleteCouponHistory_FullMethodName          = "/smsclient.CouponHistoryService/DeleteCouponHistory"
	CouponHistoryService_UpdateCouponHistory_FullMethodName          = "/smsclient.CouponHistoryService/UpdateCouponHistory"
	CouponHistoryService_UpdateCouponHistoryStatus_FullMethodName    = "/smsclient.CouponHistoryService/UpdateCouponHistoryStatus"
	CouponHistoryService_QueryCouponHistoryDetail_FullMethodName     = "/smsclient.CouponHistoryService/QueryCouponHistoryDetail"
	CouponHistoryService_QueryCouponHistoryList_FullMethodName       = "/smsclient.CouponHistoryService/QueryCouponHistoryList"
	CouponHistoryService_QueryCouponCount_FullMethodName             = "/smsclient.CouponHistoryService/QueryCouponCount"
	CouponHistoryService_QueryMemberCouponList_FullMethodName        = "/smsclient.CouponHistoryService/QueryMemberCouponList"
	CouponHistoryService_QueryCouponHistoryDetailList_FullMethodName = "/smsclient.CouponHistoryService/QueryCouponHistoryDetailList"
)

// CouponHistoryServiceClient is the client API for CouponHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponHistoryServiceClient interface {
	// 添加优惠券使用、领取历史表
	AddCouponHistory(ctx context.Context, in *AddCouponHistoryReq, opts ...grpc.CallOption) (*AddCouponHistoryResp, error)
	// 删除优惠券使用、领取历史表
	DeleteCouponHistory(ctx context.Context, in *DeleteCouponHistoryReq, opts ...grpc.CallOption) (*DeleteCouponHistoryResp, error)
	// 更新优惠券使用、领取历史表
	UpdateCouponHistory(ctx context.Context, in *UpdateCouponHistoryReq, opts ...grpc.CallOption) (*UpdateCouponHistoryResp, error)
	// 更新优惠券使用、领取历史表状态
	UpdateCouponHistoryStatus(ctx context.Context, in *UpdateCouponHistoryStatusReq, opts ...grpc.CallOption) (*UpdateCouponHistoryStatusResp, error)
	// 查询优惠券使用、领取历史表详情
	QueryCouponHistoryDetail(ctx context.Context, in *QueryCouponHistoryDetailReq, opts ...grpc.CallOption) (*QueryCouponHistoryDetailResp, error)
	// 查询优惠券使用、领取历史表列表
	QueryCouponHistoryList(ctx context.Context, in *QueryCouponHistoryListReq, opts ...grpc.CallOption) (*QueryCouponHistoryListResp, error)
	// 登录时获取用户还没有使用的获取优惠券数量
	QueryCouponCount(ctx context.Context, in *QueryCouponCountReq, opts ...grpc.CallOption) (*QueryCouponCountResp, error)
	// 获取会员优惠券
	QueryMemberCouponList(ctx context.Context, in *QueryMemberCouponListReq, opts ...grpc.CallOption) (*QueryMemberCouponListResp, error)
	// 获取该用户所有优惠券(包括商品和优惠券,商品分类和优惠券的关联关糸)
	QueryCouponHistoryDetailList(ctx context.Context, in *QueryCouponHistoryDetailListReq, opts ...grpc.CallOption) (*CouponHistoryDetailListResp, error)
}

type couponHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponHistoryServiceClient(cc grpc.ClientConnInterface) CouponHistoryServiceClient {
	return &couponHistoryServiceClient{cc}
}

func (c *couponHistoryServiceClient) AddCouponHistory(ctx context.Context, in *AddCouponHistoryReq, opts ...grpc.CallOption) (*AddCouponHistoryResp, error) {
	out := new(AddCouponHistoryResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_AddCouponHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) DeleteCouponHistory(ctx context.Context, in *DeleteCouponHistoryReq, opts ...grpc.CallOption) (*DeleteCouponHistoryResp, error) {
	out := new(DeleteCouponHistoryResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_DeleteCouponHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) UpdateCouponHistory(ctx context.Context, in *UpdateCouponHistoryReq, opts ...grpc.CallOption) (*UpdateCouponHistoryResp, error) {
	out := new(UpdateCouponHistoryResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_UpdateCouponHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) UpdateCouponHistoryStatus(ctx context.Context, in *UpdateCouponHistoryStatusReq, opts ...grpc.CallOption) (*UpdateCouponHistoryStatusResp, error) {
	out := new(UpdateCouponHistoryStatusResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_UpdateCouponHistoryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) QueryCouponHistoryDetail(ctx context.Context, in *QueryCouponHistoryDetailReq, opts ...grpc.CallOption) (*QueryCouponHistoryDetailResp, error) {
	out := new(QueryCouponHistoryDetailResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_QueryCouponHistoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) QueryCouponHistoryList(ctx context.Context, in *QueryCouponHistoryListReq, opts ...grpc.CallOption) (*QueryCouponHistoryListResp, error) {
	out := new(QueryCouponHistoryListResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_QueryCouponHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) QueryCouponCount(ctx context.Context, in *QueryCouponCountReq, opts ...grpc.CallOption) (*QueryCouponCountResp, error) {
	out := new(QueryCouponCountResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_QueryCouponCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) QueryMemberCouponList(ctx context.Context, in *QueryMemberCouponListReq, opts ...grpc.CallOption) (*QueryMemberCouponListResp, error) {
	out := new(QueryMemberCouponListResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_QueryMemberCouponList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponHistoryServiceClient) QueryCouponHistoryDetailList(ctx context.Context, in *QueryCouponHistoryDetailListReq, opts ...grpc.CallOption) (*CouponHistoryDetailListResp, error) {
	out := new(CouponHistoryDetailListResp)
	err := c.cc.Invoke(ctx, CouponHistoryService_QueryCouponHistoryDetailList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponHistoryServiceServer is the server API for CouponHistoryService service.
// All implementations must embed UnimplementedCouponHistoryServiceServer
// for forward compatibility
type CouponHistoryServiceServer interface {
	// 添加优惠券使用、领取历史表
	AddCouponHistory(context.Context, *AddCouponHistoryReq) (*AddCouponHistoryResp, error)
	// 删除优惠券使用、领取历史表
	DeleteCouponHistory(context.Context, *DeleteCouponHistoryReq) (*DeleteCouponHistoryResp, error)
	// 更新优惠券使用、领取历史表
	UpdateCouponHistory(context.Context, *UpdateCouponHistoryReq) (*UpdateCouponHistoryResp, error)
	// 更新优惠券使用、领取历史表状态
	UpdateCouponHistoryStatus(context.Context, *UpdateCouponHistoryStatusReq) (*UpdateCouponHistoryStatusResp, error)
	// 查询优惠券使用、领取历史表详情
	QueryCouponHistoryDetail(context.Context, *QueryCouponHistoryDetailReq) (*QueryCouponHistoryDetailResp, error)
	// 查询优惠券使用、领取历史表列表
	QueryCouponHistoryList(context.Context, *QueryCouponHistoryListReq) (*QueryCouponHistoryListResp, error)
	// 登录时获取用户还没有使用的获取优惠券数量
	QueryCouponCount(context.Context, *QueryCouponCountReq) (*QueryCouponCountResp, error)
	// 获取会员优惠券
	QueryMemberCouponList(context.Context, *QueryMemberCouponListReq) (*QueryMemberCouponListResp, error)
	// 获取该用户所有优惠券(包括商品和优惠券,商品分类和优惠券的关联关糸)
	QueryCouponHistoryDetailList(context.Context, *QueryCouponHistoryDetailListReq) (*CouponHistoryDetailListResp, error)
	mustEmbedUnimplementedCouponHistoryServiceServer()
}

// UnimplementedCouponHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponHistoryServiceServer struct {
}

func (UnimplementedCouponHistoryServiceServer) AddCouponHistory(context.Context, *AddCouponHistoryReq) (*AddCouponHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCouponHistory not implemented")
}
func (UnimplementedCouponHistoryServiceServer) DeleteCouponHistory(context.Context, *DeleteCouponHistoryReq) (*DeleteCouponHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponHistory not implemented")
}
func (UnimplementedCouponHistoryServiceServer) UpdateCouponHistory(context.Context, *UpdateCouponHistoryReq) (*UpdateCouponHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponHistory not implemented")
}
func (UnimplementedCouponHistoryServiceServer) UpdateCouponHistoryStatus(context.Context, *UpdateCouponHistoryStatusReq) (*UpdateCouponHistoryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponHistoryStatus not implemented")
}
func (UnimplementedCouponHistoryServiceServer) QueryCouponHistoryDetail(context.Context, *QueryCouponHistoryDetailReq) (*QueryCouponHistoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponHistoryDetail not implemented")
}
func (UnimplementedCouponHistoryServiceServer) QueryCouponHistoryList(context.Context, *QueryCouponHistoryListReq) (*QueryCouponHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponHistoryList not implemented")
}
func (UnimplementedCouponHistoryServiceServer) QueryCouponCount(context.Context, *QueryCouponCountReq) (*QueryCouponCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponCount not implemented")
}
func (UnimplementedCouponHistoryServiceServer) QueryMemberCouponList(context.Context, *QueryMemberCouponListReq) (*QueryMemberCouponListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberCouponList not implemented")
}
func (UnimplementedCouponHistoryServiceServer) QueryCouponHistoryDetailList(context.Context, *QueryCouponHistoryDetailListReq) (*CouponHistoryDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponHistoryDetailList not implemented")
}
func (UnimplementedCouponHistoryServiceServer) mustEmbedUnimplementedCouponHistoryServiceServer() {}

// UnsafeCouponHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponHistoryServiceServer will
// result in compilation errors.
type UnsafeCouponHistoryServiceServer interface {
	mustEmbedUnimplementedCouponHistoryServiceServer()
}

func RegisterCouponHistoryServiceServer(s grpc.ServiceRegistrar, srv CouponHistoryServiceServer) {
	s.RegisterService(&CouponHistoryService_ServiceDesc, srv)
}

func _CouponHistoryService_AddCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).AddCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_AddCouponHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).AddCouponHistory(ctx, req.(*AddCouponHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_DeleteCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).DeleteCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_DeleteCouponHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).DeleteCouponHistory(ctx, req.(*DeleteCouponHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_UpdateCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).UpdateCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_UpdateCouponHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).UpdateCouponHistory(ctx, req.(*UpdateCouponHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_UpdateCouponHistoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponHistoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).UpdateCouponHistoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_UpdateCouponHistoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).UpdateCouponHistoryStatus(ctx, req.(*UpdateCouponHistoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_QueryCouponHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponHistoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).QueryCouponHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_QueryCouponHistoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).QueryCouponHistoryDetail(ctx, req.(*QueryCouponHistoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_QueryCouponHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).QueryCouponHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_QueryCouponHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).QueryCouponHistoryList(ctx, req.(*QueryCouponHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_QueryCouponCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).QueryCouponCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_QueryCouponCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).QueryCouponCount(ctx, req.(*QueryCouponCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_QueryMemberCouponList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberCouponListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).QueryMemberCouponList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_QueryMemberCouponList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).QueryMemberCouponList(ctx, req.(*QueryMemberCouponListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponHistoryService_QueryCouponHistoryDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponHistoryDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponHistoryServiceServer).QueryCouponHistoryDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponHistoryService_QueryCouponHistoryDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponHistoryServiceServer).QueryCouponHistoryDetailList(ctx, req.(*QueryCouponHistoryDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponHistoryService_ServiceDesc is the grpc.ServiceDesc for CouponHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.CouponHistoryService",
	HandlerType: (*CouponHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCouponHistory",
			Handler:    _CouponHistoryService_AddCouponHistory_Handler,
		},
		{
			MethodName: "DeleteCouponHistory",
			Handler:    _CouponHistoryService_DeleteCouponHistory_Handler,
		},
		{
			MethodName: "UpdateCouponHistory",
			Handler:    _CouponHistoryService_UpdateCouponHistory_Handler,
		},
		{
			MethodName: "UpdateCouponHistoryStatus",
			Handler:    _CouponHistoryService_UpdateCouponHistoryStatus_Handler,
		},
		{
			MethodName: "QueryCouponHistoryDetail",
			Handler:    _CouponHistoryService_QueryCouponHistoryDetail_Handler,
		},
		{
			MethodName: "QueryCouponHistoryList",
			Handler:    _CouponHistoryService_QueryCouponHistoryList_Handler,
		},
		{
			MethodName: "QueryCouponCount",
			Handler:    _CouponHistoryService_QueryCouponCount_Handler,
		},
		{
			MethodName: "QueryMemberCouponList",
			Handler:    _CouponHistoryService_QueryMemberCouponList_Handler,
		},
		{
			MethodName: "QueryCouponHistoryDetailList",
			Handler:    _CouponHistoryService_QueryCouponHistoryDetailList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	FlashPromotionService_AddFlashPromotion_FullMethodName             = "/smsclient.FlashPromotionService/AddFlashPromotion"
	FlashPromotionService_DeleteFlashPromotion_FullMethodName          = "/smsclient.FlashPromotionService/DeleteFlashPromotion"
	FlashPromotionService_UpdateFlashPromotion_FullMethodName          = "/smsclient.FlashPromotionService/UpdateFlashPromotion"
	FlashPromotionService_UpdateFlashPromotionStatus_FullMethodName    = "/smsclient.FlashPromotionService/UpdateFlashPromotionStatus"
	FlashPromotionService_QueryFlashPromotionDetail_FullMethodName     = "/smsclient.FlashPromotionService/QueryFlashPromotionDetail"
	FlashPromotionService_QueryFlashPromotionList_FullMethodName       = "/smsclient.FlashPromotionService/QueryFlashPromotionList"
	FlashPromotionService_QueryFlashPromotionListByDate_FullMethodName = "/smsclient.FlashPromotionService/QueryFlashPromotionListByDate"
)

// FlashPromotionServiceClient is the client API for FlashPromotionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashPromotionServiceClient interface {
	// 添加限时购表
	AddFlashPromotion(ctx context.Context, in *AddFlashPromotionReq, opts ...grpc.CallOption) (*AddFlashPromotionResp, error)
	// 删除限时购表
	DeleteFlashPromotion(ctx context.Context, in *DeleteFlashPromotionReq, opts ...grpc.CallOption) (*DeleteFlashPromotionResp, error)
	// 更新限时购表
	UpdateFlashPromotion(ctx context.Context, in *UpdateFlashPromotionReq, opts ...grpc.CallOption) (*UpdateFlashPromotionResp, error)
	// 更新限时购表状态
	UpdateFlashPromotionStatus(ctx context.Context, in *UpdateFlashPromotionStatusReq, opts ...grpc.CallOption) (*UpdateFlashPromotionStatusResp, error)
	// 查询限时购表详情
	QueryFlashPromotionDetail(ctx context.Context, in *QueryFlashPromotionDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionDetailResp, error)
	// 查询限时购表列表
	QueryFlashPromotionList(ctx context.Context, in *QueryFlashPromotionListReq, opts ...grpc.CallOption) (*QueryFlashPromotionListResp, error)
	// 查询当前时间是否有秒杀活动
	QueryFlashPromotionListByDate(ctx context.Context, in *QueryFlashPromotionListByDateReq, opts ...grpc.CallOption) (*QueryFlashPromotionListByDateResp, error)
}

type flashPromotionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashPromotionServiceClient(cc grpc.ClientConnInterface) FlashPromotionServiceClient {
	return &flashPromotionServiceClient{cc}
}

func (c *flashPromotionServiceClient) AddFlashPromotion(ctx context.Context, in *AddFlashPromotionReq, opts ...grpc.CallOption) (*AddFlashPromotionResp, error) {
	out := new(AddFlashPromotionResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_AddFlashPromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionServiceClient) DeleteFlashPromotion(ctx context.Context, in *DeleteFlashPromotionReq, opts ...grpc.CallOption) (*DeleteFlashPromotionResp, error) {
	out := new(DeleteFlashPromotionResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_DeleteFlashPromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionServiceClient) UpdateFlashPromotion(ctx context.Context, in *UpdateFlashPromotionReq, opts ...grpc.CallOption) (*UpdateFlashPromotionResp, error) {
	out := new(UpdateFlashPromotionResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_UpdateFlashPromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionServiceClient) UpdateFlashPromotionStatus(ctx context.Context, in *UpdateFlashPromotionStatusReq, opts ...grpc.CallOption) (*UpdateFlashPromotionStatusResp, error) {
	out := new(UpdateFlashPromotionStatusResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_UpdateFlashPromotionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionServiceClient) QueryFlashPromotionDetail(ctx context.Context, in *QueryFlashPromotionDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionDetailResp, error) {
	out := new(QueryFlashPromotionDetailResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_QueryFlashPromotionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionServiceClient) QueryFlashPromotionList(ctx context.Context, in *QueryFlashPromotionListReq, opts ...grpc.CallOption) (*QueryFlashPromotionListResp, error) {
	out := new(QueryFlashPromotionListResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_QueryFlashPromotionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionServiceClient) QueryFlashPromotionListByDate(ctx context.Context, in *QueryFlashPromotionListByDateReq, opts ...grpc.CallOption) (*QueryFlashPromotionListByDateResp, error) {
	out := new(QueryFlashPromotionListByDateResp)
	err := c.cc.Invoke(ctx, FlashPromotionService_QueryFlashPromotionListByDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashPromotionServiceServer is the server API for FlashPromotionService service.
// All implementations must embed UnimplementedFlashPromotionServiceServer
// for forward compatibility
type FlashPromotionServiceServer interface {
	// 添加限时购表
	AddFlashPromotion(context.Context, *AddFlashPromotionReq) (*AddFlashPromotionResp, error)
	// 删除限时购表
	DeleteFlashPromotion(context.Context, *DeleteFlashPromotionReq) (*DeleteFlashPromotionResp, error)
	// 更新限时购表
	UpdateFlashPromotion(context.Context, *UpdateFlashPromotionReq) (*UpdateFlashPromotionResp, error)
	// 更新限时购表状态
	UpdateFlashPromotionStatus(context.Context, *UpdateFlashPromotionStatusReq) (*UpdateFlashPromotionStatusResp, error)
	// 查询限时购表详情
	QueryFlashPromotionDetail(context.Context, *QueryFlashPromotionDetailReq) (*QueryFlashPromotionDetailResp, error)
	// 查询限时购表列表
	QueryFlashPromotionList(context.Context, *QueryFlashPromotionListReq) (*QueryFlashPromotionListResp, error)
	// 查询当前时间是否有秒杀活动
	QueryFlashPromotionListByDate(context.Context, *QueryFlashPromotionListByDateReq) (*QueryFlashPromotionListByDateResp, error)
	mustEmbedUnimplementedFlashPromotionServiceServer()
}

// UnimplementedFlashPromotionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashPromotionServiceServer struct {
}

func (UnimplementedFlashPromotionServiceServer) AddFlashPromotion(context.Context, *AddFlashPromotionReq) (*AddFlashPromotionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlashPromotion not implemented")
}
func (UnimplementedFlashPromotionServiceServer) DeleteFlashPromotion(context.Context, *DeleteFlashPromotionReq) (*DeleteFlashPromotionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashPromotion not implemented")
}
func (UnimplementedFlashPromotionServiceServer) UpdateFlashPromotion(context.Context, *UpdateFlashPromotionReq) (*UpdateFlashPromotionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashPromotion not implemented")
}
func (UnimplementedFlashPromotionServiceServer) UpdateFlashPromotionStatus(context.Context, *UpdateFlashPromotionStatusReq) (*UpdateFlashPromotionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashPromotionStatus not implemented")
}
func (UnimplementedFlashPromotionServiceServer) QueryFlashPromotionDetail(context.Context, *QueryFlashPromotionDetailReq) (*QueryFlashPromotionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionDetail not implemented")
}
func (UnimplementedFlashPromotionServiceServer) QueryFlashPromotionList(context.Context, *QueryFlashPromotionListReq) (*QueryFlashPromotionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionList not implemented")
}
func (UnimplementedFlashPromotionServiceServer) QueryFlashPromotionListByDate(context.Context, *QueryFlashPromotionListByDateReq) (*QueryFlashPromotionListByDateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionListByDate not implemented")
}
func (UnimplementedFlashPromotionServiceServer) mustEmbedUnimplementedFlashPromotionServiceServer() {}

// UnsafeFlashPromotionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashPromotionServiceServer will
// result in compilation errors.
type UnsafeFlashPromotionServiceServer interface {
	mustEmbedUnimplementedFlashPromotionServiceServer()
}

func RegisterFlashPromotionServiceServer(s grpc.ServiceRegistrar, srv FlashPromotionServiceServer) {
	s.RegisterService(&FlashPromotionService_ServiceDesc, srv)
}

func _FlashPromotionService_AddFlashPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlashPromotionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).AddFlashPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_AddFlashPromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).AddFlashPromotion(ctx, req.(*AddFlashPromotionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionService_DeleteFlashPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashPromotionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).DeleteFlashPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_DeleteFlashPromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).DeleteFlashPromotion(ctx, req.(*DeleteFlashPromotionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionService_UpdateFlashPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashPromotionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).UpdateFlashPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_UpdateFlashPromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).UpdateFlashPromotion(ctx, req.(*UpdateFlashPromotionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionService_UpdateFlashPromotionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashPromotionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).UpdateFlashPromotionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_UpdateFlashPromotionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).UpdateFlashPromotionStatus(ctx, req.(*UpdateFlashPromotionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionService_QueryFlashPromotionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).QueryFlashPromotionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_QueryFlashPromotionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).QueryFlashPromotionDetail(ctx, req.(*QueryFlashPromotionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionService_QueryFlashPromotionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).QueryFlashPromotionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_QueryFlashPromotionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).QueryFlashPromotionList(ctx, req.(*QueryFlashPromotionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionService_QueryFlashPromotionListByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionListByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionServiceServer).QueryFlashPromotionListByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionService_QueryFlashPromotionListByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionServiceServer).QueryFlashPromotionListByDate(ctx, req.(*QueryFlashPromotionListByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashPromotionService_ServiceDesc is the grpc.ServiceDesc for FlashPromotionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashPromotionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.FlashPromotionService",
	HandlerType: (*FlashPromotionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFlashPromotion",
			Handler:    _FlashPromotionService_AddFlashPromotion_Handler,
		},
		{
			MethodName: "DeleteFlashPromotion",
			Handler:    _FlashPromotionService_DeleteFlashPromotion_Handler,
		},
		{
			MethodName: "UpdateFlashPromotion",
			Handler:    _FlashPromotionService_UpdateFlashPromotion_Handler,
		},
		{
			MethodName: "UpdateFlashPromotionStatus",
			Handler:    _FlashPromotionService_UpdateFlashPromotionStatus_Handler,
		},
		{
			MethodName: "QueryFlashPromotionDetail",
			Handler:    _FlashPromotionService_QueryFlashPromotionDetail_Handler,
		},
		{
			MethodName: "QueryFlashPromotionList",
			Handler:    _FlashPromotionService_QueryFlashPromotionList_Handler,
		},
		{
			MethodName: "QueryFlashPromotionListByDate",
			Handler:    _FlashPromotionService_QueryFlashPromotionListByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	FlashPromotionLogService_AddFlashPromotionLog_FullMethodName         = "/smsclient.FlashPromotionLogService/AddFlashPromotionLog"
	FlashPromotionLogService_DeleteFlashPromotionLog_FullMethodName      = "/smsclient.FlashPromotionLogService/DeleteFlashPromotionLog"
	FlashPromotionLogService_QueryFlashPromotionLogDetail_FullMethodName = "/smsclient.FlashPromotionLogService/QueryFlashPromotionLogDetail"
	FlashPromotionLogService_QueryFlashPromotionLogList_FullMethodName   = "/smsclient.FlashPromotionLogService/QueryFlashPromotionLogList"
)

// FlashPromotionLogServiceClient is the client API for FlashPromotionLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashPromotionLogServiceClient interface {
	// 添加限时购通知记录
	AddFlashPromotionLog(ctx context.Context, in *AddFlashPromotionLogReq, opts ...grpc.CallOption) (*AddFlashPromotionLogResp, error)
	// 删除限时购通知记录
	DeleteFlashPromotionLog(ctx context.Context, in *DeleteFlashPromotionLogReq, opts ...grpc.CallOption) (*DeleteFlashPromotionLogResp, error)
	// 查询限时购通知记录详情
	QueryFlashPromotionLogDetail(ctx context.Context, in *QueryFlashPromotionLogDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionLogDetailResp, error)
	// 查询限时购通知记录列表
	QueryFlashPromotionLogList(ctx context.Context, in *QueryFlashPromotionLogListReq, opts ...grpc.CallOption) (*QueryFlashPromotionLogListResp, error)
}

type flashPromotionLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashPromotionLogServiceClient(cc grpc.ClientConnInterface) FlashPromotionLogServiceClient {
	return &flashPromotionLogServiceClient{cc}
}

func (c *flashPromotionLogServiceClient) AddFlashPromotionLog(ctx context.Context, in *AddFlashPromotionLogReq, opts ...grpc.CallOption) (*AddFlashPromotionLogResp, error) {
	out := new(AddFlashPromotionLogResp)
	err := c.cc.Invoke(ctx, FlashPromotionLogService_AddFlashPromotionLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionLogServiceClient) DeleteFlashPromotionLog(ctx context.Context, in *DeleteFlashPromotionLogReq, opts ...grpc.CallOption) (*DeleteFlashPromotionLogResp, error) {
	out := new(DeleteFlashPromotionLogResp)
	err := c.cc.Invoke(ctx, FlashPromotionLogService_DeleteFlashPromotionLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionLogServiceClient) QueryFlashPromotionLogDetail(ctx context.Context, in *QueryFlashPromotionLogDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionLogDetailResp, error) {
	out := new(QueryFlashPromotionLogDetailResp)
	err := c.cc.Invoke(ctx, FlashPromotionLogService_QueryFlashPromotionLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionLogServiceClient) QueryFlashPromotionLogList(ctx context.Context, in *QueryFlashPromotionLogListReq, opts ...grpc.CallOption) (*QueryFlashPromotionLogListResp, error) {
	out := new(QueryFlashPromotionLogListResp)
	err := c.cc.Invoke(ctx, FlashPromotionLogService_QueryFlashPromotionLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashPromotionLogServiceServer is the server API for FlashPromotionLogService service.
// All implementations must embed UnimplementedFlashPromotionLogServiceServer
// for forward compatibility
type FlashPromotionLogServiceServer interface {
	// 添加限时购通知记录
	AddFlashPromotionLog(context.Context, *AddFlashPromotionLogReq) (*AddFlashPromotionLogResp, error)
	// 删除限时购通知记录
	DeleteFlashPromotionLog(context.Context, *DeleteFlashPromotionLogReq) (*DeleteFlashPromotionLogResp, error)
	// 查询限时购通知记录详情
	QueryFlashPromotionLogDetail(context.Context, *QueryFlashPromotionLogDetailReq) (*QueryFlashPromotionLogDetailResp, error)
	// 查询限时购通知记录列表
	QueryFlashPromotionLogList(context.Context, *QueryFlashPromotionLogListReq) (*QueryFlashPromotionLogListResp, error)
	mustEmbedUnimplementedFlashPromotionLogServiceServer()
}

// UnimplementedFlashPromotionLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashPromotionLogServiceServer struct {
}

func (UnimplementedFlashPromotionLogServiceServer) AddFlashPromotionLog(context.Context, *AddFlashPromotionLogReq) (*AddFlashPromotionLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlashPromotionLog not implemented")
}
func (UnimplementedFlashPromotionLogServiceServer) DeleteFlashPromotionLog(context.Context, *DeleteFlashPromotionLogReq) (*DeleteFlashPromotionLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashPromotionLog not implemented")
}
func (UnimplementedFlashPromotionLogServiceServer) QueryFlashPromotionLogDetail(context.Context, *QueryFlashPromotionLogDetailReq) (*QueryFlashPromotionLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionLogDetail not implemented")
}
func (UnimplementedFlashPromotionLogServiceServer) QueryFlashPromotionLogList(context.Context, *QueryFlashPromotionLogListReq) (*QueryFlashPromotionLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionLogList not implemented")
}
func (UnimplementedFlashPromotionLogServiceServer) mustEmbedUnimplementedFlashPromotionLogServiceServer() {
}

// UnsafeFlashPromotionLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashPromotionLogServiceServer will
// result in compilation errors.
type UnsafeFlashPromotionLogServiceServer interface {
	mustEmbedUnimplementedFlashPromotionLogServiceServer()
}

func RegisterFlashPromotionLogServiceServer(s grpc.ServiceRegistrar, srv FlashPromotionLogServiceServer) {
	s.RegisterService(&FlashPromotionLogService_ServiceDesc, srv)
}

func _FlashPromotionLogService_AddFlashPromotionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlashPromotionLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionLogServiceServer).AddFlashPromotionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionLogService_AddFlashPromotionLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionLogServiceServer).AddFlashPromotionLog(ctx, req.(*AddFlashPromotionLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionLogService_DeleteFlashPromotionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashPromotionLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionLogServiceServer).DeleteFlashPromotionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionLogService_DeleteFlashPromotionLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionLogServiceServer).DeleteFlashPromotionLog(ctx, req.(*DeleteFlashPromotionLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionLogService_QueryFlashPromotionLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionLogServiceServer).QueryFlashPromotionLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionLogService_QueryFlashPromotionLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionLogServiceServer).QueryFlashPromotionLogDetail(ctx, req.(*QueryFlashPromotionLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionLogService_QueryFlashPromotionLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionLogServiceServer).QueryFlashPromotionLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionLogService_QueryFlashPromotionLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionLogServiceServer).QueryFlashPromotionLogList(ctx, req.(*QueryFlashPromotionLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashPromotionLogService_ServiceDesc is the grpc.ServiceDesc for FlashPromotionLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashPromotionLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.FlashPromotionLogService",
	HandlerType: (*FlashPromotionLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFlashPromotionLog",
			Handler:    _FlashPromotionLogService_AddFlashPromotionLog_Handler,
		},
		{
			MethodName: "DeleteFlashPromotionLog",
			Handler:    _FlashPromotionLogService_DeleteFlashPromotionLog_Handler,
		},
		{
			MethodName: "QueryFlashPromotionLogDetail",
			Handler:    _FlashPromotionLogService_QueryFlashPromotionLogDetail_Handler,
		},
		{
			MethodName: "QueryFlashPromotionLogList",
			Handler:    _FlashPromotionLogService_QueryFlashPromotionLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	FlashPromotionProductRelationService_AddFlashPromotionProductRelation_FullMethodName         = "/smsclient.FlashPromotionProductRelationService/AddFlashPromotionProductRelation"
	FlashPromotionProductRelationService_DeleteFlashPromotionProductRelation_FullMethodName      = "/smsclient.FlashPromotionProductRelationService/DeleteFlashPromotionProductRelation"
	FlashPromotionProductRelationService_UpdateFlashPromotionProductRelation_FullMethodName      = "/smsclient.FlashPromotionProductRelationService/UpdateFlashPromotionProductRelation"
	FlashPromotionProductRelationService_QueryFlashPromotionProductRelationDetail_FullMethodName = "/smsclient.FlashPromotionProductRelationService/QueryFlashPromotionProductRelationDetail"
	FlashPromotionProductRelationService_QueryFlashPromotionProductRelationList_FullMethodName   = "/smsclient.FlashPromotionProductRelationService/QueryFlashPromotionProductRelationList"
)

// FlashPromotionProductRelationServiceClient is the client API for FlashPromotionProductRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashPromotionProductRelationServiceClient interface {
	// 添加商品限时购与商品关系表
	AddFlashPromotionProductRelation(ctx context.Context, in *AddFlashPromotionProductRelationReq, opts ...grpc.CallOption) (*AddFlashPromotionProductRelationResp, error)
	// 删除商品限时购与商品关系表
	DeleteFlashPromotionProductRelation(ctx context.Context, in *DeleteFlashPromotionProductRelationReq, opts ...grpc.CallOption) (*DeleteFlashPromotionProductRelationResp, error)
	// 更新商品限时购与商品关系表
	UpdateFlashPromotionProductRelation(ctx context.Context, in *UpdateFlashPromotionProductRelationReq, opts ...grpc.CallOption) (*UpdateFlashPromotionProductRelationResp, error)
	// 查询商品限时购与商品关系表详情
	QueryFlashPromotionProductRelationDetail(ctx context.Context, in *QueryFlashPromotionProductRelationDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionProductRelationDetailResp, error)
	// 查询商品限时购与商品关系表列表
	QueryFlashPromotionProductRelationList(ctx context.Context, in *QueryFlashPromotionProductRelationListReq, opts ...grpc.CallOption) (*QueryFlashPromotionProductRelationListResp, error)
}

type flashPromotionProductRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashPromotionProductRelationServiceClient(cc grpc.ClientConnInterface) FlashPromotionProductRelationServiceClient {
	return &flashPromotionProductRelationServiceClient{cc}
}

func (c *flashPromotionProductRelationServiceClient) AddFlashPromotionProductRelation(ctx context.Context, in *AddFlashPromotionProductRelationReq, opts ...grpc.CallOption) (*AddFlashPromotionProductRelationResp, error) {
	out := new(AddFlashPromotionProductRelationResp)
	err := c.cc.Invoke(ctx, FlashPromotionProductRelationService_AddFlashPromotionProductRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionProductRelationServiceClient) DeleteFlashPromotionProductRelation(ctx context.Context, in *DeleteFlashPromotionProductRelationReq, opts ...grpc.CallOption) (*DeleteFlashPromotionProductRelationResp, error) {
	out := new(DeleteFlashPromotionProductRelationResp)
	err := c.cc.Invoke(ctx, FlashPromotionProductRelationService_DeleteFlashPromotionProductRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionProductRelationServiceClient) UpdateFlashPromotionProductRelation(ctx context.Context, in *UpdateFlashPromotionProductRelationReq, opts ...grpc.CallOption) (*UpdateFlashPromotionProductRelationResp, error) {
	out := new(UpdateFlashPromotionProductRelationResp)
	err := c.cc.Invoke(ctx, FlashPromotionProductRelationService_UpdateFlashPromotionProductRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionProductRelationServiceClient) QueryFlashPromotionProductRelationDetail(ctx context.Context, in *QueryFlashPromotionProductRelationDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionProductRelationDetailResp, error) {
	out := new(QueryFlashPromotionProductRelationDetailResp)
	err := c.cc.Invoke(ctx, FlashPromotionProductRelationService_QueryFlashPromotionProductRelationDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionProductRelationServiceClient) QueryFlashPromotionProductRelationList(ctx context.Context, in *QueryFlashPromotionProductRelationListReq, opts ...grpc.CallOption) (*QueryFlashPromotionProductRelationListResp, error) {
	out := new(QueryFlashPromotionProductRelationListResp)
	err := c.cc.Invoke(ctx, FlashPromotionProductRelationService_QueryFlashPromotionProductRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashPromotionProductRelationServiceServer is the server API for FlashPromotionProductRelationService service.
// All implementations must embed UnimplementedFlashPromotionProductRelationServiceServer
// for forward compatibility
type FlashPromotionProductRelationServiceServer interface {
	// 添加商品限时购与商品关系表
	AddFlashPromotionProductRelation(context.Context, *AddFlashPromotionProductRelationReq) (*AddFlashPromotionProductRelationResp, error)
	// 删除商品限时购与商品关系表
	DeleteFlashPromotionProductRelation(context.Context, *DeleteFlashPromotionProductRelationReq) (*DeleteFlashPromotionProductRelationResp, error)
	// 更新商品限时购与商品关系表
	UpdateFlashPromotionProductRelation(context.Context, *UpdateFlashPromotionProductRelationReq) (*UpdateFlashPromotionProductRelationResp, error)
	// 查询商品限时购与商品关系表详情
	QueryFlashPromotionProductRelationDetail(context.Context, *QueryFlashPromotionProductRelationDetailReq) (*QueryFlashPromotionProductRelationDetailResp, error)
	// 查询商品限时购与商品关系表列表
	QueryFlashPromotionProductRelationList(context.Context, *QueryFlashPromotionProductRelationListReq) (*QueryFlashPromotionProductRelationListResp, error)
	mustEmbedUnimplementedFlashPromotionProductRelationServiceServer()
}

// UnimplementedFlashPromotionProductRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashPromotionProductRelationServiceServer struct {
}

func (UnimplementedFlashPromotionProductRelationServiceServer) AddFlashPromotionProductRelation(context.Context, *AddFlashPromotionProductRelationReq) (*AddFlashPromotionProductRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlashPromotionProductRelation not implemented")
}
func (UnimplementedFlashPromotionProductRelationServiceServer) DeleteFlashPromotionProductRelation(context.Context, *DeleteFlashPromotionProductRelationReq) (*DeleteFlashPromotionProductRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashPromotionProductRelation not implemented")
}
func (UnimplementedFlashPromotionProductRelationServiceServer) UpdateFlashPromotionProductRelation(context.Context, *UpdateFlashPromotionProductRelationReq) (*UpdateFlashPromotionProductRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashPromotionProductRelation not implemented")
}
func (UnimplementedFlashPromotionProductRelationServiceServer) QueryFlashPromotionProductRelationDetail(context.Context, *QueryFlashPromotionProductRelationDetailReq) (*QueryFlashPromotionProductRelationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionProductRelationDetail not implemented")
}
func (UnimplementedFlashPromotionProductRelationServiceServer) QueryFlashPromotionProductRelationList(context.Context, *QueryFlashPromotionProductRelationListReq) (*QueryFlashPromotionProductRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionProductRelationList not implemented")
}
func (UnimplementedFlashPromotionProductRelationServiceServer) mustEmbedUnimplementedFlashPromotionProductRelationServiceServer() {
}

// UnsafeFlashPromotionProductRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashPromotionProductRelationServiceServer will
// result in compilation errors.
type UnsafeFlashPromotionProductRelationServiceServer interface {
	mustEmbedUnimplementedFlashPromotionProductRelationServiceServer()
}

func RegisterFlashPromotionProductRelationServiceServer(s grpc.ServiceRegistrar, srv FlashPromotionProductRelationServiceServer) {
	s.RegisterService(&FlashPromotionProductRelationService_ServiceDesc, srv)
}

func _FlashPromotionProductRelationService_AddFlashPromotionProductRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlashPromotionProductRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionProductRelationServiceServer).AddFlashPromotionProductRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionProductRelationService_AddFlashPromotionProductRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionProductRelationServiceServer).AddFlashPromotionProductRelation(ctx, req.(*AddFlashPromotionProductRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionProductRelationService_DeleteFlashPromotionProductRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashPromotionProductRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionProductRelationServiceServer).DeleteFlashPromotionProductRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionProductRelationService_DeleteFlashPromotionProductRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionProductRelationServiceServer).DeleteFlashPromotionProductRelation(ctx, req.(*DeleteFlashPromotionProductRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionProductRelationService_UpdateFlashPromotionProductRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashPromotionProductRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionProductRelationServiceServer).UpdateFlashPromotionProductRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionProductRelationService_UpdateFlashPromotionProductRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionProductRelationServiceServer).UpdateFlashPromotionProductRelation(ctx, req.(*UpdateFlashPromotionProductRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionProductRelationService_QueryFlashPromotionProductRelationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionProductRelationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionProductRelationServiceServer).QueryFlashPromotionProductRelationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionProductRelationService_QueryFlashPromotionProductRelationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionProductRelationServiceServer).QueryFlashPromotionProductRelationDetail(ctx, req.(*QueryFlashPromotionProductRelationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionProductRelationService_QueryFlashPromotionProductRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionProductRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionProductRelationServiceServer).QueryFlashPromotionProductRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionProductRelationService_QueryFlashPromotionProductRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionProductRelationServiceServer).QueryFlashPromotionProductRelationList(ctx, req.(*QueryFlashPromotionProductRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashPromotionProductRelationService_ServiceDesc is the grpc.ServiceDesc for FlashPromotionProductRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashPromotionProductRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.FlashPromotionProductRelationService",
	HandlerType: (*FlashPromotionProductRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFlashPromotionProductRelation",
			Handler:    _FlashPromotionProductRelationService_AddFlashPromotionProductRelation_Handler,
		},
		{
			MethodName: "DeleteFlashPromotionProductRelation",
			Handler:    _FlashPromotionProductRelationService_DeleteFlashPromotionProductRelation_Handler,
		},
		{
			MethodName: "UpdateFlashPromotionProductRelation",
			Handler:    _FlashPromotionProductRelationService_UpdateFlashPromotionProductRelation_Handler,
		},
		{
			MethodName: "QueryFlashPromotionProductRelationDetail",
			Handler:    _FlashPromotionProductRelationService_QueryFlashPromotionProductRelationDetail_Handler,
		},
		{
			MethodName: "QueryFlashPromotionProductRelationList",
			Handler:    _FlashPromotionProductRelationService_QueryFlashPromotionProductRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	FlashPromotionSessionService_AddFlashPromotionSession_FullMethodName             = "/smsclient.FlashPromotionSessionService/AddFlashPromotionSession"
	FlashPromotionSessionService_DeleteFlashPromotionSession_FullMethodName          = "/smsclient.FlashPromotionSessionService/DeleteFlashPromotionSession"
	FlashPromotionSessionService_UpdateFlashPromotionSession_FullMethodName          = "/smsclient.FlashPromotionSessionService/UpdateFlashPromotionSession"
	FlashPromotionSessionService_UpdateFlashPromotionSessionStatus_FullMethodName    = "/smsclient.FlashPromotionSessionService/UpdateFlashPromotionSessionStatus"
	FlashPromotionSessionService_QueryFlashPromotionSessionDetail_FullMethodName     = "/smsclient.FlashPromotionSessionService/QueryFlashPromotionSessionDetail"
	FlashPromotionSessionService_QueryFlashPromotionSessionList_FullMethodName       = "/smsclient.FlashPromotionSessionService/QueryFlashPromotionSessionList"
	FlashPromotionSessionService_QueryFlashPromotionSessionListByTime_FullMethodName = "/smsclient.FlashPromotionSessionService/QueryFlashPromotionSessionListByTime"
)

// FlashPromotionSessionServiceClient is the client API for FlashPromotionSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashPromotionSessionServiceClient interface {
	// 添加限时购场次表
	AddFlashPromotionSession(ctx context.Context, in *AddFlashPromotionSessionReq, opts ...grpc.CallOption) (*AddFlashPromotionSessionResp, error)
	// 删除限时购场次表
	DeleteFlashPromotionSession(ctx context.Context, in *DeleteFlashPromotionSessionReq, opts ...grpc.CallOption) (*DeleteFlashPromotionSessionResp, error)
	// 更新限时购场次表
	UpdateFlashPromotionSession(ctx context.Context, in *UpdateFlashPromotionSessionReq, opts ...grpc.CallOption) (*UpdateFlashPromotionSessionResp, error)
	// 更新限时购场次表状态
	UpdateFlashPromotionSessionStatus(ctx context.Context, in *UpdateFlashPromotionSessionStatusReq, opts ...grpc.CallOption) (*UpdateFlashPromotionSessionStatusResp, error)
	// 查询限时购场次表详情
	QueryFlashPromotionSessionDetail(ctx context.Context, in *QueryFlashPromotionSessionDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionSessionDetailResp, error)
	// 查询限时购场次表列表
	QueryFlashPromotionSessionList(ctx context.Context, in *QueryFlashPromotionSessionListReq, opts ...grpc.CallOption) (*QueryFlashPromotionSessionListResp, error)
	// 根据时间查询限时购场次
	QueryFlashPromotionSessionListByTime(ctx context.Context, in *QueryFlashPromotionSessionListByTimeReq, opts ...grpc.CallOption) (*QueryFlashPromotionSessionListByTimeResp, error)
}

type flashPromotionSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashPromotionSessionServiceClient(cc grpc.ClientConnInterface) FlashPromotionSessionServiceClient {
	return &flashPromotionSessionServiceClient{cc}
}

func (c *flashPromotionSessionServiceClient) AddFlashPromotionSession(ctx context.Context, in *AddFlashPromotionSessionReq, opts ...grpc.CallOption) (*AddFlashPromotionSessionResp, error) {
	out := new(AddFlashPromotionSessionResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_AddFlashPromotionSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionSessionServiceClient) DeleteFlashPromotionSession(ctx context.Context, in *DeleteFlashPromotionSessionReq, opts ...grpc.CallOption) (*DeleteFlashPromotionSessionResp, error) {
	out := new(DeleteFlashPromotionSessionResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_DeleteFlashPromotionSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionSessionServiceClient) UpdateFlashPromotionSession(ctx context.Context, in *UpdateFlashPromotionSessionReq, opts ...grpc.CallOption) (*UpdateFlashPromotionSessionResp, error) {
	out := new(UpdateFlashPromotionSessionResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_UpdateFlashPromotionSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionSessionServiceClient) UpdateFlashPromotionSessionStatus(ctx context.Context, in *UpdateFlashPromotionSessionStatusReq, opts ...grpc.CallOption) (*UpdateFlashPromotionSessionStatusResp, error) {
	out := new(UpdateFlashPromotionSessionStatusResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_UpdateFlashPromotionSessionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionSessionServiceClient) QueryFlashPromotionSessionDetail(ctx context.Context, in *QueryFlashPromotionSessionDetailReq, opts ...grpc.CallOption) (*QueryFlashPromotionSessionDetailResp, error) {
	out := new(QueryFlashPromotionSessionDetailResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_QueryFlashPromotionSessionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionSessionServiceClient) QueryFlashPromotionSessionList(ctx context.Context, in *QueryFlashPromotionSessionListReq, opts ...grpc.CallOption) (*QueryFlashPromotionSessionListResp, error) {
	out := new(QueryFlashPromotionSessionListResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_QueryFlashPromotionSessionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashPromotionSessionServiceClient) QueryFlashPromotionSessionListByTime(ctx context.Context, in *QueryFlashPromotionSessionListByTimeReq, opts ...grpc.CallOption) (*QueryFlashPromotionSessionListByTimeResp, error) {
	out := new(QueryFlashPromotionSessionListByTimeResp)
	err := c.cc.Invoke(ctx, FlashPromotionSessionService_QueryFlashPromotionSessionListByTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashPromotionSessionServiceServer is the server API for FlashPromotionSessionService service.
// All implementations must embed UnimplementedFlashPromotionSessionServiceServer
// for forward compatibility
type FlashPromotionSessionServiceServer interface {
	// 添加限时购场次表
	AddFlashPromotionSession(context.Context, *AddFlashPromotionSessionReq) (*AddFlashPromotionSessionResp, error)
	// 删除限时购场次表
	DeleteFlashPromotionSession(context.Context, *DeleteFlashPromotionSessionReq) (*DeleteFlashPromotionSessionResp, error)
	// 更新限时购场次表
	UpdateFlashPromotionSession(context.Context, *UpdateFlashPromotionSessionReq) (*UpdateFlashPromotionSessionResp, error)
	// 更新限时购场次表状态
	UpdateFlashPromotionSessionStatus(context.Context, *UpdateFlashPromotionSessionStatusReq) (*UpdateFlashPromotionSessionStatusResp, error)
	// 查询限时购场次表详情
	QueryFlashPromotionSessionDetail(context.Context, *QueryFlashPromotionSessionDetailReq) (*QueryFlashPromotionSessionDetailResp, error)
	// 查询限时购场次表列表
	QueryFlashPromotionSessionList(context.Context, *QueryFlashPromotionSessionListReq) (*QueryFlashPromotionSessionListResp, error)
	// 根据时间查询限时购场次
	QueryFlashPromotionSessionListByTime(context.Context, *QueryFlashPromotionSessionListByTimeReq) (*QueryFlashPromotionSessionListByTimeResp, error)
	mustEmbedUnimplementedFlashPromotionSessionServiceServer()
}

// UnimplementedFlashPromotionSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashPromotionSessionServiceServer struct {
}

func (UnimplementedFlashPromotionSessionServiceServer) AddFlashPromotionSession(context.Context, *AddFlashPromotionSessionReq) (*AddFlashPromotionSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlashPromotionSession not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) DeleteFlashPromotionSession(context.Context, *DeleteFlashPromotionSessionReq) (*DeleteFlashPromotionSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashPromotionSession not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) UpdateFlashPromotionSession(context.Context, *UpdateFlashPromotionSessionReq) (*UpdateFlashPromotionSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashPromotionSession not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) UpdateFlashPromotionSessionStatus(context.Context, *UpdateFlashPromotionSessionStatusReq) (*UpdateFlashPromotionSessionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashPromotionSessionStatus not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) QueryFlashPromotionSessionDetail(context.Context, *QueryFlashPromotionSessionDetailReq) (*QueryFlashPromotionSessionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionSessionDetail not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) QueryFlashPromotionSessionList(context.Context, *QueryFlashPromotionSessionListReq) (*QueryFlashPromotionSessionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionSessionList not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) QueryFlashPromotionSessionListByTime(context.Context, *QueryFlashPromotionSessionListByTimeReq) (*QueryFlashPromotionSessionListByTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlashPromotionSessionListByTime not implemented")
}
func (UnimplementedFlashPromotionSessionServiceServer) mustEmbedUnimplementedFlashPromotionSessionServiceServer() {
}

// UnsafeFlashPromotionSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashPromotionSessionServiceServer will
// result in compilation errors.
type UnsafeFlashPromotionSessionServiceServer interface {
	mustEmbedUnimplementedFlashPromotionSessionServiceServer()
}

func RegisterFlashPromotionSessionServiceServer(s grpc.ServiceRegistrar, srv FlashPromotionSessionServiceServer) {
	s.RegisterService(&FlashPromotionSessionService_ServiceDesc, srv)
}

func _FlashPromotionSessionService_AddFlashPromotionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlashPromotionSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).AddFlashPromotionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_AddFlashPromotionSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).AddFlashPromotionSession(ctx, req.(*AddFlashPromotionSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionSessionService_DeleteFlashPromotionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashPromotionSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).DeleteFlashPromotionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_DeleteFlashPromotionSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).DeleteFlashPromotionSession(ctx, req.(*DeleteFlashPromotionSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionSessionService_UpdateFlashPromotionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashPromotionSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).UpdateFlashPromotionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_UpdateFlashPromotionSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).UpdateFlashPromotionSession(ctx, req.(*UpdateFlashPromotionSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionSessionService_UpdateFlashPromotionSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashPromotionSessionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).UpdateFlashPromotionSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_UpdateFlashPromotionSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).UpdateFlashPromotionSessionStatus(ctx, req.(*UpdateFlashPromotionSessionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionSessionService_QueryFlashPromotionSessionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionSessionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).QueryFlashPromotionSessionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_QueryFlashPromotionSessionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).QueryFlashPromotionSessionDetail(ctx, req.(*QueryFlashPromotionSessionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionSessionService_QueryFlashPromotionSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionSessionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).QueryFlashPromotionSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_QueryFlashPromotionSessionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).QueryFlashPromotionSessionList(ctx, req.(*QueryFlashPromotionSessionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashPromotionSessionService_QueryFlashPromotionSessionListByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlashPromotionSessionListByTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashPromotionSessionServiceServer).QueryFlashPromotionSessionListByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashPromotionSessionService_QueryFlashPromotionSessionListByTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashPromotionSessionServiceServer).QueryFlashPromotionSessionListByTime(ctx, req.(*QueryFlashPromotionSessionListByTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashPromotionSessionService_ServiceDesc is the grpc.ServiceDesc for FlashPromotionSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashPromotionSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.FlashPromotionSessionService",
	HandlerType: (*FlashPromotionSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFlashPromotionSession",
			Handler:    _FlashPromotionSessionService_AddFlashPromotionSession_Handler,
		},
		{
			MethodName: "DeleteFlashPromotionSession",
			Handler:    _FlashPromotionSessionService_DeleteFlashPromotionSession_Handler,
		},
		{
			MethodName: "UpdateFlashPromotionSession",
			Handler:    _FlashPromotionSessionService_UpdateFlashPromotionSession_Handler,
		},
		{
			MethodName: "UpdateFlashPromotionSessionStatus",
			Handler:    _FlashPromotionSessionService_UpdateFlashPromotionSessionStatus_Handler,
		},
		{
			MethodName: "QueryFlashPromotionSessionDetail",
			Handler:    _FlashPromotionSessionService_QueryFlashPromotionSessionDetail_Handler,
		},
		{
			MethodName: "QueryFlashPromotionSessionList",
			Handler:    _FlashPromotionSessionService_QueryFlashPromotionSessionList_Handler,
		},
		{
			MethodName: "QueryFlashPromotionSessionListByTime",
			Handler:    _FlashPromotionSessionService_QueryFlashPromotionSessionListByTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	HomeAdvertiseService_AddHomeAdvertise_FullMethodName          = "/smsclient.HomeAdvertiseService/AddHomeAdvertise"
	HomeAdvertiseService_DeleteHomeAdvertise_FullMethodName       = "/smsclient.HomeAdvertiseService/DeleteHomeAdvertise"
	HomeAdvertiseService_UpdateHomeAdvertise_FullMethodName       = "/smsclient.HomeAdvertiseService/UpdateHomeAdvertise"
	HomeAdvertiseService_UpdateHomeAdvertiseStatus_FullMethodName = "/smsclient.HomeAdvertiseService/UpdateHomeAdvertiseStatus"
	HomeAdvertiseService_QueryHomeAdvertiseDetail_FullMethodName  = "/smsclient.HomeAdvertiseService/QueryHomeAdvertiseDetail"
	HomeAdvertiseService_QueryHomeAdvertiseList_FullMethodName    = "/smsclient.HomeAdvertiseService/QueryHomeAdvertiseList"
)

// HomeAdvertiseServiceClient is the client API for HomeAdvertiseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeAdvertiseServiceClient interface {
	// 添加首页轮播广告表
	AddHomeAdvertise(ctx context.Context, in *AddHomeAdvertiseReq, opts ...grpc.CallOption) (*AddHomeAdvertiseResp, error)
	// 删除首页轮播广告表
	DeleteHomeAdvertise(ctx context.Context, in *DeleteHomeAdvertiseReq, opts ...grpc.CallOption) (*DeleteHomeAdvertiseResp, error)
	// 更新首页轮播广告表
	UpdateHomeAdvertise(ctx context.Context, in *UpdateHomeAdvertiseReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseResp, error)
	// 更新首页轮播广告表状态
	UpdateHomeAdvertiseStatus(ctx context.Context, in *UpdateHomeAdvertiseStatusReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseStatusResp, error)
	// 查询首页轮播广告表详情
	QueryHomeAdvertiseDetail(ctx context.Context, in *QueryHomeAdvertiseDetailReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseDetailResp, error)
	// 查询首页轮播广告表列表
	QueryHomeAdvertiseList(ctx context.Context, in *QueryHomeAdvertiseListReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseListResp, error)
}

type homeAdvertiseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeAdvertiseServiceClient(cc grpc.ClientConnInterface) HomeAdvertiseServiceClient {
	return &homeAdvertiseServiceClient{cc}
}

func (c *homeAdvertiseServiceClient) AddHomeAdvertise(ctx context.Context, in *AddHomeAdvertiseReq, opts ...grpc.CallOption) (*AddHomeAdvertiseResp, error) {
	out := new(AddHomeAdvertiseResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_AddHomeAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) DeleteHomeAdvertise(ctx context.Context, in *DeleteHomeAdvertiseReq, opts ...grpc.CallOption) (*DeleteHomeAdvertiseResp, error) {
	out := new(DeleteHomeAdvertiseResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_DeleteHomeAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) UpdateHomeAdvertise(ctx context.Context, in *UpdateHomeAdvertiseReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseResp, error) {
	out := new(UpdateHomeAdvertiseResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_UpdateHomeAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) UpdateHomeAdvertiseStatus(ctx context.Context, in *UpdateHomeAdvertiseStatusReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseStatusResp, error) {
	out := new(UpdateHomeAdvertiseStatusResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_UpdateHomeAdvertiseStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) QueryHomeAdvertiseDetail(ctx context.Context, in *QueryHomeAdvertiseDetailReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseDetailResp, error) {
	out := new(QueryHomeAdvertiseDetailResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_QueryHomeAdvertiseDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) QueryHomeAdvertiseList(ctx context.Context, in *QueryHomeAdvertiseListReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseListResp, error) {
	out := new(QueryHomeAdvertiseListResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_QueryHomeAdvertiseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeAdvertiseServiceServer is the server API for HomeAdvertiseService service.
// All implementations must embed UnimplementedHomeAdvertiseServiceServer
// for forward compatibility
type HomeAdvertiseServiceServer interface {
	// 添加首页轮播广告表
	AddHomeAdvertise(context.Context, *AddHomeAdvertiseReq) (*AddHomeAdvertiseResp, error)
	// 删除首页轮播广告表
	DeleteHomeAdvertise(context.Context, *DeleteHomeAdvertiseReq) (*DeleteHomeAdvertiseResp, error)
	// 更新首页轮播广告表
	UpdateHomeAdvertise(context.Context, *UpdateHomeAdvertiseReq) (*UpdateHomeAdvertiseResp, error)
	// 更新首页轮播广告表状态
	UpdateHomeAdvertiseStatus(context.Context, *UpdateHomeAdvertiseStatusReq) (*UpdateHomeAdvertiseStatusResp, error)
	// 查询首页轮播广告表详情
	QueryHomeAdvertiseDetail(context.Context, *QueryHomeAdvertiseDetailReq) (*QueryHomeAdvertiseDetailResp, error)
	// 查询首页轮播广告表列表
	QueryHomeAdvertiseList(context.Context, *QueryHomeAdvertiseListReq) (*QueryHomeAdvertiseListResp, error)
	mustEmbedUnimplementedHomeAdvertiseServiceServer()
}

// UnimplementedHomeAdvertiseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeAdvertiseServiceServer struct {
}

func (UnimplementedHomeAdvertiseServiceServer) AddHomeAdvertise(context.Context, *AddHomeAdvertiseReq) (*AddHomeAdvertiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomeAdvertise not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) DeleteHomeAdvertise(context.Context, *DeleteHomeAdvertiseReq) (*DeleteHomeAdvertiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeAdvertise not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) UpdateHomeAdvertise(context.Context, *UpdateHomeAdvertiseReq) (*UpdateHomeAdvertiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeAdvertise not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) UpdateHomeAdvertiseStatus(context.Context, *UpdateHomeAdvertiseStatusReq) (*UpdateHomeAdvertiseStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeAdvertiseStatus not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) QueryHomeAdvertiseDetail(context.Context, *QueryHomeAdvertiseDetailReq) (*QueryHomeAdvertiseDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeAdvertiseDetail not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) QueryHomeAdvertiseList(context.Context, *QueryHomeAdvertiseListReq) (*QueryHomeAdvertiseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeAdvertiseList not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) mustEmbedUnimplementedHomeAdvertiseServiceServer() {}

// UnsafeHomeAdvertiseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeAdvertiseServiceServer will
// result in compilation errors.
type UnsafeHomeAdvertiseServiceServer interface {
	mustEmbedUnimplementedHomeAdvertiseServiceServer()
}

func RegisterHomeAdvertiseServiceServer(s grpc.ServiceRegistrar, srv HomeAdvertiseServiceServer) {
	s.RegisterService(&HomeAdvertiseService_ServiceDesc, srv)
}

func _HomeAdvertiseService_AddHomeAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeAdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).AddHomeAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_AddHomeAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).AddHomeAdvertise(ctx, req.(*AddHomeAdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_DeleteHomeAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeAdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).DeleteHomeAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_DeleteHomeAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).DeleteHomeAdvertise(ctx, req.(*DeleteHomeAdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_UpdateHomeAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeAdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_UpdateHomeAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertise(ctx, req.(*UpdateHomeAdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_UpdateHomeAdvertiseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeAdvertiseStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertiseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_UpdateHomeAdvertiseStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertiseStatus(ctx, req.(*UpdateHomeAdvertiseStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_QueryHomeAdvertiseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeAdvertiseDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_QueryHomeAdvertiseDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseDetail(ctx, req.(*QueryHomeAdvertiseDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_QueryHomeAdvertiseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeAdvertiseListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_QueryHomeAdvertiseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseList(ctx, req.(*QueryHomeAdvertiseListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeAdvertiseService_ServiceDesc is the grpc.ServiceDesc for HomeAdvertiseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeAdvertiseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.HomeAdvertiseService",
	HandlerType: (*HomeAdvertiseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHomeAdvertise",
			Handler:    _HomeAdvertiseService_AddHomeAdvertise_Handler,
		},
		{
			MethodName: "DeleteHomeAdvertise",
			Handler:    _HomeAdvertiseService_DeleteHomeAdvertise_Handler,
		},
		{
			MethodName: "UpdateHomeAdvertise",
			Handler:    _HomeAdvertiseService_UpdateHomeAdvertise_Handler,
		},
		{
			MethodName: "UpdateHomeAdvertiseStatus",
			Handler:    _HomeAdvertiseService_UpdateHomeAdvertiseStatus_Handler,
		},
		{
			MethodName: "QueryHomeAdvertiseDetail",
			Handler:    _HomeAdvertiseService_QueryHomeAdvertiseDetail_Handler,
		},
		{
			MethodName: "QueryHomeAdvertiseList",
			Handler:    _HomeAdvertiseService_QueryHomeAdvertiseList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	HomeBrandService_AddHomeBrand_FullMethodName          = "/smsclient.HomeBrandService/AddHomeBrand"
	HomeBrandService_DeleteHomeBrand_FullMethodName       = "/smsclient.HomeBrandService/DeleteHomeBrand"
	HomeBrandService_UpdateHomeBrandSort_FullMethodName   = "/smsclient.HomeBrandService/UpdateHomeBrandSort"
	HomeBrandService_UpdateHomeBrandStatus_FullMethodName = "/smsclient.HomeBrandService/UpdateHomeBrandStatus"
	HomeBrandService_QueryHomeBrandDetail_FullMethodName  = "/smsclient.HomeBrandService/QueryHomeBrandDetail"
	HomeBrandService_QueryHomeBrandList_FullMethodName    = "/smsclient.HomeBrandService/QueryHomeBrandList"
)

// HomeBrandServiceClient is the client API for HomeBrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeBrandServiceClient interface {
	// 添加首页推荐品牌表
	AddHomeBrand(ctx context.Context, in *AddHomeBrandReq, opts ...grpc.CallOption) (*AddHomeBrandResp, error)
	// 删除首页推荐品牌表
	DeleteHomeBrand(ctx context.Context, in *DeleteHomeBrandReq, opts ...grpc.CallOption) (*DeleteHomeBrandResp, error)
	// 修改推荐品牌排序
	UpdateHomeBrandSort(ctx context.Context, in *UpdateHomeBrandSortReq, opts ...grpc.CallOption) (*UpdateHomeBrandSortResp, error)
	// 更新首页推荐品牌表状态
	UpdateHomeBrandStatus(ctx context.Context, in *UpdateHomeBrandStatusReq, opts ...grpc.CallOption) (*UpdateHomeBrandStatusResp, error)
	// 查询首页推荐品牌表详情
	QueryHomeBrandDetail(ctx context.Context, in *QueryHomeBrandDetailReq, opts ...grpc.CallOption) (*QueryHomeBrandDetailResp, error)
	// 查询首页推荐品牌表列表
	QueryHomeBrandList(ctx context.Context, in *QueryHomeBrandListReq, opts ...grpc.CallOption) (*QueryHomeBrandListResp, error)
}

type homeBrandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeBrandServiceClient(cc grpc.ClientConnInterface) HomeBrandServiceClient {
	return &homeBrandServiceClient{cc}
}

func (c *homeBrandServiceClient) AddHomeBrand(ctx context.Context, in *AddHomeBrandReq, opts ...grpc.CallOption) (*AddHomeBrandResp, error) {
	out := new(AddHomeBrandResp)
	err := c.cc.Invoke(ctx, HomeBrandService_AddHomeBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeBrandServiceClient) DeleteHomeBrand(ctx context.Context, in *DeleteHomeBrandReq, opts ...grpc.CallOption) (*DeleteHomeBrandResp, error) {
	out := new(DeleteHomeBrandResp)
	err := c.cc.Invoke(ctx, HomeBrandService_DeleteHomeBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeBrandServiceClient) UpdateHomeBrandSort(ctx context.Context, in *UpdateHomeBrandSortReq, opts ...grpc.CallOption) (*UpdateHomeBrandSortResp, error) {
	out := new(UpdateHomeBrandSortResp)
	err := c.cc.Invoke(ctx, HomeBrandService_UpdateHomeBrandSort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeBrandServiceClient) UpdateHomeBrandStatus(ctx context.Context, in *UpdateHomeBrandStatusReq, opts ...grpc.CallOption) (*UpdateHomeBrandStatusResp, error) {
	out := new(UpdateHomeBrandStatusResp)
	err := c.cc.Invoke(ctx, HomeBrandService_UpdateHomeBrandStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeBrandServiceClient) QueryHomeBrandDetail(ctx context.Context, in *QueryHomeBrandDetailReq, opts ...grpc.CallOption) (*QueryHomeBrandDetailResp, error) {
	out := new(QueryHomeBrandDetailResp)
	err := c.cc.Invoke(ctx, HomeBrandService_QueryHomeBrandDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeBrandServiceClient) QueryHomeBrandList(ctx context.Context, in *QueryHomeBrandListReq, opts ...grpc.CallOption) (*QueryHomeBrandListResp, error) {
	out := new(QueryHomeBrandListResp)
	err := c.cc.Invoke(ctx, HomeBrandService_QueryHomeBrandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeBrandServiceServer is the server API for HomeBrandService service.
// All implementations must embed UnimplementedHomeBrandServiceServer
// for forward compatibility
type HomeBrandServiceServer interface {
	// 添加首页推荐品牌表
	AddHomeBrand(context.Context, *AddHomeBrandReq) (*AddHomeBrandResp, error)
	// 删除首页推荐品牌表
	DeleteHomeBrand(context.Context, *DeleteHomeBrandReq) (*DeleteHomeBrandResp, error)
	// 修改推荐品牌排序
	UpdateHomeBrandSort(context.Context, *UpdateHomeBrandSortReq) (*UpdateHomeBrandSortResp, error)
	// 更新首页推荐品牌表状态
	UpdateHomeBrandStatus(context.Context, *UpdateHomeBrandStatusReq) (*UpdateHomeBrandStatusResp, error)
	// 查询首页推荐品牌表详情
	QueryHomeBrandDetail(context.Context, *QueryHomeBrandDetailReq) (*QueryHomeBrandDetailResp, error)
	// 查询首页推荐品牌表列表
	QueryHomeBrandList(context.Context, *QueryHomeBrandListReq) (*QueryHomeBrandListResp, error)
	mustEmbedUnimplementedHomeBrandServiceServer()
}

// UnimplementedHomeBrandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeBrandServiceServer struct {
}

func (UnimplementedHomeBrandServiceServer) AddHomeBrand(context.Context, *AddHomeBrandReq) (*AddHomeBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomeBrand not implemented")
}
func (UnimplementedHomeBrandServiceServer) DeleteHomeBrand(context.Context, *DeleteHomeBrandReq) (*DeleteHomeBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeBrand not implemented")
}
func (UnimplementedHomeBrandServiceServer) UpdateHomeBrandSort(context.Context, *UpdateHomeBrandSortReq) (*UpdateHomeBrandSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeBrandSort not implemented")
}
func (UnimplementedHomeBrandServiceServer) UpdateHomeBrandStatus(context.Context, *UpdateHomeBrandStatusReq) (*UpdateHomeBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeBrandStatus not implemented")
}
func (UnimplementedHomeBrandServiceServer) QueryHomeBrandDetail(context.Context, *QueryHomeBrandDetailReq) (*QueryHomeBrandDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeBrandDetail not implemented")
}
func (UnimplementedHomeBrandServiceServer) QueryHomeBrandList(context.Context, *QueryHomeBrandListReq) (*QueryHomeBrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeBrandList not implemented")
}
func (UnimplementedHomeBrandServiceServer) mustEmbedUnimplementedHomeBrandServiceServer() {}

// UnsafeHomeBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeBrandServiceServer will
// result in compilation errors.
type UnsafeHomeBrandServiceServer interface {
	mustEmbedUnimplementedHomeBrandServiceServer()
}

func RegisterHomeBrandServiceServer(s grpc.ServiceRegistrar, srv HomeBrandServiceServer) {
	s.RegisterService(&HomeBrandService_ServiceDesc, srv)
}

func _HomeBrandService_AddHomeBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeBrandServiceServer).AddHomeBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeBrandService_AddHomeBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeBrandServiceServer).AddHomeBrand(ctx, req.(*AddHomeBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeBrandService_DeleteHomeBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeBrandServiceServer).DeleteHomeBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeBrandService_DeleteHomeBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeBrandServiceServer).DeleteHomeBrand(ctx, req.(*DeleteHomeBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeBrandService_UpdateHomeBrandSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeBrandSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeBrandServiceServer).UpdateHomeBrandSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeBrandService_UpdateHomeBrandSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeBrandServiceServer).UpdateHomeBrandSort(ctx, req.(*UpdateHomeBrandSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeBrandService_UpdateHomeBrandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeBrandStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeBrandServiceServer).UpdateHomeBrandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeBrandService_UpdateHomeBrandStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeBrandServiceServer).UpdateHomeBrandStatus(ctx, req.(*UpdateHomeBrandStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeBrandService_QueryHomeBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeBrandDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeBrandServiceServer).QueryHomeBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeBrandService_QueryHomeBrandDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeBrandServiceServer).QueryHomeBrandDetail(ctx, req.(*QueryHomeBrandDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeBrandService_QueryHomeBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeBrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeBrandServiceServer).QueryHomeBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeBrandService_QueryHomeBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeBrandServiceServer).QueryHomeBrandList(ctx, req.(*QueryHomeBrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeBrandService_ServiceDesc is the grpc.ServiceDesc for HomeBrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeBrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.HomeBrandService",
	HandlerType: (*HomeBrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHomeBrand",
			Handler:    _HomeBrandService_AddHomeBrand_Handler,
		},
		{
			MethodName: "DeleteHomeBrand",
			Handler:    _HomeBrandService_DeleteHomeBrand_Handler,
		},
		{
			MethodName: "UpdateHomeBrandSort",
			Handler:    _HomeBrandService_UpdateHomeBrandSort_Handler,
		},
		{
			MethodName: "UpdateHomeBrandStatus",
			Handler:    _HomeBrandService_UpdateHomeBrandStatus_Handler,
		},
		{
			MethodName: "QueryHomeBrandDetail",
			Handler:    _HomeBrandService_QueryHomeBrandDetail_Handler,
		},
		{
			MethodName: "QueryHomeBrandList",
			Handler:    _HomeBrandService_QueryHomeBrandList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	HomeNewProductService_AddHomeNewProduct_FullMethodName          = "/smsclient.HomeNewProductService/AddHomeNewProduct"
	HomeNewProductService_DeleteHomeNewProduct_FullMethodName       = "/smsclient.HomeNewProductService/DeleteHomeNewProduct"
	HomeNewProductService_UpdateNewProductSort_FullMethodName       = "/smsclient.HomeNewProductService/UpdateNewProductSort"
	HomeNewProductService_UpdateHomeNewProductStatus_FullMethodName = "/smsclient.HomeNewProductService/UpdateHomeNewProductStatus"
	HomeNewProductService_QueryHomeNewProductDetail_FullMethodName  = "/smsclient.HomeNewProductService/QueryHomeNewProductDetail"
	HomeNewProductService_QueryHomeNewProductList_FullMethodName    = "/smsclient.HomeNewProductService/QueryHomeNewProductList"
)

// HomeNewProductServiceClient is the client API for HomeNewProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeNewProductServiceClient interface {
	// 添加新鲜好物表
	AddHomeNewProduct(ctx context.Context, in *AddHomeNewProductReq, opts ...grpc.CallOption) (*AddHomeNewProductResp, error)
	// 删除新鲜好物表
	DeleteHomeNewProduct(ctx context.Context, in *DeleteHomeNewProductReq, opts ...grpc.CallOption) (*DeleteHomeNewProductResp, error)
	// 修改首页新品排序
	UpdateNewProductSort(ctx context.Context, in *UpdateNewProductSortReq, opts ...grpc.CallOption) (*UpdateNewProductSortResp, error)
	// 更新新鲜好物表状态
	UpdateHomeNewProductStatus(ctx context.Context, in *UpdateHomeNewProductStatusReq, opts ...grpc.CallOption) (*UpdateHomeNewProductStatusResp, error)
	// 查询新鲜好物表详情
	QueryHomeNewProductDetail(ctx context.Context, in *QueryHomeNewProductDetailReq, opts ...grpc.CallOption) (*QueryHomeNewProductDetailResp, error)
	// 查询新鲜好物表列表
	QueryHomeNewProductList(ctx context.Context, in *QueryHomeNewProductListReq, opts ...grpc.CallOption) (*QueryHomeNewProductListResp, error)
}

type homeNewProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeNewProductServiceClient(cc grpc.ClientConnInterface) HomeNewProductServiceClient {
	return &homeNewProductServiceClient{cc}
}

func (c *homeNewProductServiceClient) AddHomeNewProduct(ctx context.Context, in *AddHomeNewProductReq, opts ...grpc.CallOption) (*AddHomeNewProductResp, error) {
	out := new(AddHomeNewProductResp)
	err := c.cc.Invoke(ctx, HomeNewProductService_AddHomeNewProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNewProductServiceClient) DeleteHomeNewProduct(ctx context.Context, in *DeleteHomeNewProductReq, opts ...grpc.CallOption) (*DeleteHomeNewProductResp, error) {
	out := new(DeleteHomeNewProductResp)
	err := c.cc.Invoke(ctx, HomeNewProductService_DeleteHomeNewProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNewProductServiceClient) UpdateNewProductSort(ctx context.Context, in *UpdateNewProductSortReq, opts ...grpc.CallOption) (*UpdateNewProductSortResp, error) {
	out := new(UpdateNewProductSortResp)
	err := c.cc.Invoke(ctx, HomeNewProductService_UpdateNewProductSort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNewProductServiceClient) UpdateHomeNewProductStatus(ctx context.Context, in *UpdateHomeNewProductStatusReq, opts ...grpc.CallOption) (*UpdateHomeNewProductStatusResp, error) {
	out := new(UpdateHomeNewProductStatusResp)
	err := c.cc.Invoke(ctx, HomeNewProductService_UpdateHomeNewProductStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNewProductServiceClient) QueryHomeNewProductDetail(ctx context.Context, in *QueryHomeNewProductDetailReq, opts ...grpc.CallOption) (*QueryHomeNewProductDetailResp, error) {
	out := new(QueryHomeNewProductDetailResp)
	err := c.cc.Invoke(ctx, HomeNewProductService_QueryHomeNewProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNewProductServiceClient) QueryHomeNewProductList(ctx context.Context, in *QueryHomeNewProductListReq, opts ...grpc.CallOption) (*QueryHomeNewProductListResp, error) {
	out := new(QueryHomeNewProductListResp)
	err := c.cc.Invoke(ctx, HomeNewProductService_QueryHomeNewProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeNewProductServiceServer is the server API for HomeNewProductService service.
// All implementations must embed UnimplementedHomeNewProductServiceServer
// for forward compatibility
type HomeNewProductServiceServer interface {
	// 添加新鲜好物表
	AddHomeNewProduct(context.Context, *AddHomeNewProductReq) (*AddHomeNewProductResp, error)
	// 删除新鲜好物表
	DeleteHomeNewProduct(context.Context, *DeleteHomeNewProductReq) (*DeleteHomeNewProductResp, error)
	// 修改首页新品排序
	UpdateNewProductSort(context.Context, *UpdateNewProductSortReq) (*UpdateNewProductSortResp, error)
	// 更新新鲜好物表状态
	UpdateHomeNewProductStatus(context.Context, *UpdateHomeNewProductStatusReq) (*UpdateHomeNewProductStatusResp, error)
	// 查询新鲜好物表详情
	QueryHomeNewProductDetail(context.Context, *QueryHomeNewProductDetailReq) (*QueryHomeNewProductDetailResp, error)
	// 查询新鲜好物表列表
	QueryHomeNewProductList(context.Context, *QueryHomeNewProductListReq) (*QueryHomeNewProductListResp, error)
	mustEmbedUnimplementedHomeNewProductServiceServer()
}

// UnimplementedHomeNewProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeNewProductServiceServer struct {
}

func (UnimplementedHomeNewProductServiceServer) AddHomeNewProduct(context.Context, *AddHomeNewProductReq) (*AddHomeNewProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomeNewProduct not implemented")
}
func (UnimplementedHomeNewProductServiceServer) DeleteHomeNewProduct(context.Context, *DeleteHomeNewProductReq) (*DeleteHomeNewProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeNewProduct not implemented")
}
func (UnimplementedHomeNewProductServiceServer) UpdateNewProductSort(context.Context, *UpdateNewProductSortReq) (*UpdateNewProductSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewProductSort not implemented")
}
func (UnimplementedHomeNewProductServiceServer) UpdateHomeNewProductStatus(context.Context, *UpdateHomeNewProductStatusReq) (*UpdateHomeNewProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeNewProductStatus not implemented")
}
func (UnimplementedHomeNewProductServiceServer) QueryHomeNewProductDetail(context.Context, *QueryHomeNewProductDetailReq) (*QueryHomeNewProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeNewProductDetail not implemented")
}
func (UnimplementedHomeNewProductServiceServer) QueryHomeNewProductList(context.Context, *QueryHomeNewProductListReq) (*QueryHomeNewProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeNewProductList not implemented")
}
func (UnimplementedHomeNewProductServiceServer) mustEmbedUnimplementedHomeNewProductServiceServer() {}

// UnsafeHomeNewProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeNewProductServiceServer will
// result in compilation errors.
type UnsafeHomeNewProductServiceServer interface {
	mustEmbedUnimplementedHomeNewProductServiceServer()
}

func RegisterHomeNewProductServiceServer(s grpc.ServiceRegistrar, srv HomeNewProductServiceServer) {
	s.RegisterService(&HomeNewProductService_ServiceDesc, srv)
}

func _HomeNewProductService_AddHomeNewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeNewProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNewProductServiceServer).AddHomeNewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeNewProductService_AddHomeNewProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNewProductServiceServer).AddHomeNewProduct(ctx, req.(*AddHomeNewProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNewProductService_DeleteHomeNewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeNewProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNewProductServiceServer).DeleteHomeNewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeNewProductService_DeleteHomeNewProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNewProductServiceServer).DeleteHomeNewProduct(ctx, req.(*DeleteHomeNewProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNewProductService_UpdateNewProductSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewProductSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNewProductServiceServer).UpdateNewProductSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeNewProductService_UpdateNewProductSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNewProductServiceServer).UpdateNewProductSort(ctx, req.(*UpdateNewProductSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNewProductService_UpdateHomeNewProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeNewProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNewProductServiceServer).UpdateHomeNewProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeNewProductService_UpdateHomeNewProductStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNewProductServiceServer).UpdateHomeNewProductStatus(ctx, req.(*UpdateHomeNewProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNewProductService_QueryHomeNewProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeNewProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNewProductServiceServer).QueryHomeNewProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeNewProductService_QueryHomeNewProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNewProductServiceServer).QueryHomeNewProductDetail(ctx, req.(*QueryHomeNewProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNewProductService_QueryHomeNewProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeNewProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNewProductServiceServer).QueryHomeNewProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeNewProductService_QueryHomeNewProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNewProductServiceServer).QueryHomeNewProductList(ctx, req.(*QueryHomeNewProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeNewProductService_ServiceDesc is the grpc.ServiceDesc for HomeNewProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeNewProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.HomeNewProductService",
	HandlerType: (*HomeNewProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHomeNewProduct",
			Handler:    _HomeNewProductService_AddHomeNewProduct_Handler,
		},
		{
			MethodName: "DeleteHomeNewProduct",
			Handler:    _HomeNewProductService_DeleteHomeNewProduct_Handler,
		},
		{
			MethodName: "UpdateNewProductSort",
			Handler:    _HomeNewProductService_UpdateNewProductSort_Handler,
		},
		{
			MethodName: "UpdateHomeNewProductStatus",
			Handler:    _HomeNewProductService_UpdateHomeNewProductStatus_Handler,
		},
		{
			MethodName: "QueryHomeNewProductDetail",
			Handler:    _HomeNewProductService_QueryHomeNewProductDetail_Handler,
		},
		{
			MethodName: "QueryHomeNewProductList",
			Handler:    _HomeNewProductService_QueryHomeNewProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	HomeRecommendProductService_AddHomeRecommendProduct_FullMethodName          = "/smsclient.HomeRecommendProductService/AddHomeRecommendProduct"
	HomeRecommendProductService_DeleteHomeRecommendProduct_FullMethodName       = "/smsclient.HomeRecommendProductService/DeleteHomeRecommendProduct"
	HomeRecommendProductService_UpdateRecommendProductSort_FullMethodName       = "/smsclient.HomeRecommendProductService/UpdateRecommendProductSort"
	HomeRecommendProductService_UpdateHomeRecommendProductStatus_FullMethodName = "/smsclient.HomeRecommendProductService/UpdateHomeRecommendProductStatus"
	HomeRecommendProductService_QueryHomeRecommendProductDetail_FullMethodName  = "/smsclient.HomeRecommendProductService/QueryHomeRecommendProductDetail"
	HomeRecommendProductService_QueryHomeRecommendProductList_FullMethodName    = "/smsclient.HomeRecommendProductService/QueryHomeRecommendProductList"
)

// HomeRecommendProductServiceClient is the client API for HomeRecommendProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeRecommendProductServiceClient interface {
	// 添加人气推荐商品表
	AddHomeRecommendProduct(ctx context.Context, in *AddHomeRecommendProductReq, opts ...grpc.CallOption) (*AddHomeRecommendProductResp, error)
	// 删除人气推荐商品表
	DeleteHomeRecommendProduct(ctx context.Context, in *DeleteHomeRecommendProductReq, opts ...grpc.CallOption) (*DeleteHomeRecommendProductResp, error)
	// 修改推荐排序
	UpdateRecommendProductSort(ctx context.Context, in *UpdateRecommendProductSortReq, opts ...grpc.CallOption) (*UpdateRecommendProductSortResp, error)
	// 更新人气推荐商品表状态
	UpdateHomeRecommendProductStatus(ctx context.Context, in *UpdateHomeRecommendProductStatusReq, opts ...grpc.CallOption) (*UpdateHomeRecommendProductStatusResp, error)
	// 查询人气推荐商品表详情
	QueryHomeRecommendProductDetail(ctx context.Context, in *QueryHomeRecommendProductDetailReq, opts ...grpc.CallOption) (*QueryHomeRecommendProductDetailResp, error)
	// 查询人气推荐商品表列表
	QueryHomeRecommendProductList(ctx context.Context, in *QueryHomeRecommendProductListReq, opts ...grpc.CallOption) (*QueryHomeRecommendProductListResp, error)
}

type homeRecommendProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeRecommendProductServiceClient(cc grpc.ClientConnInterface) HomeRecommendProductServiceClient {
	return &homeRecommendProductServiceClient{cc}
}

func (c *homeRecommendProductServiceClient) AddHomeRecommendProduct(ctx context.Context, in *AddHomeRecommendProductReq, opts ...grpc.CallOption) (*AddHomeRecommendProductResp, error) {
	out := new(AddHomeRecommendProductResp)
	err := c.cc.Invoke(ctx, HomeRecommendProductService_AddHomeRecommendProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendProductServiceClient) DeleteHomeRecommendProduct(ctx context.Context, in *DeleteHomeRecommendProductReq, opts ...grpc.CallOption) (*DeleteHomeRecommendProductResp, error) {
	out := new(DeleteHomeRecommendProductResp)
	err := c.cc.Invoke(ctx, HomeRecommendProductService_DeleteHomeRecommendProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendProductServiceClient) UpdateRecommendProductSort(ctx context.Context, in *UpdateRecommendProductSortReq, opts ...grpc.CallOption) (*UpdateRecommendProductSortResp, error) {
	out := new(UpdateRecommendProductSortResp)
	err := c.cc.Invoke(ctx, HomeRecommendProductService_UpdateRecommendProductSort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendProductServiceClient) UpdateHomeRecommendProductStatus(ctx context.Context, in *UpdateHomeRecommendProductStatusReq, opts ...grpc.CallOption) (*UpdateHomeRecommendProductStatusResp, error) {
	out := new(UpdateHomeRecommendProductStatusResp)
	err := c.cc.Invoke(ctx, HomeRecommendProductService_UpdateHomeRecommendProductStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendProductServiceClient) QueryHomeRecommendProductDetail(ctx context.Context, in *QueryHomeRecommendProductDetailReq, opts ...grpc.CallOption) (*QueryHomeRecommendProductDetailResp, error) {
	out := new(QueryHomeRecommendProductDetailResp)
	err := c.cc.Invoke(ctx, HomeRecommendProductService_QueryHomeRecommendProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendProductServiceClient) QueryHomeRecommendProductList(ctx context.Context, in *QueryHomeRecommendProductListReq, opts ...grpc.CallOption) (*QueryHomeRecommendProductListResp, error) {
	out := new(QueryHomeRecommendProductListResp)
	err := c.cc.Invoke(ctx, HomeRecommendProductService_QueryHomeRecommendProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeRecommendProductServiceServer is the server API for HomeRecommendProductService service.
// All implementations must embed UnimplementedHomeRecommendProductServiceServer
// for forward compatibility
type HomeRecommendProductServiceServer interface {
	// 添加人气推荐商品表
	AddHomeRecommendProduct(context.Context, *AddHomeRecommendProductReq) (*AddHomeRecommendProductResp, error)
	// 删除人气推荐商品表
	DeleteHomeRecommendProduct(context.Context, *DeleteHomeRecommendProductReq) (*DeleteHomeRecommendProductResp, error)
	// 修改推荐排序
	UpdateRecommendProductSort(context.Context, *UpdateRecommendProductSortReq) (*UpdateRecommendProductSortResp, error)
	// 更新人气推荐商品表状态
	UpdateHomeRecommendProductStatus(context.Context, *UpdateHomeRecommendProductStatusReq) (*UpdateHomeRecommendProductStatusResp, error)
	// 查询人气推荐商品表详情
	QueryHomeRecommendProductDetail(context.Context, *QueryHomeRecommendProductDetailReq) (*QueryHomeRecommendProductDetailResp, error)
	// 查询人气推荐商品表列表
	QueryHomeRecommendProductList(context.Context, *QueryHomeRecommendProductListReq) (*QueryHomeRecommendProductListResp, error)
	mustEmbedUnimplementedHomeRecommendProductServiceServer()
}

// UnimplementedHomeRecommendProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeRecommendProductServiceServer struct {
}

func (UnimplementedHomeRecommendProductServiceServer) AddHomeRecommendProduct(context.Context, *AddHomeRecommendProductReq) (*AddHomeRecommendProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomeRecommendProduct not implemented")
}
func (UnimplementedHomeRecommendProductServiceServer) DeleteHomeRecommendProduct(context.Context, *DeleteHomeRecommendProductReq) (*DeleteHomeRecommendProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeRecommendProduct not implemented")
}
func (UnimplementedHomeRecommendProductServiceServer) UpdateRecommendProductSort(context.Context, *UpdateRecommendProductSortReq) (*UpdateRecommendProductSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendProductSort not implemented")
}
func (UnimplementedHomeRecommendProductServiceServer) UpdateHomeRecommendProductStatus(context.Context, *UpdateHomeRecommendProductStatusReq) (*UpdateHomeRecommendProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeRecommendProductStatus not implemented")
}
func (UnimplementedHomeRecommendProductServiceServer) QueryHomeRecommendProductDetail(context.Context, *QueryHomeRecommendProductDetailReq) (*QueryHomeRecommendProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeRecommendProductDetail not implemented")
}
func (UnimplementedHomeRecommendProductServiceServer) QueryHomeRecommendProductList(context.Context, *QueryHomeRecommendProductListReq) (*QueryHomeRecommendProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeRecommendProductList not implemented")
}
func (UnimplementedHomeRecommendProductServiceServer) mustEmbedUnimplementedHomeRecommendProductServiceServer() {
}

// UnsafeHomeRecommendProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeRecommendProductServiceServer will
// result in compilation errors.
type UnsafeHomeRecommendProductServiceServer interface {
	mustEmbedUnimplementedHomeRecommendProductServiceServer()
}

func RegisterHomeRecommendProductServiceServer(s grpc.ServiceRegistrar, srv HomeRecommendProductServiceServer) {
	s.RegisterService(&HomeRecommendProductService_ServiceDesc, srv)
}

func _HomeRecommendProductService_AddHomeRecommendProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeRecommendProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendProductServiceServer).AddHomeRecommendProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendProductService_AddHomeRecommendProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendProductServiceServer).AddHomeRecommendProduct(ctx, req.(*AddHomeRecommendProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendProductService_DeleteHomeRecommendProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeRecommendProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendProductServiceServer).DeleteHomeRecommendProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendProductService_DeleteHomeRecommendProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendProductServiceServer).DeleteHomeRecommendProduct(ctx, req.(*DeleteHomeRecommendProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendProductService_UpdateRecommendProductSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendProductSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendProductServiceServer).UpdateRecommendProductSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendProductService_UpdateRecommendProductSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendProductServiceServer).UpdateRecommendProductSort(ctx, req.(*UpdateRecommendProductSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendProductService_UpdateHomeRecommendProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeRecommendProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendProductServiceServer).UpdateHomeRecommendProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendProductService_UpdateHomeRecommendProductStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendProductServiceServer).UpdateHomeRecommendProductStatus(ctx, req.(*UpdateHomeRecommendProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendProductService_QueryHomeRecommendProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeRecommendProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendProductServiceServer).QueryHomeRecommendProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendProductService_QueryHomeRecommendProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendProductServiceServer).QueryHomeRecommendProductDetail(ctx, req.(*QueryHomeRecommendProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendProductService_QueryHomeRecommendProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeRecommendProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendProductServiceServer).QueryHomeRecommendProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendProductService_QueryHomeRecommendProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendProductServiceServer).QueryHomeRecommendProductList(ctx, req.(*QueryHomeRecommendProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeRecommendProductService_ServiceDesc is the grpc.ServiceDesc for HomeRecommendProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeRecommendProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.HomeRecommendProductService",
	HandlerType: (*HomeRecommendProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHomeRecommendProduct",
			Handler:    _HomeRecommendProductService_AddHomeRecommendProduct_Handler,
		},
		{
			MethodName: "DeleteHomeRecommendProduct",
			Handler:    _HomeRecommendProductService_DeleteHomeRecommendProduct_Handler,
		},
		{
			MethodName: "UpdateRecommendProductSort",
			Handler:    _HomeRecommendProductService_UpdateRecommendProductSort_Handler,
		},
		{
			MethodName: "UpdateHomeRecommendProductStatus",
			Handler:    _HomeRecommendProductService_UpdateHomeRecommendProductStatus_Handler,
		},
		{
			MethodName: "QueryHomeRecommendProductDetail",
			Handler:    _HomeRecommendProductService_QueryHomeRecommendProductDetail_Handler,
		},
		{
			MethodName: "QueryHomeRecommendProductList",
			Handler:    _HomeRecommendProductService_QueryHomeRecommendProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	HomeRecommendSubjectService_AddHomeRecommendSubject_FullMethodName          = "/smsclient.HomeRecommendSubjectService/AddHomeRecommendSubject"
	HomeRecommendSubjectService_DeleteHomeRecommendSubject_FullMethodName       = "/smsclient.HomeRecommendSubjectService/DeleteHomeRecommendSubject"
	HomeRecommendSubjectService_UpdateRecommendSubjectSort_FullMethodName       = "/smsclient.HomeRecommendSubjectService/UpdateRecommendSubjectSort"
	HomeRecommendSubjectService_UpdateHomeRecommendSubjectStatus_FullMethodName = "/smsclient.HomeRecommendSubjectService/UpdateHomeRecommendSubjectStatus"
	HomeRecommendSubjectService_QueryHomeRecommendSubjectDetail_FullMethodName  = "/smsclient.HomeRecommendSubjectService/QueryHomeRecommendSubjectDetail"
	HomeRecommendSubjectService_QueryHomeRecommendSubjectList_FullMethodName    = "/smsclient.HomeRecommendSubjectService/QueryHomeRecommendSubjectList"
)

// HomeRecommendSubjectServiceClient is the client API for HomeRecommendSubjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeRecommendSubjectServiceClient interface {
	// 添加首页推荐专题表
	AddHomeRecommendSubject(ctx context.Context, in *AddHomeRecommendSubjectReq, opts ...grpc.CallOption) (*AddHomeRecommendSubjectResp, error)
	// 删除首页推荐专题表
	DeleteHomeRecommendSubject(ctx context.Context, in *DeleteHomeRecommendSubjectReq, opts ...grpc.CallOption) (*DeleteHomeRecommendSubjectResp, error)
	// 修改专题推荐排序
	UpdateRecommendSubjectSort(ctx context.Context, in *UpdateRecommendSubjectSortReq, opts ...grpc.CallOption) (*UpdateRecommendSubjectSortResp, error)
	// 更新首页推荐专题表状态
	UpdateHomeRecommendSubjectStatus(ctx context.Context, in *UpdateHomeRecommendSubjectStatusReq, opts ...grpc.CallOption) (*UpdateHomeRecommendSubjectStatusResp, error)
	// 查询首页推荐专题表详情
	QueryHomeRecommendSubjectDetail(ctx context.Context, in *QueryHomeRecommendSubjectDetailReq, opts ...grpc.CallOption) (*QueryHomeRecommendSubjectDetailResp, error)
	// 查询首页推荐专题表列表
	QueryHomeRecommendSubjectList(ctx context.Context, in *QueryHomeRecommendSubjectListReq, opts ...grpc.CallOption) (*QueryHomeRecommendSubjectListResp, error)
}

type homeRecommendSubjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeRecommendSubjectServiceClient(cc grpc.ClientConnInterface) HomeRecommendSubjectServiceClient {
	return &homeRecommendSubjectServiceClient{cc}
}

func (c *homeRecommendSubjectServiceClient) AddHomeRecommendSubject(ctx context.Context, in *AddHomeRecommendSubjectReq, opts ...grpc.CallOption) (*AddHomeRecommendSubjectResp, error) {
	out := new(AddHomeRecommendSubjectResp)
	err := c.cc.Invoke(ctx, HomeRecommendSubjectService_AddHomeRecommendSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendSubjectServiceClient) DeleteHomeRecommendSubject(ctx context.Context, in *DeleteHomeRecommendSubjectReq, opts ...grpc.CallOption) (*DeleteHomeRecommendSubjectResp, error) {
	out := new(DeleteHomeRecommendSubjectResp)
	err := c.cc.Invoke(ctx, HomeRecommendSubjectService_DeleteHomeRecommendSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendSubjectServiceClient) UpdateRecommendSubjectSort(ctx context.Context, in *UpdateRecommendSubjectSortReq, opts ...grpc.CallOption) (*UpdateRecommendSubjectSortResp, error) {
	out := new(UpdateRecommendSubjectSortResp)
	err := c.cc.Invoke(ctx, HomeRecommendSubjectService_UpdateRecommendSubjectSort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendSubjectServiceClient) UpdateHomeRecommendSubjectStatus(ctx context.Context, in *UpdateHomeRecommendSubjectStatusReq, opts ...grpc.CallOption) (*UpdateHomeRecommendSubjectStatusResp, error) {
	out := new(UpdateHomeRecommendSubjectStatusResp)
	err := c.cc.Invoke(ctx, HomeRecommendSubjectService_UpdateHomeRecommendSubjectStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendSubjectServiceClient) QueryHomeRecommendSubjectDetail(ctx context.Context, in *QueryHomeRecommendSubjectDetailReq, opts ...grpc.CallOption) (*QueryHomeRecommendSubjectDetailResp, error) {
	out := new(QueryHomeRecommendSubjectDetailResp)
	err := c.cc.Invoke(ctx, HomeRecommendSubjectService_QueryHomeRecommendSubjectDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeRecommendSubjectServiceClient) QueryHomeRecommendSubjectList(ctx context.Context, in *QueryHomeRecommendSubjectListReq, opts ...grpc.CallOption) (*QueryHomeRecommendSubjectListResp, error) {
	out := new(QueryHomeRecommendSubjectListResp)
	err := c.cc.Invoke(ctx, HomeRecommendSubjectService_QueryHomeRecommendSubjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeRecommendSubjectServiceServer is the server API for HomeRecommendSubjectService service.
// All implementations must embed UnimplementedHomeRecommendSubjectServiceServer
// for forward compatibility
type HomeRecommendSubjectServiceServer interface {
	// 添加首页推荐专题表
	AddHomeRecommendSubject(context.Context, *AddHomeRecommendSubjectReq) (*AddHomeRecommendSubjectResp, error)
	// 删除首页推荐专题表
	DeleteHomeRecommendSubject(context.Context, *DeleteHomeRecommendSubjectReq) (*DeleteHomeRecommendSubjectResp, error)
	// 修改专题推荐排序
	UpdateRecommendSubjectSort(context.Context, *UpdateRecommendSubjectSortReq) (*UpdateRecommendSubjectSortResp, error)
	// 更新首页推荐专题表状态
	UpdateHomeRecommendSubjectStatus(context.Context, *UpdateHomeRecommendSubjectStatusReq) (*UpdateHomeRecommendSubjectStatusResp, error)
	// 查询首页推荐专题表详情
	QueryHomeRecommendSubjectDetail(context.Context, *QueryHomeRecommendSubjectDetailReq) (*QueryHomeRecommendSubjectDetailResp, error)
	// 查询首页推荐专题表列表
	QueryHomeRecommendSubjectList(context.Context, *QueryHomeRecommendSubjectListReq) (*QueryHomeRecommendSubjectListResp, error)
	mustEmbedUnimplementedHomeRecommendSubjectServiceServer()
}

// UnimplementedHomeRecommendSubjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeRecommendSubjectServiceServer struct {
}

func (UnimplementedHomeRecommendSubjectServiceServer) AddHomeRecommendSubject(context.Context, *AddHomeRecommendSubjectReq) (*AddHomeRecommendSubjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomeRecommendSubject not implemented")
}
func (UnimplementedHomeRecommendSubjectServiceServer) DeleteHomeRecommendSubject(context.Context, *DeleteHomeRecommendSubjectReq) (*DeleteHomeRecommendSubjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeRecommendSubject not implemented")
}
func (UnimplementedHomeRecommendSubjectServiceServer) UpdateRecommendSubjectSort(context.Context, *UpdateRecommendSubjectSortReq) (*UpdateRecommendSubjectSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendSubjectSort not implemented")
}
func (UnimplementedHomeRecommendSubjectServiceServer) UpdateHomeRecommendSubjectStatus(context.Context, *UpdateHomeRecommendSubjectStatusReq) (*UpdateHomeRecommendSubjectStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeRecommendSubjectStatus not implemented")
}
func (UnimplementedHomeRecommendSubjectServiceServer) QueryHomeRecommendSubjectDetail(context.Context, *QueryHomeRecommendSubjectDetailReq) (*QueryHomeRecommendSubjectDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeRecommendSubjectDetail not implemented")
}
func (UnimplementedHomeRecommendSubjectServiceServer) QueryHomeRecommendSubjectList(context.Context, *QueryHomeRecommendSubjectListReq) (*QueryHomeRecommendSubjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeRecommendSubjectList not implemented")
}
func (UnimplementedHomeRecommendSubjectServiceServer) mustEmbedUnimplementedHomeRecommendSubjectServiceServer() {
}

// UnsafeHomeRecommendSubjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeRecommendSubjectServiceServer will
// result in compilation errors.
type UnsafeHomeRecommendSubjectServiceServer interface {
	mustEmbedUnimplementedHomeRecommendSubjectServiceServer()
}

func RegisterHomeRecommendSubjectServiceServer(s grpc.ServiceRegistrar, srv HomeRecommendSubjectServiceServer) {
	s.RegisterService(&HomeRecommendSubjectService_ServiceDesc, srv)
}

func _HomeRecommendSubjectService_AddHomeRecommendSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeRecommendSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendSubjectServiceServer).AddHomeRecommendSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendSubjectService_AddHomeRecommendSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendSubjectServiceServer).AddHomeRecommendSubject(ctx, req.(*AddHomeRecommendSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendSubjectService_DeleteHomeRecommendSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeRecommendSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendSubjectServiceServer).DeleteHomeRecommendSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendSubjectService_DeleteHomeRecommendSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendSubjectServiceServer).DeleteHomeRecommendSubject(ctx, req.(*DeleteHomeRecommendSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendSubjectService_UpdateRecommendSubjectSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendSubjectSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendSubjectServiceServer).UpdateRecommendSubjectSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendSubjectService_UpdateRecommendSubjectSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendSubjectServiceServer).UpdateRecommendSubjectSort(ctx, req.(*UpdateRecommendSubjectSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendSubjectService_UpdateHomeRecommendSubjectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeRecommendSubjectStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendSubjectServiceServer).UpdateHomeRecommendSubjectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendSubjectService_UpdateHomeRecommendSubjectStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendSubjectServiceServer).UpdateHomeRecommendSubjectStatus(ctx, req.(*UpdateHomeRecommendSubjectStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendSubjectService_QueryHomeRecommendSubjectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeRecommendSubjectDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendSubjectServiceServer).QueryHomeRecommendSubjectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendSubjectService_QueryHomeRecommendSubjectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendSubjectServiceServer).QueryHomeRecommendSubjectDetail(ctx, req.(*QueryHomeRecommendSubjectDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeRecommendSubjectService_QueryHomeRecommendSubjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeRecommendSubjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeRecommendSubjectServiceServer).QueryHomeRecommendSubjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeRecommendSubjectService_QueryHomeRecommendSubjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeRecommendSubjectServiceServer).QueryHomeRecommendSubjectList(ctx, req.(*QueryHomeRecommendSubjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeRecommendSubjectService_ServiceDesc is the grpc.ServiceDesc for HomeRecommendSubjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeRecommendSubjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.HomeRecommendSubjectService",
	HandlerType: (*HomeRecommendSubjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHomeRecommendSubject",
			Handler:    _HomeRecommendSubjectService_AddHomeRecommendSubject_Handler,
		},
		{
			MethodName: "DeleteHomeRecommendSubject",
			Handler:    _HomeRecommendSubjectService_DeleteHomeRecommendSubject_Handler,
		},
		{
			MethodName: "UpdateRecommendSubjectSort",
			Handler:    _HomeRecommendSubjectService_UpdateRecommendSubjectSort_Handler,
		},
		{
			MethodName: "UpdateHomeRecommendSubjectStatus",
			Handler:    _HomeRecommendSubjectService_UpdateHomeRecommendSubjectStatus_Handler,
		},
		{
			MethodName: "QueryHomeRecommendSubjectDetail",
			Handler:    _HomeRecommendSubjectService_QueryHomeRecommendSubjectDetail_Handler,
		},
		{
			MethodName: "QueryHomeRecommendSubjectList",
			Handler:    _HomeRecommendSubjectService_QueryHomeRecommendSubjectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberBrandAttention(db *gorm.DB, opts ...gen.DOOption) umsMemberBrandAttention {
	_umsMemberBrandAttention := umsMemberBrandAttention{}

	_umsMemberBrandAttention.umsMemberBrandAttentionDo.UseDB(db, opts...)
	_umsMemberBrandAttention.umsMemberBrandAttentionDo.UseModel(&model.UmsMemberBrandAttention{})

	tableName := _umsMemberBrandAttention.umsMemberBrandAttentionDo.TableName()
	_umsMemberBrandAttention.ALL = field.NewAsterisk(tableName)
	_umsMemberBrandAttention.ID = field.NewInt64(tableName, "id")
	_umsMemberBrandAttention.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberBrandAttention.MemberNickName = field.NewString(tableName, "member_nick_name")
	_umsMemberBrandAttention.MemberIcon = field.NewString(tableName, "member_icon")
	_umsMemberBrandAttention.BrandID = field.NewInt64(tableName, "brand_id")
	_umsMemberBrandAttention.BrandName = field.NewString(tableName, "brand_name")
	_umsMemberBrandAttention.BrandLogo = field.NewString(tableName, "brand_logo")
	_umsMemberBrandAttention.BrandCity = field.NewString(tableName, "brand_city")
	_umsMemberBrandAttention.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberBrandAttention.fillFieldMap()

	return _umsMemberBrandAttention
}

// umsMemberBrandAttention 会员关注品牌管理
type umsMemberBrandAttention struct {
	umsMemberBrandAttentionDo umsMemberBrandAttentionDo

	ALL            field.Asterisk
	ID             field.Int64
	MemberID       field.Int64  // 会员id
	MemberNickName field.String // 会员姓名
	MemberIcon     field.String // 会员头像
	BrandID        field.Int64  // 品牌id
	BrandName      field.String // 品牌名称
	BrandLogo      field.String // 品牌Logo
	BrandCity      field.String // 品牌所在城市
	CreateTime     field.Time   // 关注时间

	fieldMap map[string]field.Expr
}

func (u umsMemberBrandAttention) Table(newTableName string) *umsMemberBrandAttention {
	u.umsMemberBrandAttentionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberBrandAttention) As(alias string) *umsMemberBrandAttention {
	u.umsMemberBrandAttentionDo.DO = *(u.umsMemberBrandAttentionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberBrandAttention) updateTableName(table string) *umsMemberBrandAttention {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.MemberNickName = field.NewString(table, "member_nick_name")
	u.MemberIcon = field.NewString(table, "member_icon")
	u.BrandID = field.NewInt64(table, "brand_id")
	u.BrandName = field.NewString(table, "brand_name")
	u.BrandLogo = field.NewString(table, "brand_logo")
	u.BrandCity = field.NewString(table, "brand_city")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberBrandAttention) WithContext(ctx context.Context) IUmsMemberBrandAttentionDo {
	return u.umsMemberBrandAttentionDo.WithContext(ctx)
}

func (u umsMemberBrandAttention) TableName() string { return u.umsMemberBrandAttentionDo.TableName() }

func (u umsMemberBrandAttention) Alias() string { return u.umsMemberBrandAttentionDo.Alias() }

func (u umsMemberBrandAttention) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberBrandAttentionDo.Columns(cols...)
}

func (u *umsMemberBrandAttention) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberBrandAttention) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["member_nick_name"] = u.MemberNickName
	u.fieldMap["member_icon"] = u.MemberIcon
	u.fieldMap["brand_id"] = u.BrandID
	u.fieldMap["brand_name"] = u.BrandName
	u.fieldMap["brand_logo"] = u.BrandLogo
	u.fieldMap["brand_city"] = u.BrandCity
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberBrandAttention) clone(db *gorm.DB) umsMemberBrandAttention {
	u.umsMemberBrandAttentionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberBrandAttention) replaceDB(db *gorm.DB) umsMemberBrandAttention {
	u.umsMemberBrandAttentionDo.ReplaceDB(db)
	return u
}

type umsMemberBrandAttentionDo struct{ gen.DO }

type IUmsMemberBrandAttentionDo interface {
	gen.SubQuery
	Debug() IUmsMemberBrandAttentionDo
	WithContext(ctx context.Context) IUmsMemberBrandAttentionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberBrandAttentionDo
	WriteDB() IUmsMemberBrandAttentionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberBrandAttentionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberBrandAttentionDo
	Not(conds ...gen.Condition) IUmsMemberBrandAttentionDo
	Or(conds ...gen.Condition) IUmsMemberBrandAttentionDo
	Select(conds ...field.Expr) IUmsMemberBrandAttentionDo
	Where(conds ...gen.Condition) IUmsMemberBrandAttentionDo
	Order(conds ...field.Expr) IUmsMemberBrandAttentionDo
	Distinct(cols ...field.Expr) IUmsMemberBrandAttentionDo
	Omit(cols ...field.Expr) IUmsMemberBrandAttentionDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberBrandAttentionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberBrandAttentionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberBrandAttentionDo
	Group(cols ...field.Expr) IUmsMemberBrandAttentionDo
	Having(conds ...gen.Condition) IUmsMemberBrandAttentionDo
	Limit(limit int) IUmsMemberBrandAttentionDo
	Offset(offset int) IUmsMemberBrandAttentionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberBrandAttentionDo
	Unscoped() IUmsMemberBrandAttentionDo
	Create(values ...*model.UmsMemberBrandAttention) error
	CreateInBatches(values []*model.UmsMemberBrandAttention, batchSize int) error
	Save(values ...*model.UmsMemberBrandAttention) error
	First() (*model.UmsMemberBrandAttention, error)
	Take() (*model.UmsMemberBrandAttention, error)
	Last() (*model.UmsMemberBrandAttention, error)
	Find() ([]*model.UmsMemberBrandAttention, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberBrandAttention, err error)
	FindInBatches(result *[]*model.UmsMemberBrandAttention, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberBrandAttention) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberBrandAttentionDo
	Assign(attrs ...field.AssignExpr) IUmsMemberBrandAttentionDo
	Joins(fields ...field.RelationField) IUmsMemberBrandAttentionDo
	Preload(fields ...field.RelationField) IUmsMemberBrandAttentionDo
	FirstOrInit() (*model.UmsMemberBrandAttention, error)
	FirstOrCreate() (*model.UmsMemberBrandAttention, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberBrandAttention, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberBrandAttentionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberBrandAttentionDo) Debug() IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberBrandAttentionDo) WithContext(ctx context.Context) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberBrandAttentionDo) ReadDB() IUmsMemberBrandAttentionDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberBrandAttentionDo) WriteDB() IUmsMemberBrandAttentionDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberBrandAttentionDo) Session(config *gorm.Session) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberBrandAttentionDo) Clauses(conds ...clause.Expression) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberBrandAttentionDo) Returning(value interface{}, columns ...string) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberBrandAttentionDo) Not(conds ...gen.Condition) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberBrandAttentionDo) Or(conds ...gen.Condition) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberBrandAttentionDo) Select(conds ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberBrandAttentionDo) Where(conds ...gen.Condition) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberBrandAttentionDo) Order(conds ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberBrandAttentionDo) Distinct(cols ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberBrandAttentionDo) Omit(cols ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberBrandAttentionDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberBrandAttentionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberBrandAttentionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberBrandAttentionDo) Group(cols ...field.Expr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberBrandAttentionDo) Having(conds ...gen.Condition) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberBrandAttentionDo) Limit(limit int) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberBrandAttentionDo) Offset(offset int) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberBrandAttentionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberBrandAttentionDo) Unscoped() IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberBrandAttentionDo) Create(values ...*model.UmsMemberBrandAttention) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberBrandAttentionDo) CreateInBatches(values []*model.UmsMemberBrandAttention, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberBrandAttentionDo) Save(values ...*model.UmsMemberBrandAttention) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberBrandAttentionDo) First() (*model.UmsMemberBrandAttention, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberBrandAttention), nil
	}
}

func (u umsMemberBrandAttentionDo) Take() (*model.UmsMemberBrandAttention, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberBrandAttention), nil
	}
}

func (u umsMemberBrandAttentionDo) Last() (*model.UmsMemberBrandAttention, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberBrandAttention), nil
	}
}

func (u umsMemberBrandAttentionDo) Find() ([]*model.UmsMemberBrandAttention, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberBrandAttention), err
}

func (u umsMemberBrandAttentionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberBrandAttention, err error) {
	buf := make([]*model.UmsMemberBrandAttention, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberBrandAttentionDo) FindInBatches(result *[]*model.UmsMemberBrandAttention, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberBrandAttentionDo) Attrs(attrs ...field.AssignExpr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberBrandAttentionDo) Assign(attrs ...field.AssignExpr) IUmsMemberBrandAttentionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberBrandAttentionDo) Joins(fields ...field.RelationField) IUmsMemberBrandAttentionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberBrandAttentionDo) Preload(fields ...field.RelationField) IUmsMemberBrandAttentionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberBrandAttentionDo) FirstOrInit() (*model.UmsMemberBrandAttention, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberBrandAttention), nil
	}
}

func (u umsMemberBrandAttentionDo) FirstOrCreate() (*model.UmsMemberBrandAttention, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberBrandAttention), nil
	}
}

func (u umsMemberBrandAttentionDo) FindByPage(offset int, limit int) (result []*model.UmsMemberBrandAttention, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberBrandAttentionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberBrandAttentionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberBrandAttentionDo) Delete(models ...*model.UmsMemberBrandAttention) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberBrandAttentionDo) withDO(do gen.Dao) *umsMemberBrandAttentionDo {
	u.DO = *do.(*gen.DO)
	return u
}

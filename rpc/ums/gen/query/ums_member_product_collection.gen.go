// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberProductCollection(db *gorm.DB, opts ...gen.DOOption) umsMemberProductCollection {
	_umsMemberProductCollection := umsMemberProductCollection{}

	_umsMemberProductCollection.umsMemberProductCollectionDo.UseDB(db, opts...)
	_umsMemberProductCollection.umsMemberProductCollectionDo.UseModel(&model.UmsMemberProductCollection{})

	tableName := _umsMemberProductCollection.umsMemberProductCollectionDo.TableName()
	_umsMemberProductCollection.ALL = field.NewAsterisk(tableName)
	_umsMemberProductCollection.ID = field.NewInt64(tableName, "id")
	_umsMemberProductCollection.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberProductCollection.MemberNickName = field.NewString(tableName, "member_nick_name")
	_umsMemberProductCollection.MemberIcon = field.NewString(tableName, "member_icon")
	_umsMemberProductCollection.ProductID = field.NewInt64(tableName, "product_id")
	_umsMemberProductCollection.ProductName = field.NewString(tableName, "product_name")
	_umsMemberProductCollection.ProductPic = field.NewString(tableName, "product_pic")
	_umsMemberProductCollection.ProductSubTitle = field.NewString(tableName, "product_sub_title")
	_umsMemberProductCollection.ProductPrice = field.NewInt64(tableName, "product_price")
	_umsMemberProductCollection.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberProductCollection.fillFieldMap()

	return _umsMemberProductCollection
}

// umsMemberProductCollection 用户收藏的商品
type umsMemberProductCollection struct {
	umsMemberProductCollectionDo umsMemberProductCollectionDo

	ALL             field.Asterisk
	ID              field.Int64
	MemberID        field.Int64  // 会员id
	MemberNickName  field.String // 会员姓名
	MemberIcon      field.String // 会员头像
	ProductID       field.Int64  // 商品id
	ProductName     field.String // 商品名称
	ProductPic      field.String // 商品图片
	ProductSubTitle field.String // 商品标题
	ProductPrice    field.Int64  // 商品价格
	CreateTime      field.Time   // 收藏时间

	fieldMap map[string]field.Expr
}

func (u umsMemberProductCollection) Table(newTableName string) *umsMemberProductCollection {
	u.umsMemberProductCollectionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberProductCollection) As(alias string) *umsMemberProductCollection {
	u.umsMemberProductCollectionDo.DO = *(u.umsMemberProductCollectionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberProductCollection) updateTableName(table string) *umsMemberProductCollection {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.MemberNickName = field.NewString(table, "member_nick_name")
	u.MemberIcon = field.NewString(table, "member_icon")
	u.ProductID = field.NewInt64(table, "product_id")
	u.ProductName = field.NewString(table, "product_name")
	u.ProductPic = field.NewString(table, "product_pic")
	u.ProductSubTitle = field.NewString(table, "product_sub_title")
	u.ProductPrice = field.NewInt64(table, "product_price")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberProductCollection) WithContext(ctx context.Context) IUmsMemberProductCollectionDo {
	return u.umsMemberProductCollectionDo.WithContext(ctx)
}

func (u umsMemberProductCollection) TableName() string {
	return u.umsMemberProductCollectionDo.TableName()
}

func (u umsMemberProductCollection) Alias() string { return u.umsMemberProductCollectionDo.Alias() }

func (u umsMemberProductCollection) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberProductCollectionDo.Columns(cols...)
}

func (u *umsMemberProductCollection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberProductCollection) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["member_nick_name"] = u.MemberNickName
	u.fieldMap["member_icon"] = u.MemberIcon
	u.fieldMap["product_id"] = u.ProductID
	u.fieldMap["product_name"] = u.ProductName
	u.fieldMap["product_pic"] = u.ProductPic
	u.fieldMap["product_sub_title"] = u.ProductSubTitle
	u.fieldMap["product_price"] = u.ProductPrice
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberProductCollection) clone(db *gorm.DB) umsMemberProductCollection {
	u.umsMemberProductCollectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberProductCollection) replaceDB(db *gorm.DB) umsMemberProductCollection {
	u.umsMemberProductCollectionDo.ReplaceDB(db)
	return u
}

type umsMemberProductCollectionDo struct{ gen.DO }

type IUmsMemberProductCollectionDo interface {
	gen.SubQuery
	Debug() IUmsMemberProductCollectionDo
	WithContext(ctx context.Context) IUmsMemberProductCollectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberProductCollectionDo
	WriteDB() IUmsMemberProductCollectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberProductCollectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberProductCollectionDo
	Not(conds ...gen.Condition) IUmsMemberProductCollectionDo
	Or(conds ...gen.Condition) IUmsMemberProductCollectionDo
	Select(conds ...field.Expr) IUmsMemberProductCollectionDo
	Where(conds ...gen.Condition) IUmsMemberProductCollectionDo
	Order(conds ...field.Expr) IUmsMemberProductCollectionDo
	Distinct(cols ...field.Expr) IUmsMemberProductCollectionDo
	Omit(cols ...field.Expr) IUmsMemberProductCollectionDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberProductCollectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberProductCollectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberProductCollectionDo
	Group(cols ...field.Expr) IUmsMemberProductCollectionDo
	Having(conds ...gen.Condition) IUmsMemberProductCollectionDo
	Limit(limit int) IUmsMemberProductCollectionDo
	Offset(offset int) IUmsMemberProductCollectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberProductCollectionDo
	Unscoped() IUmsMemberProductCollectionDo
	Create(values ...*model.UmsMemberProductCollection) error
	CreateInBatches(values []*model.UmsMemberProductCollection, batchSize int) error
	Save(values ...*model.UmsMemberProductCollection) error
	First() (*model.UmsMemberProductCollection, error)
	Take() (*model.UmsMemberProductCollection, error)
	Last() (*model.UmsMemberProductCollection, error)
	Find() ([]*model.UmsMemberProductCollection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberProductCollection, err error)
	FindInBatches(result *[]*model.UmsMemberProductCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberProductCollection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberProductCollectionDo
	Assign(attrs ...field.AssignExpr) IUmsMemberProductCollectionDo
	Joins(fields ...field.RelationField) IUmsMemberProductCollectionDo
	Preload(fields ...field.RelationField) IUmsMemberProductCollectionDo
	FirstOrInit() (*model.UmsMemberProductCollection, error)
	FirstOrCreate() (*model.UmsMemberProductCollection, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberProductCollection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberProductCollectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberProductCollectionDo) Debug() IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberProductCollectionDo) WithContext(ctx context.Context) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberProductCollectionDo) ReadDB() IUmsMemberProductCollectionDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberProductCollectionDo) WriteDB() IUmsMemberProductCollectionDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberProductCollectionDo) Session(config *gorm.Session) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberProductCollectionDo) Clauses(conds ...clause.Expression) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberProductCollectionDo) Returning(value interface{}, columns ...string) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberProductCollectionDo) Not(conds ...gen.Condition) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberProductCollectionDo) Or(conds ...gen.Condition) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberProductCollectionDo) Select(conds ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberProductCollectionDo) Where(conds ...gen.Condition) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberProductCollectionDo) Order(conds ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberProductCollectionDo) Distinct(cols ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberProductCollectionDo) Omit(cols ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberProductCollectionDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberProductCollectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberProductCollectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberProductCollectionDo) Group(cols ...field.Expr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberProductCollectionDo) Having(conds ...gen.Condition) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberProductCollectionDo) Limit(limit int) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberProductCollectionDo) Offset(offset int) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberProductCollectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberProductCollectionDo) Unscoped() IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberProductCollectionDo) Create(values ...*model.UmsMemberProductCollection) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberProductCollectionDo) CreateInBatches(values []*model.UmsMemberProductCollection, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberProductCollectionDo) Save(values ...*model.UmsMemberProductCollection) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberProductCollectionDo) First() (*model.UmsMemberProductCollection, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberProductCollection), nil
	}
}

func (u umsMemberProductCollectionDo) Take() (*model.UmsMemberProductCollection, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberProductCollection), nil
	}
}

func (u umsMemberProductCollectionDo) Last() (*model.UmsMemberProductCollection, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberProductCollection), nil
	}
}

func (u umsMemberProductCollectionDo) Find() ([]*model.UmsMemberProductCollection, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberProductCollection), err
}

func (u umsMemberProductCollectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberProductCollection, err error) {
	buf := make([]*model.UmsMemberProductCollection, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberProductCollectionDo) FindInBatches(result *[]*model.UmsMemberProductCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberProductCollectionDo) Attrs(attrs ...field.AssignExpr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberProductCollectionDo) Assign(attrs ...field.AssignExpr) IUmsMemberProductCollectionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberProductCollectionDo) Joins(fields ...field.RelationField) IUmsMemberProductCollectionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberProductCollectionDo) Preload(fields ...field.RelationField) IUmsMemberProductCollectionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberProductCollectionDo) FirstOrInit() (*model.UmsMemberProductCollection, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberProductCollection), nil
	}
}

func (u umsMemberProductCollectionDo) FirstOrCreate() (*model.UmsMemberProductCollection, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberProductCollection), nil
	}
}

func (u umsMemberProductCollectionDo) FindByPage(offset int, limit int) (result []*model.UmsMemberProductCollection, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberProductCollectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberProductCollectionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberProductCollectionDo) Delete(models ...*model.UmsMemberProductCollection) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberProductCollectionDo) withDO(do gen.Dao) *umsMemberProductCollectionDo {
	u.DO = *do.(*gen.DO)
	return u
}

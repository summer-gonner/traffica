// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberReadHistory(db *gorm.DB, opts ...gen.DOOption) umsMemberReadHistory {
	_umsMemberReadHistory := umsMemberReadHistory{}

	_umsMemberReadHistory.umsMemberReadHistoryDo.UseDB(db, opts...)
	_umsMemberReadHistory.umsMemberReadHistoryDo.UseModel(&model.UmsMemberReadHistory{})

	tableName := _umsMemberReadHistory.umsMemberReadHistoryDo.TableName()
	_umsMemberReadHistory.ALL = field.NewAsterisk(tableName)
	_umsMemberReadHistory.ID = field.NewInt64(tableName, "id")
	_umsMemberReadHistory.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberReadHistory.MemberNickName = field.NewString(tableName, "member_nick_name")
	_umsMemberReadHistory.MemberIcon = field.NewString(tableName, "member_icon")
	_umsMemberReadHistory.ProductID = field.NewInt64(tableName, "product_id")
	_umsMemberReadHistory.ProductName = field.NewString(tableName, "product_name")
	_umsMemberReadHistory.ProductPic = field.NewString(tableName, "product_pic")
	_umsMemberReadHistory.ProductSubTitle = field.NewString(tableName, "product_sub_title")
	_umsMemberReadHistory.ProductPrice = field.NewInt64(tableName, "product_price")
	_umsMemberReadHistory.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberReadHistory.fillFieldMap()

	return _umsMemberReadHistory
}

// umsMemberReadHistory 用户商品浏览历史记录
type umsMemberReadHistory struct {
	umsMemberReadHistoryDo umsMemberReadHistoryDo

	ALL             field.Asterisk
	ID              field.Int64
	MemberID        field.Int64  // 会员id
	MemberNickName  field.String // 会员姓名
	MemberIcon      field.String // 会员头像
	ProductID       field.Int64  // 商品id
	ProductName     field.String // 商品名称
	ProductPic      field.String // 商品图片
	ProductSubTitle field.String // 商品标题
	ProductPrice    field.Int64  // 商品价格
	CreateTime      field.Time   // 浏览时间

	fieldMap map[string]field.Expr
}

func (u umsMemberReadHistory) Table(newTableName string) *umsMemberReadHistory {
	u.umsMemberReadHistoryDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberReadHistory) As(alias string) *umsMemberReadHistory {
	u.umsMemberReadHistoryDo.DO = *(u.umsMemberReadHistoryDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberReadHistory) updateTableName(table string) *umsMemberReadHistory {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.MemberNickName = field.NewString(table, "member_nick_name")
	u.MemberIcon = field.NewString(table, "member_icon")
	u.ProductID = field.NewInt64(table, "product_id")
	u.ProductName = field.NewString(table, "product_name")
	u.ProductPic = field.NewString(table, "product_pic")
	u.ProductSubTitle = field.NewString(table, "product_sub_title")
	u.ProductPrice = field.NewInt64(table, "product_price")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberReadHistory) WithContext(ctx context.Context) IUmsMemberReadHistoryDo {
	return u.umsMemberReadHistoryDo.WithContext(ctx)
}

func (u umsMemberReadHistory) TableName() string { return u.umsMemberReadHistoryDo.TableName() }

func (u umsMemberReadHistory) Alias() string { return u.umsMemberReadHistoryDo.Alias() }

func (u umsMemberReadHistory) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberReadHistoryDo.Columns(cols...)
}

func (u *umsMemberReadHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberReadHistory) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["member_nick_name"] = u.MemberNickName
	u.fieldMap["member_icon"] = u.MemberIcon
	u.fieldMap["product_id"] = u.ProductID
	u.fieldMap["product_name"] = u.ProductName
	u.fieldMap["product_pic"] = u.ProductPic
	u.fieldMap["product_sub_title"] = u.ProductSubTitle
	u.fieldMap["product_price"] = u.ProductPrice
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberReadHistory) clone(db *gorm.DB) umsMemberReadHistory {
	u.umsMemberReadHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberReadHistory) replaceDB(db *gorm.DB) umsMemberReadHistory {
	u.umsMemberReadHistoryDo.ReplaceDB(db)
	return u
}

type umsMemberReadHistoryDo struct{ gen.DO }

type IUmsMemberReadHistoryDo interface {
	gen.SubQuery
	Debug() IUmsMemberReadHistoryDo
	WithContext(ctx context.Context) IUmsMemberReadHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberReadHistoryDo
	WriteDB() IUmsMemberReadHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberReadHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberReadHistoryDo
	Not(conds ...gen.Condition) IUmsMemberReadHistoryDo
	Or(conds ...gen.Condition) IUmsMemberReadHistoryDo
	Select(conds ...field.Expr) IUmsMemberReadHistoryDo
	Where(conds ...gen.Condition) IUmsMemberReadHistoryDo
	Order(conds ...field.Expr) IUmsMemberReadHistoryDo
	Distinct(cols ...field.Expr) IUmsMemberReadHistoryDo
	Omit(cols ...field.Expr) IUmsMemberReadHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberReadHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberReadHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberReadHistoryDo
	Group(cols ...field.Expr) IUmsMemberReadHistoryDo
	Having(conds ...gen.Condition) IUmsMemberReadHistoryDo
	Limit(limit int) IUmsMemberReadHistoryDo
	Offset(offset int) IUmsMemberReadHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberReadHistoryDo
	Unscoped() IUmsMemberReadHistoryDo
	Create(values ...*model.UmsMemberReadHistory) error
	CreateInBatches(values []*model.UmsMemberReadHistory, batchSize int) error
	Save(values ...*model.UmsMemberReadHistory) error
	First() (*model.UmsMemberReadHistory, error)
	Take() (*model.UmsMemberReadHistory, error)
	Last() (*model.UmsMemberReadHistory, error)
	Find() ([]*model.UmsMemberReadHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberReadHistory, err error)
	FindInBatches(result *[]*model.UmsMemberReadHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberReadHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberReadHistoryDo
	Assign(attrs ...field.AssignExpr) IUmsMemberReadHistoryDo
	Joins(fields ...field.RelationField) IUmsMemberReadHistoryDo
	Preload(fields ...field.RelationField) IUmsMemberReadHistoryDo
	FirstOrInit() (*model.UmsMemberReadHistory, error)
	FirstOrCreate() (*model.UmsMemberReadHistory, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberReadHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberReadHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberReadHistoryDo) Debug() IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberReadHistoryDo) WithContext(ctx context.Context) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberReadHistoryDo) ReadDB() IUmsMemberReadHistoryDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberReadHistoryDo) WriteDB() IUmsMemberReadHistoryDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberReadHistoryDo) Session(config *gorm.Session) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberReadHistoryDo) Clauses(conds ...clause.Expression) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberReadHistoryDo) Returning(value interface{}, columns ...string) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberReadHistoryDo) Not(conds ...gen.Condition) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberReadHistoryDo) Or(conds ...gen.Condition) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberReadHistoryDo) Select(conds ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberReadHistoryDo) Where(conds ...gen.Condition) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberReadHistoryDo) Order(conds ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberReadHistoryDo) Distinct(cols ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberReadHistoryDo) Omit(cols ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberReadHistoryDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberReadHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberReadHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberReadHistoryDo) Group(cols ...field.Expr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberReadHistoryDo) Having(conds ...gen.Condition) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberReadHistoryDo) Limit(limit int) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberReadHistoryDo) Offset(offset int) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberReadHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberReadHistoryDo) Unscoped() IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberReadHistoryDo) Create(values ...*model.UmsMemberReadHistory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberReadHistoryDo) CreateInBatches(values []*model.UmsMemberReadHistory, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberReadHistoryDo) Save(values ...*model.UmsMemberReadHistory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberReadHistoryDo) First() (*model.UmsMemberReadHistory, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberReadHistory), nil
	}
}

func (u umsMemberReadHistoryDo) Take() (*model.UmsMemberReadHistory, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberReadHistory), nil
	}
}

func (u umsMemberReadHistoryDo) Last() (*model.UmsMemberReadHistory, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberReadHistory), nil
	}
}

func (u umsMemberReadHistoryDo) Find() ([]*model.UmsMemberReadHistory, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberReadHistory), err
}

func (u umsMemberReadHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberReadHistory, err error) {
	buf := make([]*model.UmsMemberReadHistory, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberReadHistoryDo) FindInBatches(result *[]*model.UmsMemberReadHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberReadHistoryDo) Attrs(attrs ...field.AssignExpr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberReadHistoryDo) Assign(attrs ...field.AssignExpr) IUmsMemberReadHistoryDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberReadHistoryDo) Joins(fields ...field.RelationField) IUmsMemberReadHistoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberReadHistoryDo) Preload(fields ...field.RelationField) IUmsMemberReadHistoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberReadHistoryDo) FirstOrInit() (*model.UmsMemberReadHistory, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberReadHistory), nil
	}
}

func (u umsMemberReadHistoryDo) FirstOrCreate() (*model.UmsMemberReadHistory, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberReadHistory), nil
	}
}

func (u umsMemberReadHistoryDo) FindByPage(offset int, limit int) (result []*model.UmsMemberReadHistory, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberReadHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberReadHistoryDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberReadHistoryDo) Delete(models ...*model.UmsMemberReadHistory) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberReadHistoryDo) withDO(do gen.Dao) *umsMemberReadHistoryDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/ums/ums.proto

package umsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrowthChangeHistoryService_AddGrowthChangeHistory_FullMethodName         = "/umsclient.GrowthChangeHistoryService/AddGrowthChangeHistory"
	GrowthChangeHistoryService_DeleteGrowthChangeHistory_FullMethodName      = "/umsclient.GrowthChangeHistoryService/DeleteGrowthChangeHistory"
	GrowthChangeHistoryService_QueryGrowthChangeHistoryDetail_FullMethodName = "/umsclient.GrowthChangeHistoryService/QueryGrowthChangeHistoryDetail"
	GrowthChangeHistoryService_QueryGrowthChangeHistoryList_FullMethodName   = "/umsclient.GrowthChangeHistoryService/QueryGrowthChangeHistoryList"
)

// GrowthChangeHistoryServiceClient is the client API for GrowthChangeHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrowthChangeHistoryServiceClient interface {
	// 添加成长值变化历史记录表
	AddGrowthChangeHistory(ctx context.Context, in *AddGrowthChangeHistoryReq, opts ...grpc.CallOption) (*AddGrowthChangeHistoryResp, error)
	// 删除成长值变化历史记录表
	DeleteGrowthChangeHistory(ctx context.Context, in *DeleteGrowthChangeHistoryReq, opts ...grpc.CallOption) (*DeleteGrowthChangeHistoryResp, error)
	// 查询成长值变化历史记录表详情
	QueryGrowthChangeHistoryDetail(ctx context.Context, in *QueryGrowthChangeHistoryDetailReq, opts ...grpc.CallOption) (*QueryGrowthChangeHistoryDetailResp, error)
	// 查询成长值变化历史记录表列表
	QueryGrowthChangeHistoryList(ctx context.Context, in *QueryGrowthChangeHistoryListReq, opts ...grpc.CallOption) (*QueryGrowthChangeHistoryListResp, error)
}

type growthChangeHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrowthChangeHistoryServiceClient(cc grpc.ClientConnInterface) GrowthChangeHistoryServiceClient {
	return &growthChangeHistoryServiceClient{cc}
}

func (c *growthChangeHistoryServiceClient) AddGrowthChangeHistory(ctx context.Context, in *AddGrowthChangeHistoryReq, opts ...grpc.CallOption) (*AddGrowthChangeHistoryResp, error) {
	out := new(AddGrowthChangeHistoryResp)
	err := c.cc.Invoke(ctx, GrowthChangeHistoryService_AddGrowthChangeHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthChangeHistoryServiceClient) DeleteGrowthChangeHistory(ctx context.Context, in *DeleteGrowthChangeHistoryReq, opts ...grpc.CallOption) (*DeleteGrowthChangeHistoryResp, error) {
	out := new(DeleteGrowthChangeHistoryResp)
	err := c.cc.Invoke(ctx, GrowthChangeHistoryService_DeleteGrowthChangeHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthChangeHistoryServiceClient) QueryGrowthChangeHistoryDetail(ctx context.Context, in *QueryGrowthChangeHistoryDetailReq, opts ...grpc.CallOption) (*QueryGrowthChangeHistoryDetailResp, error) {
	out := new(QueryGrowthChangeHistoryDetailResp)
	err := c.cc.Invoke(ctx, GrowthChangeHistoryService_QueryGrowthChangeHistoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthChangeHistoryServiceClient) QueryGrowthChangeHistoryList(ctx context.Context, in *QueryGrowthChangeHistoryListReq, opts ...grpc.CallOption) (*QueryGrowthChangeHistoryListResp, error) {
	out := new(QueryGrowthChangeHistoryListResp)
	err := c.cc.Invoke(ctx, GrowthChangeHistoryService_QueryGrowthChangeHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrowthChangeHistoryServiceServer is the server API for GrowthChangeHistoryService service.
// All implementations must embed UnimplementedGrowthChangeHistoryServiceServer
// for forward compatibility
type GrowthChangeHistoryServiceServer interface {
	// 添加成长值变化历史记录表
	AddGrowthChangeHistory(context.Context, *AddGrowthChangeHistoryReq) (*AddGrowthChangeHistoryResp, error)
	// 删除成长值变化历史记录表
	DeleteGrowthChangeHistory(context.Context, *DeleteGrowthChangeHistoryReq) (*DeleteGrowthChangeHistoryResp, error)
	// 查询成长值变化历史记录表详情
	QueryGrowthChangeHistoryDetail(context.Context, *QueryGrowthChangeHistoryDetailReq) (*QueryGrowthChangeHistoryDetailResp, error)
	// 查询成长值变化历史记录表列表
	QueryGrowthChangeHistoryList(context.Context, *QueryGrowthChangeHistoryListReq) (*QueryGrowthChangeHistoryListResp, error)
	mustEmbedUnimplementedGrowthChangeHistoryServiceServer()
}

// UnimplementedGrowthChangeHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrowthChangeHistoryServiceServer struct {
}

func (UnimplementedGrowthChangeHistoryServiceServer) AddGrowthChangeHistory(context.Context, *AddGrowthChangeHistoryReq) (*AddGrowthChangeHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGrowthChangeHistory not implemented")
}
func (UnimplementedGrowthChangeHistoryServiceServer) DeleteGrowthChangeHistory(context.Context, *DeleteGrowthChangeHistoryReq) (*DeleteGrowthChangeHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrowthChangeHistory not implemented")
}
func (UnimplementedGrowthChangeHistoryServiceServer) QueryGrowthChangeHistoryDetail(context.Context, *QueryGrowthChangeHistoryDetailReq) (*QueryGrowthChangeHistoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGrowthChangeHistoryDetail not implemented")
}
func (UnimplementedGrowthChangeHistoryServiceServer) QueryGrowthChangeHistoryList(context.Context, *QueryGrowthChangeHistoryListReq) (*QueryGrowthChangeHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGrowthChangeHistoryList not implemented")
}
func (UnimplementedGrowthChangeHistoryServiceServer) mustEmbedUnimplementedGrowthChangeHistoryServiceServer() {
}

// UnsafeGrowthChangeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrowthChangeHistoryServiceServer will
// result in compilation errors.
type UnsafeGrowthChangeHistoryServiceServer interface {
	mustEmbedUnimplementedGrowthChangeHistoryServiceServer()
}

func RegisterGrowthChangeHistoryServiceServer(s grpc.ServiceRegistrar, srv GrowthChangeHistoryServiceServer) {
	s.RegisterService(&GrowthChangeHistoryService_ServiceDesc, srv)
}

func _GrowthChangeHistoryService_AddGrowthChangeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGrowthChangeHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthChangeHistoryServiceServer).AddGrowthChangeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrowthChangeHistoryService_AddGrowthChangeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthChangeHistoryServiceServer).AddGrowthChangeHistory(ctx, req.(*AddGrowthChangeHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowthChangeHistoryService_DeleteGrowthChangeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGrowthChangeHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthChangeHistoryServiceServer).DeleteGrowthChangeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrowthChangeHistoryService_DeleteGrowthChangeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthChangeHistoryServiceServer).DeleteGrowthChangeHistory(ctx, req.(*DeleteGrowthChangeHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowthChangeHistoryService_QueryGrowthChangeHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGrowthChangeHistoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthChangeHistoryServiceServer).QueryGrowthChangeHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrowthChangeHistoryService_QueryGrowthChangeHistoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthChangeHistoryServiceServer).QueryGrowthChangeHistoryDetail(ctx, req.(*QueryGrowthChangeHistoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowthChangeHistoryService_QueryGrowthChangeHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGrowthChangeHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthChangeHistoryServiceServer).QueryGrowthChangeHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrowthChangeHistoryService_QueryGrowthChangeHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthChangeHistoryServiceServer).QueryGrowthChangeHistoryList(ctx, req.(*QueryGrowthChangeHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GrowthChangeHistoryService_ServiceDesc is the grpc.ServiceDesc for GrowthChangeHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrowthChangeHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.GrowthChangeHistoryService",
	HandlerType: (*GrowthChangeHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGrowthChangeHistory",
			Handler:    _GrowthChangeHistoryService_AddGrowthChangeHistory_Handler,
		},
		{
			MethodName: "DeleteGrowthChangeHistory",
			Handler:    _GrowthChangeHistoryService_DeleteGrowthChangeHistory_Handler,
		},
		{
			MethodName: "QueryGrowthChangeHistoryDetail",
			Handler:    _GrowthChangeHistoryService_QueryGrowthChangeHistoryDetail_Handler,
		},
		{
			MethodName: "QueryGrowthChangeHistoryList",
			Handler:    _GrowthChangeHistoryService_QueryGrowthChangeHistoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	IntegrationChangeHistoryService_AddIntegrationChangeHistory_FullMethodName         = "/umsclient.IntegrationChangeHistoryService/AddIntegrationChangeHistory"
	IntegrationChangeHistoryService_DeleteIntegrationChangeHistory_FullMethodName      = "/umsclient.IntegrationChangeHistoryService/DeleteIntegrationChangeHistory"
	IntegrationChangeHistoryService_QueryIntegrationChangeHistoryDetail_FullMethodName = "/umsclient.IntegrationChangeHistoryService/QueryIntegrationChangeHistoryDetail"
	IntegrationChangeHistoryService_QueryIntegrationChangeHistoryList_FullMethodName   = "/umsclient.IntegrationChangeHistoryService/QueryIntegrationChangeHistoryList"
)

// IntegrationChangeHistoryServiceClient is the client API for IntegrationChangeHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationChangeHistoryServiceClient interface {
	// 添加积分变化历史记录表
	AddIntegrationChangeHistory(ctx context.Context, in *AddIntegrationChangeHistoryReq, opts ...grpc.CallOption) (*AddIntegrationChangeHistoryResp, error)
	// 删除积分变化历史记录表
	DeleteIntegrationChangeHistory(ctx context.Context, in *DeleteIntegrationChangeHistoryReq, opts ...grpc.CallOption) (*DeleteIntegrationChangeHistoryResp, error)
	// 查询积分变化历史记录表详情
	QueryIntegrationChangeHistoryDetail(ctx context.Context, in *QueryIntegrationChangeHistoryDetailReq, opts ...grpc.CallOption) (*QueryIntegrationChangeHistoryDetailResp, error)
	// 查询积分变化历史记录表列表
	QueryIntegrationChangeHistoryList(ctx context.Context, in *QueryIntegrationChangeHistoryListReq, opts ...grpc.CallOption) (*QueryIntegrationChangeHistoryListResp, error)
}

type integrationChangeHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationChangeHistoryServiceClient(cc grpc.ClientConnInterface) IntegrationChangeHistoryServiceClient {
	return &integrationChangeHistoryServiceClient{cc}
}

func (c *integrationChangeHistoryServiceClient) AddIntegrationChangeHistory(ctx context.Context, in *AddIntegrationChangeHistoryReq, opts ...grpc.CallOption) (*AddIntegrationChangeHistoryResp, error) {
	out := new(AddIntegrationChangeHistoryResp)
	err := c.cc.Invoke(ctx, IntegrationChangeHistoryService_AddIntegrationChangeHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationChangeHistoryServiceClient) DeleteIntegrationChangeHistory(ctx context.Context, in *DeleteIntegrationChangeHistoryReq, opts ...grpc.CallOption) (*DeleteIntegrationChangeHistoryResp, error) {
	out := new(DeleteIntegrationChangeHistoryResp)
	err := c.cc.Invoke(ctx, IntegrationChangeHistoryService_DeleteIntegrationChangeHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationChangeHistoryServiceClient) QueryIntegrationChangeHistoryDetail(ctx context.Context, in *QueryIntegrationChangeHistoryDetailReq, opts ...grpc.CallOption) (*QueryIntegrationChangeHistoryDetailResp, error) {
	out := new(QueryIntegrationChangeHistoryDetailResp)
	err := c.cc.Invoke(ctx, IntegrationChangeHistoryService_QueryIntegrationChangeHistoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationChangeHistoryServiceClient) QueryIntegrationChangeHistoryList(ctx context.Context, in *QueryIntegrationChangeHistoryListReq, opts ...grpc.CallOption) (*QueryIntegrationChangeHistoryListResp, error) {
	out := new(QueryIntegrationChangeHistoryListResp)
	err := c.cc.Invoke(ctx, IntegrationChangeHistoryService_QueryIntegrationChangeHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationChangeHistoryServiceServer is the server API for IntegrationChangeHistoryService service.
// All implementations must embed UnimplementedIntegrationChangeHistoryServiceServer
// for forward compatibility
type IntegrationChangeHistoryServiceServer interface {
	// 添加积分变化历史记录表
	AddIntegrationChangeHistory(context.Context, *AddIntegrationChangeHistoryReq) (*AddIntegrationChangeHistoryResp, error)
	// 删除积分变化历史记录表
	DeleteIntegrationChangeHistory(context.Context, *DeleteIntegrationChangeHistoryReq) (*DeleteIntegrationChangeHistoryResp, error)
	// 查询积分变化历史记录表详情
	QueryIntegrationChangeHistoryDetail(context.Context, *QueryIntegrationChangeHistoryDetailReq) (*QueryIntegrationChangeHistoryDetailResp, error)
	// 查询积分变化历史记录表列表
	QueryIntegrationChangeHistoryList(context.Context, *QueryIntegrationChangeHistoryListReq) (*QueryIntegrationChangeHistoryListResp, error)
	mustEmbedUnimplementedIntegrationChangeHistoryServiceServer()
}

// UnimplementedIntegrationChangeHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationChangeHistoryServiceServer struct {
}

func (UnimplementedIntegrationChangeHistoryServiceServer) AddIntegrationChangeHistory(context.Context, *AddIntegrationChangeHistoryReq) (*AddIntegrationChangeHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntegrationChangeHistory not implemented")
}
func (UnimplementedIntegrationChangeHistoryServiceServer) DeleteIntegrationChangeHistory(context.Context, *DeleteIntegrationChangeHistoryReq) (*DeleteIntegrationChangeHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegrationChangeHistory not implemented")
}
func (UnimplementedIntegrationChangeHistoryServiceServer) QueryIntegrationChangeHistoryDetail(context.Context, *QueryIntegrationChangeHistoryDetailReq) (*QueryIntegrationChangeHistoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIntegrationChangeHistoryDetail not implemented")
}
func (UnimplementedIntegrationChangeHistoryServiceServer) QueryIntegrationChangeHistoryList(context.Context, *QueryIntegrationChangeHistoryListReq) (*QueryIntegrationChangeHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIntegrationChangeHistoryList not implemented")
}
func (UnimplementedIntegrationChangeHistoryServiceServer) mustEmbedUnimplementedIntegrationChangeHistoryServiceServer() {
}

// UnsafeIntegrationChangeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationChangeHistoryServiceServer will
// result in compilation errors.
type UnsafeIntegrationChangeHistoryServiceServer interface {
	mustEmbedUnimplementedIntegrationChangeHistoryServiceServer()
}

func RegisterIntegrationChangeHistoryServiceServer(s grpc.ServiceRegistrar, srv IntegrationChangeHistoryServiceServer) {
	s.RegisterService(&IntegrationChangeHistoryService_ServiceDesc, srv)
}

func _IntegrationChangeHistoryService_AddIntegrationChangeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntegrationChangeHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationChangeHistoryServiceServer).AddIntegrationChangeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationChangeHistoryService_AddIntegrationChangeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationChangeHistoryServiceServer).AddIntegrationChangeHistory(ctx, req.(*AddIntegrationChangeHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationChangeHistoryService_DeleteIntegrationChangeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationChangeHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationChangeHistoryServiceServer).DeleteIntegrationChangeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationChangeHistoryService_DeleteIntegrationChangeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationChangeHistoryServiceServer).DeleteIntegrationChangeHistory(ctx, req.(*DeleteIntegrationChangeHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationChangeHistoryService_QueryIntegrationChangeHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIntegrationChangeHistoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationChangeHistoryServiceServer).QueryIntegrationChangeHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationChangeHistoryService_QueryIntegrationChangeHistoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationChangeHistoryServiceServer).QueryIntegrationChangeHistoryDetail(ctx, req.(*QueryIntegrationChangeHistoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationChangeHistoryService_QueryIntegrationChangeHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIntegrationChangeHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationChangeHistoryServiceServer).QueryIntegrationChangeHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationChangeHistoryService_QueryIntegrationChangeHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationChangeHistoryServiceServer).QueryIntegrationChangeHistoryList(ctx, req.(*QueryIntegrationChangeHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationChangeHistoryService_ServiceDesc is the grpc.ServiceDesc for IntegrationChangeHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationChangeHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.IntegrationChangeHistoryService",
	HandlerType: (*IntegrationChangeHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIntegrationChangeHistory",
			Handler:    _IntegrationChangeHistoryService_AddIntegrationChangeHistory_Handler,
		},
		{
			MethodName: "DeleteIntegrationChangeHistory",
			Handler:    _IntegrationChangeHistoryService_DeleteIntegrationChangeHistory_Handler,
		},
		{
			MethodName: "QueryIntegrationChangeHistoryDetail",
			Handler:    _IntegrationChangeHistoryService_QueryIntegrationChangeHistoryDetail_Handler,
		},
		{
			MethodName: "QueryIntegrationChangeHistoryList",
			Handler:    _IntegrationChangeHistoryService_QueryIntegrationChangeHistoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	IntegrationConsumeSettingService_AddIntegrationConsumeSetting_FullMethodName          = "/umsclient.IntegrationConsumeSettingService/AddIntegrationConsumeSetting"
	IntegrationConsumeSettingService_DeleteIntegrationConsumeSetting_FullMethodName       = "/umsclient.IntegrationConsumeSettingService/DeleteIntegrationConsumeSetting"
	IntegrationConsumeSettingService_UpdateIntegrationConsumeSetting_FullMethodName       = "/umsclient.IntegrationConsumeSettingService/UpdateIntegrationConsumeSetting"
	IntegrationConsumeSettingService_UpdateIntegrationConsumeSettingStatus_FullMethodName = "/umsclient.IntegrationConsumeSettingService/UpdateIntegrationConsumeSettingStatus"
	IntegrationConsumeSettingService_QueryIntegrationConsumeSettingDetail_FullMethodName  = "/umsclient.IntegrationConsumeSettingService/QueryIntegrationConsumeSettingDetail"
	IntegrationConsumeSettingService_QueryIntegrationConsumeSettingList_FullMethodName    = "/umsclient.IntegrationConsumeSettingService/QueryIntegrationConsumeSettingList"
)

// IntegrationConsumeSettingServiceClient is the client API for IntegrationConsumeSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationConsumeSettingServiceClient interface {
	// 添加积分消费设置
	AddIntegrationConsumeSetting(ctx context.Context, in *AddIntegrationConsumeSettingReq, opts ...grpc.CallOption) (*AddIntegrationConsumeSettingResp, error)
	// 删除积分消费设置
	DeleteIntegrationConsumeSetting(ctx context.Context, in *DeleteIntegrationConsumeSettingReq, opts ...grpc.CallOption) (*DeleteIntegrationConsumeSettingResp, error)
	// 更新积分消费设置
	UpdateIntegrationConsumeSetting(ctx context.Context, in *UpdateIntegrationConsumeSettingReq, opts ...grpc.CallOption) (*UpdateIntegrationConsumeSettingResp, error)
	// 更新积分消费设置状态
	UpdateIntegrationConsumeSettingStatus(ctx context.Context, in *UpdateIntegrationConsumeSettingStatusReq, opts ...grpc.CallOption) (*UpdateIntegrationConsumeSettingStatusResp, error)
	// 查询积分消费设置详情
	QueryIntegrationConsumeSettingDetail(ctx context.Context, in *QueryIntegrationConsumeSettingDetailReq, opts ...grpc.CallOption) (*QueryIntegrationConsumeSettingDetailResp, error)
	// 查询积分消费设置列表
	QueryIntegrationConsumeSettingList(ctx context.Context, in *QueryIntegrationConsumeSettingListReq, opts ...grpc.CallOption) (*QueryIntegrationConsumeSettingListResp, error)
}

type integrationConsumeSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationConsumeSettingServiceClient(cc grpc.ClientConnInterface) IntegrationConsumeSettingServiceClient {
	return &integrationConsumeSettingServiceClient{cc}
}

func (c *integrationConsumeSettingServiceClient) AddIntegrationConsumeSetting(ctx context.Context, in *AddIntegrationConsumeSettingReq, opts ...grpc.CallOption) (*AddIntegrationConsumeSettingResp, error) {
	out := new(AddIntegrationConsumeSettingResp)
	err := c.cc.Invoke(ctx, IntegrationConsumeSettingService_AddIntegrationConsumeSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationConsumeSettingServiceClient) DeleteIntegrationConsumeSetting(ctx context.Context, in *DeleteIntegrationConsumeSettingReq, opts ...grpc.CallOption) (*DeleteIntegrationConsumeSettingResp, error) {
	out := new(DeleteIntegrationConsumeSettingResp)
	err := c.cc.Invoke(ctx, IntegrationConsumeSettingService_DeleteIntegrationConsumeSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationConsumeSettingServiceClient) UpdateIntegrationConsumeSetting(ctx context.Context, in *UpdateIntegrationConsumeSettingReq, opts ...grpc.CallOption) (*UpdateIntegrationConsumeSettingResp, error) {
	out := new(UpdateIntegrationConsumeSettingResp)
	err := c.cc.Invoke(ctx, IntegrationConsumeSettingService_UpdateIntegrationConsumeSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationConsumeSettingServiceClient) UpdateIntegrationConsumeSettingStatus(ctx context.Context, in *UpdateIntegrationConsumeSettingStatusReq, opts ...grpc.CallOption) (*UpdateIntegrationConsumeSettingStatusResp, error) {
	out := new(UpdateIntegrationConsumeSettingStatusResp)
	err := c.cc.Invoke(ctx, IntegrationConsumeSettingService_UpdateIntegrationConsumeSettingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationConsumeSettingServiceClient) QueryIntegrationConsumeSettingDetail(ctx context.Context, in *QueryIntegrationConsumeSettingDetailReq, opts ...grpc.CallOption) (*QueryIntegrationConsumeSettingDetailResp, error) {
	out := new(QueryIntegrationConsumeSettingDetailResp)
	err := c.cc.Invoke(ctx, IntegrationConsumeSettingService_QueryIntegrationConsumeSettingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationConsumeSettingServiceClient) QueryIntegrationConsumeSettingList(ctx context.Context, in *QueryIntegrationConsumeSettingListReq, opts ...grpc.CallOption) (*QueryIntegrationConsumeSettingListResp, error) {
	out := new(QueryIntegrationConsumeSettingListResp)
	err := c.cc.Invoke(ctx, IntegrationConsumeSettingService_QueryIntegrationConsumeSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationConsumeSettingServiceServer is the server API for IntegrationConsumeSettingService service.
// All implementations must embed UnimplementedIntegrationConsumeSettingServiceServer
// for forward compatibility
type IntegrationConsumeSettingServiceServer interface {
	// 添加积分消费设置
	AddIntegrationConsumeSetting(context.Context, *AddIntegrationConsumeSettingReq) (*AddIntegrationConsumeSettingResp, error)
	// 删除积分消费设置
	DeleteIntegrationConsumeSetting(context.Context, *DeleteIntegrationConsumeSettingReq) (*DeleteIntegrationConsumeSettingResp, error)
	// 更新积分消费设置
	UpdateIntegrationConsumeSetting(context.Context, *UpdateIntegrationConsumeSettingReq) (*UpdateIntegrationConsumeSettingResp, error)
	// 更新积分消费设置状态
	UpdateIntegrationConsumeSettingStatus(context.Context, *UpdateIntegrationConsumeSettingStatusReq) (*UpdateIntegrationConsumeSettingStatusResp, error)
	// 查询积分消费设置详情
	QueryIntegrationConsumeSettingDetail(context.Context, *QueryIntegrationConsumeSettingDetailReq) (*QueryIntegrationConsumeSettingDetailResp, error)
	// 查询积分消费设置列表
	QueryIntegrationConsumeSettingList(context.Context, *QueryIntegrationConsumeSettingListReq) (*QueryIntegrationConsumeSettingListResp, error)
	mustEmbedUnimplementedIntegrationConsumeSettingServiceServer()
}

// UnimplementedIntegrationConsumeSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationConsumeSettingServiceServer struct {
}

func (UnimplementedIntegrationConsumeSettingServiceServer) AddIntegrationConsumeSetting(context.Context, *AddIntegrationConsumeSettingReq) (*AddIntegrationConsumeSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntegrationConsumeSetting not implemented")
}
func (UnimplementedIntegrationConsumeSettingServiceServer) DeleteIntegrationConsumeSetting(context.Context, *DeleteIntegrationConsumeSettingReq) (*DeleteIntegrationConsumeSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegrationConsumeSetting not implemented")
}
func (UnimplementedIntegrationConsumeSettingServiceServer) UpdateIntegrationConsumeSetting(context.Context, *UpdateIntegrationConsumeSettingReq) (*UpdateIntegrationConsumeSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegrationConsumeSetting not implemented")
}
func (UnimplementedIntegrationConsumeSettingServiceServer) UpdateIntegrationConsumeSettingStatus(context.Context, *UpdateIntegrationConsumeSettingStatusReq) (*UpdateIntegrationConsumeSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegrationConsumeSettingStatus not implemented")
}
func (UnimplementedIntegrationConsumeSettingServiceServer) QueryIntegrationConsumeSettingDetail(context.Context, *QueryIntegrationConsumeSettingDetailReq) (*QueryIntegrationConsumeSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIntegrationConsumeSettingDetail not implemented")
}
func (UnimplementedIntegrationConsumeSettingServiceServer) QueryIntegrationConsumeSettingList(context.Context, *QueryIntegrationConsumeSettingListReq) (*QueryIntegrationConsumeSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIntegrationConsumeSettingList not implemented")
}
func (UnimplementedIntegrationConsumeSettingServiceServer) mustEmbedUnimplementedIntegrationConsumeSettingServiceServer() {
}

// UnsafeIntegrationConsumeSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationConsumeSettingServiceServer will
// result in compilation errors.
type UnsafeIntegrationConsumeSettingServiceServer interface {
	mustEmbedUnimplementedIntegrationConsumeSettingServiceServer()
}

func RegisterIntegrationConsumeSettingServiceServer(s grpc.ServiceRegistrar, srv IntegrationConsumeSettingServiceServer) {
	s.RegisterService(&IntegrationConsumeSettingService_ServiceDesc, srv)
}

func _IntegrationConsumeSettingService_AddIntegrationConsumeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntegrationConsumeSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationConsumeSettingServiceServer).AddIntegrationConsumeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationConsumeSettingService_AddIntegrationConsumeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationConsumeSettingServiceServer).AddIntegrationConsumeSetting(ctx, req.(*AddIntegrationConsumeSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationConsumeSettingService_DeleteIntegrationConsumeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationConsumeSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationConsumeSettingServiceServer).DeleteIntegrationConsumeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationConsumeSettingService_DeleteIntegrationConsumeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationConsumeSettingServiceServer).DeleteIntegrationConsumeSetting(ctx, req.(*DeleteIntegrationConsumeSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationConsumeSettingService_UpdateIntegrationConsumeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntegrationConsumeSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationConsumeSettingServiceServer).UpdateIntegrationConsumeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationConsumeSettingService_UpdateIntegrationConsumeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationConsumeSettingServiceServer).UpdateIntegrationConsumeSetting(ctx, req.(*UpdateIntegrationConsumeSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationConsumeSettingService_UpdateIntegrationConsumeSettingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntegrationConsumeSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationConsumeSettingServiceServer).UpdateIntegrationConsumeSettingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationConsumeSettingService_UpdateIntegrationConsumeSettingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationConsumeSettingServiceServer).UpdateIntegrationConsumeSettingStatus(ctx, req.(*UpdateIntegrationConsumeSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationConsumeSettingService_QueryIntegrationConsumeSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIntegrationConsumeSettingDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationConsumeSettingServiceServer).QueryIntegrationConsumeSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationConsumeSettingService_QueryIntegrationConsumeSettingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationConsumeSettingServiceServer).QueryIntegrationConsumeSettingDetail(ctx, req.(*QueryIntegrationConsumeSettingDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationConsumeSettingService_QueryIntegrationConsumeSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIntegrationConsumeSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationConsumeSettingServiceServer).QueryIntegrationConsumeSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationConsumeSettingService_QueryIntegrationConsumeSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationConsumeSettingServiceServer).QueryIntegrationConsumeSettingList(ctx, req.(*QueryIntegrationConsumeSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationConsumeSettingService_ServiceDesc is the grpc.ServiceDesc for IntegrationConsumeSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationConsumeSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.IntegrationConsumeSettingService",
	HandlerType: (*IntegrationConsumeSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIntegrationConsumeSetting",
			Handler:    _IntegrationConsumeSettingService_AddIntegrationConsumeSetting_Handler,
		},
		{
			MethodName: "DeleteIntegrationConsumeSetting",
			Handler:    _IntegrationConsumeSettingService_DeleteIntegrationConsumeSetting_Handler,
		},
		{
			MethodName: "UpdateIntegrationConsumeSetting",
			Handler:    _IntegrationConsumeSettingService_UpdateIntegrationConsumeSetting_Handler,
		},
		{
			MethodName: "UpdateIntegrationConsumeSettingStatus",
			Handler:    _IntegrationConsumeSettingService_UpdateIntegrationConsumeSettingStatus_Handler,
		},
		{
			MethodName: "QueryIntegrationConsumeSettingDetail",
			Handler:    _IntegrationConsumeSettingService_QueryIntegrationConsumeSettingDetail_Handler,
		},
		{
			MethodName: "QueryIntegrationConsumeSettingList",
			Handler:    _IntegrationConsumeSettingService_QueryIntegrationConsumeSettingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberService_AddMember_FullMethodName               = "/umsclient.MemberService/AddMember"
	MemberService_DeleteMember_FullMethodName            = "/umsclient.MemberService/DeleteMember"
	MemberService_UpdateMember_FullMethodName            = "/umsclient.MemberService/UpdateMember"
	MemberService_UpdateMemberStatus_FullMethodName      = "/umsclient.MemberService/UpdateMemberStatus"
	MemberService_QueryMemberDetail_FullMethodName       = "/umsclient.MemberService/QueryMemberDetail"
	MemberService_QueryMemberList_FullMethodName         = "/umsclient.MemberService/QueryMemberList"
	MemberService_MemberLogin_FullMethodName             = "/umsclient.MemberService/MemberLogin"
	MemberService_UpdateMemberIntegration_FullMethodName = "/umsclient.MemberService/UpdateMemberIntegration"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	// 添加会员表
	AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error)
	// 删除会员表
	DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error)
	// 更新会员表
	UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error)
	// 更新会员表状态
	UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error)
	// 查询会员表详情
	QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error)
	// 查询会员表列表
	QueryMemberList(ctx context.Context, in *QueryMemberListReq, opts ...grpc.CallOption) (*QueryMemberListResp, error)
	// 会员登录
	MemberLogin(ctx context.Context, in *MemberLoginReq, opts ...grpc.CallOption) (*MemberLoginResp, error)
	// 更新会员积分
	UpdateMemberIntegration(ctx context.Context, in *UpdateMemberIntegrationReq, opts ...grpc.CallOption) (*UpdateMemberIntegrationResp, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error) {
	out := new(AddMemberResp)
	err := c.cc.Invoke(ctx, MemberService_AddMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error) {
	out := new(DeleteMemberResp)
	err := c.cc.Invoke(ctx, MemberService_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error) {
	out := new(UpdateMemberResp)
	err := c.cc.Invoke(ctx, MemberService_UpdateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error) {
	out := new(UpdateMemberStatusResp)
	err := c.cc.Invoke(ctx, MemberService_UpdateMemberStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error) {
	out := new(QueryMemberDetailResp)
	err := c.cc.Invoke(ctx, MemberService_QueryMemberDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryMemberList(ctx context.Context, in *QueryMemberListReq, opts ...grpc.CallOption) (*QueryMemberListResp, error) {
	out := new(QueryMemberListResp)
	err := c.cc.Invoke(ctx, MemberService_QueryMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberLogin(ctx context.Context, in *MemberLoginReq, opts ...grpc.CallOption) (*MemberLoginResp, error) {
	out := new(MemberLoginResp)
	err := c.cc.Invoke(ctx, MemberService_MemberLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberIntegration(ctx context.Context, in *UpdateMemberIntegrationReq, opts ...grpc.CallOption) (*UpdateMemberIntegrationResp, error) {
	out := new(UpdateMemberIntegrationResp)
	err := c.cc.Invoke(ctx, MemberService_UpdateMemberIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	// 添加会员表
	AddMember(context.Context, *AddMemberReq) (*AddMemberResp, error)
	// 删除会员表
	DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberResp, error)
	// 更新会员表
	UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberResp, error)
	// 更新会员表状态
	UpdateMemberStatus(context.Context, *UpdateMemberStatusReq) (*UpdateMemberStatusResp, error)
	// 查询会员表详情
	QueryMemberDetail(context.Context, *QueryMemberDetailReq) (*QueryMemberDetailResp, error)
	// 查询会员表列表
	QueryMemberList(context.Context, *QueryMemberListReq) (*QueryMemberListResp, error)
	// 会员登录
	MemberLogin(context.Context, *MemberLoginReq) (*MemberLoginResp, error)
	// 更新会员积分
	UpdateMemberIntegration(context.Context, *UpdateMemberIntegrationReq) (*UpdateMemberIntegrationResp, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) AddMember(context.Context, *AddMemberReq) (*AddMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberStatus(context.Context, *UpdateMemberStatusReq) (*UpdateMemberStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberStatus not implemented")
}
func (UnimplementedMemberServiceServer) QueryMemberDetail(context.Context, *QueryMemberDetailReq) (*QueryMemberDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberDetail not implemented")
}
func (UnimplementedMemberServiceServer) QueryMemberList(context.Context, *QueryMemberListReq) (*QueryMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberList not implemented")
}
func (UnimplementedMemberServiceServer) MemberLogin(context.Context, *MemberLoginReq) (*MemberLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLogin not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberIntegration(context.Context, *UpdateMemberIntegrationReq) (*UpdateMemberIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberIntegration not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AddMember(ctx, req.(*AddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMember(ctx, req.(*DeleteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMember(ctx, req.(*UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberStatus(ctx, req.(*UpdateMemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryMemberDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryMemberDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_QueryMemberDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryMemberDetail(ctx, req.(*QueryMemberDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_QueryMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryMemberList(ctx, req.(*QueryMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_MemberLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberLogin(ctx, req.(*MemberLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMemberIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberIntegration(ctx, req.(*UpdateMemberIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _MemberService_AddMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MemberService_DeleteMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _MemberService_UpdateMember_Handler,
		},
		{
			MethodName: "UpdateMemberStatus",
			Handler:    _MemberService_UpdateMemberStatus_Handler,
		},
		{
			MethodName: "QueryMemberDetail",
			Handler:    _MemberService_QueryMemberDetail_Handler,
		},
		{
			MethodName: "QueryMemberList",
			Handler:    _MemberService_QueryMemberList_Handler,
		},
		{
			MethodName: "MemberLogin",
			Handler:    _MemberService_MemberLogin_Handler,
		},
		{
			MethodName: "UpdateMemberIntegration",
			Handler:    _MemberService_UpdateMemberIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberBrandAttentionService_AddMemberBrandAttention_FullMethodName         = "/umsclient.MemberBrandAttentionService/AddMemberBrandAttention"
	MemberBrandAttentionService_DeleteMemberBrandAttention_FullMethodName      = "/umsclient.MemberBrandAttentionService/DeleteMemberBrandAttention"
	MemberBrandAttentionService_QueryMemberBrandAttentionDetail_FullMethodName = "/umsclient.MemberBrandAttentionService/QueryMemberBrandAttentionDetail"
	MemberBrandAttentionService_QueryMemberBrandAttentionList_FullMethodName   = "/umsclient.MemberBrandAttentionService/QueryMemberBrandAttentionList"
)

// MemberBrandAttentionServiceClient is the client API for MemberBrandAttentionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberBrandAttentionServiceClient interface {
	// 添加会员关注品牌
	AddMemberBrandAttention(ctx context.Context, in *AddMemberBrandAttentionReq, opts ...grpc.CallOption) (*AddMemberBrandAttentionResp, error)
	// 取消品牌关注/清空当前用户品牌关注列表
	DeleteMemberBrandAttention(ctx context.Context, in *DeleteMemberBrandAttentionReq, opts ...grpc.CallOption) (*DeleteMemberBrandAttentionResp, error)
	// 查询会员关注品牌详情
	QueryMemberBrandAttentionDetail(ctx context.Context, in *QueryMemberBrandAttentionDetailReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionDetailResp, error)
	// 查询会员关注品牌列表
	QueryMemberBrandAttentionList(ctx context.Context, in *QueryMemberBrandAttentionListReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionListResp, error)
}

type memberBrandAttentionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberBrandAttentionServiceClient(cc grpc.ClientConnInterface) MemberBrandAttentionServiceClient {
	return &memberBrandAttentionServiceClient{cc}
}

func (c *memberBrandAttentionServiceClient) AddMemberBrandAttention(ctx context.Context, in *AddMemberBrandAttentionReq, opts ...grpc.CallOption) (*AddMemberBrandAttentionResp, error) {
	out := new(AddMemberBrandAttentionResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_AddMemberBrandAttention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberBrandAttentionServiceClient) DeleteMemberBrandAttention(ctx context.Context, in *DeleteMemberBrandAttentionReq, opts ...grpc.CallOption) (*DeleteMemberBrandAttentionResp, error) {
	out := new(DeleteMemberBrandAttentionResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_DeleteMemberBrandAttention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberBrandAttentionServiceClient) QueryMemberBrandAttentionDetail(ctx context.Context, in *QueryMemberBrandAttentionDetailReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionDetailResp, error) {
	out := new(QueryMemberBrandAttentionDetailResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_QueryMemberBrandAttentionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberBrandAttentionServiceClient) QueryMemberBrandAttentionList(ctx context.Context, in *QueryMemberBrandAttentionListReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionListResp, error) {
	out := new(QueryMemberBrandAttentionListResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_QueryMemberBrandAttentionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberBrandAttentionServiceServer is the server API for MemberBrandAttentionService service.
// All implementations must embed UnimplementedMemberBrandAttentionServiceServer
// for forward compatibility
type MemberBrandAttentionServiceServer interface {
	// 添加会员关注品牌
	AddMemberBrandAttention(context.Context, *AddMemberBrandAttentionReq) (*AddMemberBrandAttentionResp, error)
	// 取消品牌关注/清空当前用户品牌关注列表
	DeleteMemberBrandAttention(context.Context, *DeleteMemberBrandAttentionReq) (*DeleteMemberBrandAttentionResp, error)
	// 查询会员关注品牌详情
	QueryMemberBrandAttentionDetail(context.Context, *QueryMemberBrandAttentionDetailReq) (*QueryMemberBrandAttentionDetailResp, error)
	// 查询会员关注品牌列表
	QueryMemberBrandAttentionList(context.Context, *QueryMemberBrandAttentionListReq) (*QueryMemberBrandAttentionListResp, error)
	mustEmbedUnimplementedMemberBrandAttentionServiceServer()
}

// UnimplementedMemberBrandAttentionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberBrandAttentionServiceServer struct {
}

func (UnimplementedMemberBrandAttentionServiceServer) AddMemberBrandAttention(context.Context, *AddMemberBrandAttentionReq) (*AddMemberBrandAttentionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberBrandAttention not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) DeleteMemberBrandAttention(context.Context, *DeleteMemberBrandAttentionReq) (*DeleteMemberBrandAttentionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberBrandAttention not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) QueryMemberBrandAttentionDetail(context.Context, *QueryMemberBrandAttentionDetailReq) (*QueryMemberBrandAttentionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberBrandAttentionDetail not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) QueryMemberBrandAttentionList(context.Context, *QueryMemberBrandAttentionListReq) (*QueryMemberBrandAttentionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberBrandAttentionList not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) mustEmbedUnimplementedMemberBrandAttentionServiceServer() {
}

// UnsafeMemberBrandAttentionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberBrandAttentionServiceServer will
// result in compilation errors.
type UnsafeMemberBrandAttentionServiceServer interface {
	mustEmbedUnimplementedMemberBrandAttentionServiceServer()
}

func RegisterMemberBrandAttentionServiceServer(s grpc.ServiceRegistrar, srv MemberBrandAttentionServiceServer) {
	s.RegisterService(&MemberBrandAttentionService_ServiceDesc, srv)
}

func _MemberBrandAttentionService_AddMemberBrandAttention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberBrandAttentionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).AddMemberBrandAttention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_AddMemberBrandAttention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).AddMemberBrandAttention(ctx, req.(*AddMemberBrandAttentionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberBrandAttentionService_DeleteMemberBrandAttention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberBrandAttentionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).DeleteMemberBrandAttention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_DeleteMemberBrandAttention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).DeleteMemberBrandAttention(ctx, req.(*DeleteMemberBrandAttentionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberBrandAttentionService_QueryMemberBrandAttentionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberBrandAttentionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_QueryMemberBrandAttentionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionDetail(ctx, req.(*QueryMemberBrandAttentionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberBrandAttentionService_QueryMemberBrandAttentionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberBrandAttentionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_QueryMemberBrandAttentionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionList(ctx, req.(*QueryMemberBrandAttentionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberBrandAttentionService_ServiceDesc is the grpc.ServiceDesc for MemberBrandAttentionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberBrandAttentionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberBrandAttentionService",
	HandlerType: (*MemberBrandAttentionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberBrandAttention",
			Handler:    _MemberBrandAttentionService_AddMemberBrandAttention_Handler,
		},
		{
			MethodName: "DeleteMemberBrandAttention",
			Handler:    _MemberBrandAttentionService_DeleteMemberBrandAttention_Handler,
		},
		{
			MethodName: "QueryMemberBrandAttentionDetail",
			Handler:    _MemberBrandAttentionService_QueryMemberBrandAttentionDetail_Handler,
		},
		{
			MethodName: "QueryMemberBrandAttentionList",
			Handler:    _MemberBrandAttentionService_QueryMemberBrandAttentionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberLevelService_AddMemberLevel_FullMethodName          = "/umsclient.MemberLevelService/AddMemberLevel"
	MemberLevelService_DeleteMemberLevel_FullMethodName       = "/umsclient.MemberLevelService/DeleteMemberLevel"
	MemberLevelService_UpdateMemberLevel_FullMethodName       = "/umsclient.MemberLevelService/UpdateMemberLevel"
	MemberLevelService_UpdateMemberLevelStatus_FullMethodName = "/umsclient.MemberLevelService/UpdateMemberLevelStatus"
	MemberLevelService_QueryMemberLevelDetail_FullMethodName  = "/umsclient.MemberLevelService/QueryMemberLevelDetail"
	MemberLevelService_QueryMemberLevelList_FullMethodName    = "/umsclient.MemberLevelService/QueryMemberLevelList"
)

// MemberLevelServiceClient is the client API for MemberLevelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberLevelServiceClient interface {
	// 添加会员等级表
	AddMemberLevel(ctx context.Context, in *AddMemberLevelReq, opts ...grpc.CallOption) (*AddMemberLevelResp, error)
	// 删除会员等级表
	DeleteMemberLevel(ctx context.Context, in *DeleteMemberLevelReq, opts ...grpc.CallOption) (*DeleteMemberLevelResp, error)
	// 更新会员等级表
	UpdateMemberLevel(ctx context.Context, in *UpdateMemberLevelReq, opts ...grpc.CallOption) (*UpdateMemberLevelResp, error)
	// 更新会员等级表状态
	UpdateMemberLevelStatus(ctx context.Context, in *UpdateMemberLevelStatusReq, opts ...grpc.CallOption) (*UpdateMemberLevelStatusResp, error)
	// 查询会员等级表详情
	QueryMemberLevelDetail(ctx context.Context, in *QueryMemberLevelDetailReq, opts ...grpc.CallOption) (*QueryMemberLevelDetailResp, error)
	// 查询会员等级表列表
	QueryMemberLevelList(ctx context.Context, in *QueryMemberLevelListReq, opts ...grpc.CallOption) (*QueryMemberLevelListResp, error)
}

type memberLevelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberLevelServiceClient(cc grpc.ClientConnInterface) MemberLevelServiceClient {
	return &memberLevelServiceClient{cc}
}

func (c *memberLevelServiceClient) AddMemberLevel(ctx context.Context, in *AddMemberLevelReq, opts ...grpc.CallOption) (*AddMemberLevelResp, error) {
	out := new(AddMemberLevelResp)
	err := c.cc.Invoke(ctx, MemberLevelService_AddMemberLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) DeleteMemberLevel(ctx context.Context, in *DeleteMemberLevelReq, opts ...grpc.CallOption) (*DeleteMemberLevelResp, error) {
	out := new(DeleteMemberLevelResp)
	err := c.cc.Invoke(ctx, MemberLevelService_DeleteMemberLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) UpdateMemberLevel(ctx context.Context, in *UpdateMemberLevelReq, opts ...grpc.CallOption) (*UpdateMemberLevelResp, error) {
	out := new(UpdateMemberLevelResp)
	err := c.cc.Invoke(ctx, MemberLevelService_UpdateMemberLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) UpdateMemberLevelStatus(ctx context.Context, in *UpdateMemberLevelStatusReq, opts ...grpc.CallOption) (*UpdateMemberLevelStatusResp, error) {
	out := new(UpdateMemberLevelStatusResp)
	err := c.cc.Invoke(ctx, MemberLevelService_UpdateMemberLevelStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) QueryMemberLevelDetail(ctx context.Context, in *QueryMemberLevelDetailReq, opts ...grpc.CallOption) (*QueryMemberLevelDetailResp, error) {
	out := new(QueryMemberLevelDetailResp)
	err := c.cc.Invoke(ctx, MemberLevelService_QueryMemberLevelDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) QueryMemberLevelList(ctx context.Context, in *QueryMemberLevelListReq, opts ...grpc.CallOption) (*QueryMemberLevelListResp, error) {
	out := new(QueryMemberLevelListResp)
	err := c.cc.Invoke(ctx, MemberLevelService_QueryMemberLevelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberLevelServiceServer is the server API for MemberLevelService service.
// All implementations must embed UnimplementedMemberLevelServiceServer
// for forward compatibility
type MemberLevelServiceServer interface {
	// 添加会员等级表
	AddMemberLevel(context.Context, *AddMemberLevelReq) (*AddMemberLevelResp, error)
	// 删除会员等级表
	DeleteMemberLevel(context.Context, *DeleteMemberLevelReq) (*DeleteMemberLevelResp, error)
	// 更新会员等级表
	UpdateMemberLevel(context.Context, *UpdateMemberLevelReq) (*UpdateMemberLevelResp, error)
	// 更新会员等级表状态
	UpdateMemberLevelStatus(context.Context, *UpdateMemberLevelStatusReq) (*UpdateMemberLevelStatusResp, error)
	// 查询会员等级表详情
	QueryMemberLevelDetail(context.Context, *QueryMemberLevelDetailReq) (*QueryMemberLevelDetailResp, error)
	// 查询会员等级表列表
	QueryMemberLevelList(context.Context, *QueryMemberLevelListReq) (*QueryMemberLevelListResp, error)
	mustEmbedUnimplementedMemberLevelServiceServer()
}

// UnimplementedMemberLevelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberLevelServiceServer struct {
}

func (UnimplementedMemberLevelServiceServer) AddMemberLevel(context.Context, *AddMemberLevelReq) (*AddMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberLevel not implemented")
}
func (UnimplementedMemberLevelServiceServer) DeleteMemberLevel(context.Context, *DeleteMemberLevelReq) (*DeleteMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLevel not implemented")
}
func (UnimplementedMemberLevelServiceServer) UpdateMemberLevel(context.Context, *UpdateMemberLevelReq) (*UpdateMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberLevel not implemented")
}
func (UnimplementedMemberLevelServiceServer) UpdateMemberLevelStatus(context.Context, *UpdateMemberLevelStatusReq) (*UpdateMemberLevelStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberLevelStatus not implemented")
}
func (UnimplementedMemberLevelServiceServer) QueryMemberLevelDetail(context.Context, *QueryMemberLevelDetailReq) (*QueryMemberLevelDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLevelDetail not implemented")
}
func (UnimplementedMemberLevelServiceServer) QueryMemberLevelList(context.Context, *QueryMemberLevelListReq) (*QueryMemberLevelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLevelList not implemented")
}
func (UnimplementedMemberLevelServiceServer) mustEmbedUnimplementedMemberLevelServiceServer() {}

// UnsafeMemberLevelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberLevelServiceServer will
// result in compilation errors.
type UnsafeMemberLevelServiceServer interface {
	mustEmbedUnimplementedMemberLevelServiceServer()
}

func RegisterMemberLevelServiceServer(s grpc.ServiceRegistrar, srv MemberLevelServiceServer) {
	s.RegisterService(&MemberLevelService_ServiceDesc, srv)
}

func _MemberLevelService_AddMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).AddMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_AddMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).AddMemberLevel(ctx, req.(*AddMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_DeleteMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).DeleteMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_DeleteMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).DeleteMemberLevel(ctx, req.(*DeleteMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_UpdateMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).UpdateMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_UpdateMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).UpdateMemberLevel(ctx, req.(*UpdateMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_UpdateMemberLevelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberLevelStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).UpdateMemberLevelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_UpdateMemberLevelStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).UpdateMemberLevelStatus(ctx, req.(*UpdateMemberLevelStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_QueryMemberLevelDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLevelDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).QueryMemberLevelDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_QueryMemberLevelDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).QueryMemberLevelDetail(ctx, req.(*QueryMemberLevelDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_QueryMemberLevelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLevelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).QueryMemberLevelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_QueryMemberLevelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).QueryMemberLevelList(ctx, req.(*QueryMemberLevelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberLevelService_ServiceDesc is the grpc.ServiceDesc for MemberLevelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberLevelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberLevelService",
	HandlerType: (*MemberLevelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberLevel",
			Handler:    _MemberLevelService_AddMemberLevel_Handler,
		},
		{
			MethodName: "DeleteMemberLevel",
			Handler:    _MemberLevelService_DeleteMemberLevel_Handler,
		},
		{
			MethodName: "UpdateMemberLevel",
			Handler:    _MemberLevelService_UpdateMemberLevel_Handler,
		},
		{
			MethodName: "UpdateMemberLevelStatus",
			Handler:    _MemberLevelService_UpdateMemberLevelStatus_Handler,
		},
		{
			MethodName: "QueryMemberLevelDetail",
			Handler:    _MemberLevelService_QueryMemberLevelDetail_Handler,
		},
		{
			MethodName: "QueryMemberLevelList",
			Handler:    _MemberLevelService_QueryMemberLevelList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberLoginLogService_DeleteMemberLoginLog_FullMethodName    = "/umsclient.MemberLoginLogService/DeleteMemberLoginLog"
	MemberLoginLogService_QueryMemberLoginLogList_FullMethodName = "/umsclient.MemberLoginLogService/QueryMemberLoginLogList"
)

// MemberLoginLogServiceClient is the client API for MemberLoginLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberLoginLogServiceClient interface {
	// 删除会员登录记录
	DeleteMemberLoginLog(ctx context.Context, in *DeleteMemberLoginLogReq, opts ...grpc.CallOption) (*DeleteMemberLoginLogResp, error)
	// 查询会员登录记录列表
	QueryMemberLoginLogList(ctx context.Context, in *QueryMemberLoginLogListReq, opts ...grpc.CallOption) (*QueryMemberLoginLogListResp, error)
}

type memberLoginLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberLoginLogServiceClient(cc grpc.ClientConnInterface) MemberLoginLogServiceClient {
	return &memberLoginLogServiceClient{cc}
}

func (c *memberLoginLogServiceClient) DeleteMemberLoginLog(ctx context.Context, in *DeleteMemberLoginLogReq, opts ...grpc.CallOption) (*DeleteMemberLoginLogResp, error) {
	out := new(DeleteMemberLoginLogResp)
	err := c.cc.Invoke(ctx, MemberLoginLogService_DeleteMemberLoginLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLoginLogServiceClient) QueryMemberLoginLogList(ctx context.Context, in *QueryMemberLoginLogListReq, opts ...grpc.CallOption) (*QueryMemberLoginLogListResp, error) {
	out := new(QueryMemberLoginLogListResp)
	err := c.cc.Invoke(ctx, MemberLoginLogService_QueryMemberLoginLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberLoginLogServiceServer is the server API for MemberLoginLogService service.
// All implementations must embed UnimplementedMemberLoginLogServiceServer
// for forward compatibility
type MemberLoginLogServiceServer interface {
	// 删除会员登录记录
	DeleteMemberLoginLog(context.Context, *DeleteMemberLoginLogReq) (*DeleteMemberLoginLogResp, error)
	// 查询会员登录记录列表
	QueryMemberLoginLogList(context.Context, *QueryMemberLoginLogListReq) (*QueryMemberLoginLogListResp, error)
	mustEmbedUnimplementedMemberLoginLogServiceServer()
}

// UnimplementedMemberLoginLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberLoginLogServiceServer struct {
}

func (UnimplementedMemberLoginLogServiceServer) DeleteMemberLoginLog(context.Context, *DeleteMemberLoginLogReq) (*DeleteMemberLoginLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLoginLog not implemented")
}
func (UnimplementedMemberLoginLogServiceServer) QueryMemberLoginLogList(context.Context, *QueryMemberLoginLogListReq) (*QueryMemberLoginLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLoginLogList not implemented")
}
func (UnimplementedMemberLoginLogServiceServer) mustEmbedUnimplementedMemberLoginLogServiceServer() {}

// UnsafeMemberLoginLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberLoginLogServiceServer will
// result in compilation errors.
type UnsafeMemberLoginLogServiceServer interface {
	mustEmbedUnimplementedMemberLoginLogServiceServer()
}

func RegisterMemberLoginLogServiceServer(s grpc.ServiceRegistrar, srv MemberLoginLogServiceServer) {
	s.RegisterService(&MemberLoginLogService_ServiceDesc, srv)
}

func _MemberLoginLogService_DeleteMemberLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberLoginLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLoginLogServiceServer).DeleteMemberLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLoginLogService_DeleteMemberLoginLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLoginLogServiceServer).DeleteMemberLoginLog(ctx, req.(*DeleteMemberLoginLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLoginLogService_QueryMemberLoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLoginLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLoginLogServiceServer).QueryMemberLoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLoginLogService_QueryMemberLoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLoginLogServiceServer).QueryMemberLoginLogList(ctx, req.(*QueryMemberLoginLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberLoginLogService_ServiceDesc is the grpc.ServiceDesc for MemberLoginLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberLoginLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberLoginLogService",
	HandlerType: (*MemberLoginLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMemberLoginLog",
			Handler:    _MemberLoginLogService_DeleteMemberLoginLog_Handler,
		},
		{
			MethodName: "QueryMemberLoginLogList",
			Handler:    _MemberLoginLogService_QueryMemberLoginLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberMemberTagRelationService_AddMemberMemberTagRelation_FullMethodName       = "/umsclient.MemberMemberTagRelationService/AddMemberMemberTagRelation"
	MemberMemberTagRelationService_DeleteMemberMemberTagRelation_FullMethodName    = "/umsclient.MemberMemberTagRelationService/DeleteMemberMemberTagRelation"
	MemberMemberTagRelationService_QueryMemberMemberTagRelationList_FullMethodName = "/umsclient.MemberMemberTagRelationService/QueryMemberMemberTagRelationList"
)

// MemberMemberTagRelationServiceClient is the client API for MemberMemberTagRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberMemberTagRelationServiceClient interface {
	// 添加用户和标签关系表
	AddMemberMemberTagRelation(ctx context.Context, in *AddMemberMemberTagRelationReq, opts ...grpc.CallOption) (*AddMemberMemberTagRelationResp, error)
	// 删除用户和标签关系表
	DeleteMemberMemberTagRelation(ctx context.Context, in *DeleteMemberMemberTagRelationReq, opts ...grpc.CallOption) (*DeleteMemberMemberTagRelationResp, error)
	// 查询用户和标签关系表列表
	QueryMemberMemberTagRelationList(ctx context.Context, in *QueryMemberMemberTagRelationListReq, opts ...grpc.CallOption) (*QueryMemberMemberTagRelationListResp, error)
}

type memberMemberTagRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberMemberTagRelationServiceClient(cc grpc.ClientConnInterface) MemberMemberTagRelationServiceClient {
	return &memberMemberTagRelationServiceClient{cc}
}

func (c *memberMemberTagRelationServiceClient) AddMemberMemberTagRelation(ctx context.Context, in *AddMemberMemberTagRelationReq, opts ...grpc.CallOption) (*AddMemberMemberTagRelationResp, error) {
	out := new(AddMemberMemberTagRelationResp)
	err := c.cc.Invoke(ctx, MemberMemberTagRelationService_AddMemberMemberTagRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberMemberTagRelationServiceClient) DeleteMemberMemberTagRelation(ctx context.Context, in *DeleteMemberMemberTagRelationReq, opts ...grpc.CallOption) (*DeleteMemberMemberTagRelationResp, error) {
	out := new(DeleteMemberMemberTagRelationResp)
	err := c.cc.Invoke(ctx, MemberMemberTagRelationService_DeleteMemberMemberTagRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberMemberTagRelationServiceClient) QueryMemberMemberTagRelationList(ctx context.Context, in *QueryMemberMemberTagRelationListReq, opts ...grpc.CallOption) (*QueryMemberMemberTagRelationListResp, error) {
	out := new(QueryMemberMemberTagRelationListResp)
	err := c.cc.Invoke(ctx, MemberMemberTagRelationService_QueryMemberMemberTagRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberMemberTagRelationServiceServer is the server API for MemberMemberTagRelationService service.
// All implementations must embed UnimplementedMemberMemberTagRelationServiceServer
// for forward compatibility
type MemberMemberTagRelationServiceServer interface {
	// 添加用户和标签关系表
	AddMemberMemberTagRelation(context.Context, *AddMemberMemberTagRelationReq) (*AddMemberMemberTagRelationResp, error)
	// 删除用户和标签关系表
	DeleteMemberMemberTagRelation(context.Context, *DeleteMemberMemberTagRelationReq) (*DeleteMemberMemberTagRelationResp, error)
	// 查询用户和标签关系表列表
	QueryMemberMemberTagRelationList(context.Context, *QueryMemberMemberTagRelationListReq) (*QueryMemberMemberTagRelationListResp, error)
	mustEmbedUnimplementedMemberMemberTagRelationServiceServer()
}

// UnimplementedMemberMemberTagRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberMemberTagRelationServiceServer struct {
}

func (UnimplementedMemberMemberTagRelationServiceServer) AddMemberMemberTagRelation(context.Context, *AddMemberMemberTagRelationReq) (*AddMemberMemberTagRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberMemberTagRelation not implemented")
}
func (UnimplementedMemberMemberTagRelationServiceServer) DeleteMemberMemberTagRelation(context.Context, *DeleteMemberMemberTagRelationReq) (*DeleteMemberMemberTagRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberMemberTagRelation not implemented")
}
func (UnimplementedMemberMemberTagRelationServiceServer) QueryMemberMemberTagRelationList(context.Context, *QueryMemberMemberTagRelationListReq) (*QueryMemberMemberTagRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberMemberTagRelationList not implemented")
}
func (UnimplementedMemberMemberTagRelationServiceServer) mustEmbedUnimplementedMemberMemberTagRelationServiceServer() {
}

// UnsafeMemberMemberTagRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberMemberTagRelationServiceServer will
// result in compilation errors.
type UnsafeMemberMemberTagRelationServiceServer interface {
	mustEmbedUnimplementedMemberMemberTagRelationServiceServer()
}

func RegisterMemberMemberTagRelationServiceServer(s grpc.ServiceRegistrar, srv MemberMemberTagRelationServiceServer) {
	s.RegisterService(&MemberMemberTagRelationService_ServiceDesc, srv)
}

func _MemberMemberTagRelationService_AddMemberMemberTagRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberMemberTagRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberMemberTagRelationServiceServer).AddMemberMemberTagRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberMemberTagRelationService_AddMemberMemberTagRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberMemberTagRelationServiceServer).AddMemberMemberTagRelation(ctx, req.(*AddMemberMemberTagRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberMemberTagRelationService_DeleteMemberMemberTagRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberMemberTagRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberMemberTagRelationServiceServer).DeleteMemberMemberTagRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberMemberTagRelationService_DeleteMemberMemberTagRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberMemberTagRelationServiceServer).DeleteMemberMemberTagRelation(ctx, req.(*DeleteMemberMemberTagRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberMemberTagRelationService_QueryMemberMemberTagRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberMemberTagRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberMemberTagRelationServiceServer).QueryMemberMemberTagRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberMemberTagRelationService_QueryMemberMemberTagRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberMemberTagRelationServiceServer).QueryMemberMemberTagRelationList(ctx, req.(*QueryMemberMemberTagRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberMemberTagRelationService_ServiceDesc is the grpc.ServiceDesc for MemberMemberTagRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberMemberTagRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberMemberTagRelationService",
	HandlerType: (*MemberMemberTagRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberMemberTagRelation",
			Handler:    _MemberMemberTagRelationService_AddMemberMemberTagRelation_Handler,
		},
		{
			MethodName: "DeleteMemberMemberTagRelation",
			Handler:    _MemberMemberTagRelationService_DeleteMemberMemberTagRelation_Handler,
		},
		{
			MethodName: "QueryMemberMemberTagRelationList",
			Handler:    _MemberMemberTagRelationService_QueryMemberMemberTagRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberProductCategoryRelationService_AddMemberProductCategoryRelation_FullMethodName       = "/umsclient.MemberProductCategoryRelationService/AddMemberProductCategoryRelation"
	MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_FullMethodName = "/umsclient.MemberProductCategoryRelationService/QueryMemberProductCategoryRelationList"
)

// MemberProductCategoryRelationServiceClient is the client API for MemberProductCategoryRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberProductCategoryRelationServiceClient interface {
	// 添加会员与产品分类关系表（用户喜欢的分类）
	AddMemberProductCategoryRelation(ctx context.Context, in *AddMemberProductCategoryRelationReq, opts ...grpc.CallOption) (*AddMemberProductCategoryRelationResp, error)
	// 查询会员与产品分类关系表（用户喜欢的分类）列表
	QueryMemberProductCategoryRelationList(ctx context.Context, in *QueryMemberProductCategoryRelationListReq, opts ...grpc.CallOption) (*QueryMemberProductCategoryRelationListResp, error)
}

type memberProductCategoryRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberProductCategoryRelationServiceClient(cc grpc.ClientConnInterface) MemberProductCategoryRelationServiceClient {
	return &memberProductCategoryRelationServiceClient{cc}
}

func (c *memberProductCategoryRelationServiceClient) AddMemberProductCategoryRelation(ctx context.Context, in *AddMemberProductCategoryRelationReq, opts ...grpc.CallOption) (*AddMemberProductCategoryRelationResp, error) {
	out := new(AddMemberProductCategoryRelationResp)
	err := c.cc.Invoke(ctx, MemberProductCategoryRelationService_AddMemberProductCategoryRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCategoryRelationServiceClient) QueryMemberProductCategoryRelationList(ctx context.Context, in *QueryMemberProductCategoryRelationListReq, opts ...grpc.CallOption) (*QueryMemberProductCategoryRelationListResp, error) {
	out := new(QueryMemberProductCategoryRelationListResp)
	err := c.cc.Invoke(ctx, MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberProductCategoryRelationServiceServer is the server API for MemberProductCategoryRelationService service.
// All implementations must embed UnimplementedMemberProductCategoryRelationServiceServer
// for forward compatibility
type MemberProductCategoryRelationServiceServer interface {
	// 添加会员与产品分类关系表（用户喜欢的分类）
	AddMemberProductCategoryRelation(context.Context, *AddMemberProductCategoryRelationReq) (*AddMemberProductCategoryRelationResp, error)
	// 查询会员与产品分类关系表（用户喜欢的分类）列表
	QueryMemberProductCategoryRelationList(context.Context, *QueryMemberProductCategoryRelationListReq) (*QueryMemberProductCategoryRelationListResp, error)
	mustEmbedUnimplementedMemberProductCategoryRelationServiceServer()
}

// UnimplementedMemberProductCategoryRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberProductCategoryRelationServiceServer struct {
}

func (UnimplementedMemberProductCategoryRelationServiceServer) AddMemberProductCategoryRelation(context.Context, *AddMemberProductCategoryRelationReq) (*AddMemberProductCategoryRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberProductCategoryRelation not implemented")
}
func (UnimplementedMemberProductCategoryRelationServiceServer) QueryMemberProductCategoryRelationList(context.Context, *QueryMemberProductCategoryRelationListReq) (*QueryMemberProductCategoryRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberProductCategoryRelationList not implemented")
}
func (UnimplementedMemberProductCategoryRelationServiceServer) mustEmbedUnimplementedMemberProductCategoryRelationServiceServer() {
}

// UnsafeMemberProductCategoryRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberProductCategoryRelationServiceServer will
// result in compilation errors.
type UnsafeMemberProductCategoryRelationServiceServer interface {
	mustEmbedUnimplementedMemberProductCategoryRelationServiceServer()
}

func RegisterMemberProductCategoryRelationServiceServer(s grpc.ServiceRegistrar, srv MemberProductCategoryRelationServiceServer) {
	s.RegisterService(&MemberProductCategoryRelationService_ServiceDesc, srv)
}

func _MemberProductCategoryRelationService_AddMemberProductCategoryRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberProductCategoryRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCategoryRelationServiceServer).AddMemberProductCategoryRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCategoryRelationService_AddMemberProductCategoryRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCategoryRelationServiceServer).AddMemberProductCategoryRelation(ctx, req.(*AddMemberProductCategoryRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberProductCategoryRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCategoryRelationServiceServer).QueryMemberProductCategoryRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCategoryRelationServiceServer).QueryMemberProductCategoryRelationList(ctx, req.(*QueryMemberProductCategoryRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberProductCategoryRelationService_ServiceDesc is the grpc.ServiceDesc for MemberProductCategoryRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberProductCategoryRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberProductCategoryRelationService",
	HandlerType: (*MemberProductCategoryRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberProductCategoryRelation",
			Handler:    _MemberProductCategoryRelationService_AddMemberProductCategoryRelation_Handler,
		},
		{
			MethodName: "QueryMemberProductCategoryRelationList",
			Handler:    _MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberProductCollectionService_AddMemberProductCollection_FullMethodName         = "/umsclient.MemberProductCollectionService/AddMemberProductCollection"
	MemberProductCollectionService_DeleteMemberProductCollection_FullMethodName      = "/umsclient.MemberProductCollectionService/DeleteMemberProductCollection"
	MemberProductCollectionService_QueryMemberProductCollectionDetail_FullMethodName = "/umsclient.MemberProductCollectionService/QueryMemberProductCollectionDetail"
	MemberProductCollectionService_QueryMemberProductCollectionList_FullMethodName   = "/umsclient.MemberProductCollectionService/QueryMemberProductCollectionList"
)

// MemberProductCollectionServiceClient is the client API for MemberProductCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberProductCollectionServiceClient interface {
	// 添加用户收藏的商品
	AddMemberProductCollection(ctx context.Context, in *AddMemberProductCollectionReq, opts ...grpc.CallOption) (*AddMemberProductCollectionResp, error)
	// 删除商品收藏/清空当前用户商品收藏列表
	DeleteMemberProductCollection(ctx context.Context, in *DeleteMemberProductCollectionReq, opts ...grpc.CallOption) (*DeleteMemberProductCollectionResp, error)
	// 查询用户收藏的商品详情
	QueryMemberProductCollectionDetail(ctx context.Context, in *QueryMemberProductCollectionDetailReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionDetailResp, error)
	// 查询用户收藏的商品列表
	QueryMemberProductCollectionList(ctx context.Context, in *QueryMemberProductCollectionListReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionListResp, error)
}

type memberProductCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberProductCollectionServiceClient(cc grpc.ClientConnInterface) MemberProductCollectionServiceClient {
	return &memberProductCollectionServiceClient{cc}
}

func (c *memberProductCollectionServiceClient) AddMemberProductCollection(ctx context.Context, in *AddMemberProductCollectionReq, opts ...grpc.CallOption) (*AddMemberProductCollectionResp, error) {
	out := new(AddMemberProductCollectionResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_AddMemberProductCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCollectionServiceClient) DeleteMemberProductCollection(ctx context.Context, in *DeleteMemberProductCollectionReq, opts ...grpc.CallOption) (*DeleteMemberProductCollectionResp, error) {
	out := new(DeleteMemberProductCollectionResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_DeleteMemberProductCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCollectionServiceClient) QueryMemberProductCollectionDetail(ctx context.Context, in *QueryMemberProductCollectionDetailReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionDetailResp, error) {
	out := new(QueryMemberProductCollectionDetailResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_QueryMemberProductCollectionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCollectionServiceClient) QueryMemberProductCollectionList(ctx context.Context, in *QueryMemberProductCollectionListReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionListResp, error) {
	out := new(QueryMemberProductCollectionListResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_QueryMemberProductCollectionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberProductCollectionServiceServer is the server API for MemberProductCollectionService service.
// All implementations must embed UnimplementedMemberProductCollectionServiceServer
// for forward compatibility
type MemberProductCollectionServiceServer interface {
	// 添加用户收藏的商品
	AddMemberProductCollection(context.Context, *AddMemberProductCollectionReq) (*AddMemberProductCollectionResp, error)
	// 删除商品收藏/清空当前用户商品收藏列表
	DeleteMemberProductCollection(context.Context, *DeleteMemberProductCollectionReq) (*DeleteMemberProductCollectionResp, error)
	// 查询用户收藏的商品详情
	QueryMemberProductCollectionDetail(context.Context, *QueryMemberProductCollectionDetailReq) (*QueryMemberProductCollectionDetailResp, error)
	// 查询用户收藏的商品列表
	QueryMemberProductCollectionList(context.Context, *QueryMemberProductCollectionListReq) (*QueryMemberProductCollectionListResp, error)
	mustEmbedUnimplementedMemberProductCollectionServiceServer()
}

// UnimplementedMemberProductCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberProductCollectionServiceServer struct {
}

func (UnimplementedMemberProductCollectionServiceServer) AddMemberProductCollection(context.Context, *AddMemberProductCollectionReq) (*AddMemberProductCollectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberProductCollection not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) DeleteMemberProductCollection(context.Context, *DeleteMemberProductCollectionReq) (*DeleteMemberProductCollectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberProductCollection not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) QueryMemberProductCollectionDetail(context.Context, *QueryMemberProductCollectionDetailReq) (*QueryMemberProductCollectionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberProductCollectionDetail not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) QueryMemberProductCollectionList(context.Context, *QueryMemberProductCollectionListReq) (*QueryMemberProductCollectionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberProductCollectionList not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) mustEmbedUnimplementedMemberProductCollectionServiceServer() {
}

// UnsafeMemberProductCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberProductCollectionServiceServer will
// result in compilation errors.
type UnsafeMemberProductCollectionServiceServer interface {
	mustEmbedUnimplementedMemberProductCollectionServiceServer()
}

func RegisterMemberProductCollectionServiceServer(s grpc.ServiceRegistrar, srv MemberProductCollectionServiceServer) {
	s.RegisterService(&MemberProductCollectionService_ServiceDesc, srv)
}

func _MemberProductCollectionService_AddMemberProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).AddMemberProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_AddMemberProductCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).AddMemberProductCollection(ctx, req.(*AddMemberProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCollectionService_DeleteMemberProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).DeleteMemberProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_DeleteMemberProductCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).DeleteMemberProductCollection(ctx, req.(*DeleteMemberProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCollectionService_QueryMemberProductCollectionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberProductCollectionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_QueryMemberProductCollectionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionDetail(ctx, req.(*QueryMemberProductCollectionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCollectionService_QueryMemberProductCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberProductCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_QueryMemberProductCollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionList(ctx, req.(*QueryMemberProductCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberProductCollectionService_ServiceDesc is the grpc.ServiceDesc for MemberProductCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberProductCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberProductCollectionService",
	HandlerType: (*MemberProductCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberProductCollection",
			Handler:    _MemberProductCollectionService_AddMemberProductCollection_Handler,
		},
		{
			MethodName: "DeleteMemberProductCollection",
			Handler:    _MemberProductCollectionService_DeleteMemberProductCollection_Handler,
		},
		{
			MethodName: "QueryMemberProductCollectionDetail",
			Handler:    _MemberProductCollectionService_QueryMemberProductCollectionDetail_Handler,
		},
		{
			MethodName: "QueryMemberProductCollectionList",
			Handler:    _MemberProductCollectionService_QueryMemberProductCollectionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberReadHistoryService_AddMemberReadHistory_FullMethodName         = "/umsclient.MemberReadHistoryService/AddMemberReadHistory"
	MemberReadHistoryService_DeleteMemberReadHistory_FullMethodName      = "/umsclient.MemberReadHistoryService/DeleteMemberReadHistory"
	MemberReadHistoryService_QueryMemberReadHistoryDetail_FullMethodName = "/umsclient.MemberReadHistoryService/QueryMemberReadHistoryDetail"
	MemberReadHistoryService_QueryMemberReadHistoryList_FullMethodName   = "/umsclient.MemberReadHistoryService/QueryMemberReadHistoryList"
)

// MemberReadHistoryServiceClient is the client API for MemberReadHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberReadHistoryServiceClient interface {
	// 添加用户商品浏览历史记录
	AddMemberReadHistory(ctx context.Context, in *AddMemberReadHistoryReq, opts ...grpc.CallOption) (*AddMemberReadHistoryResp, error)
	// 清空浏览记录/删除浏览记录
	DeleteMemberReadHistory(ctx context.Context, in *DeleteMemberReadHistoryReq, opts ...grpc.CallOption) (*DeleteMemberReadHistoryResp, error)
	// 查询用户商品浏览历史记录详情
	QueryMemberReadHistoryDetail(ctx context.Context, in *QueryMemberReadHistoryDetailReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryDetailResp, error)
	// 查询用户商品浏览历史记录列表
	QueryMemberReadHistoryList(ctx context.Context, in *QueryMemberReadHistoryListReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryListResp, error)
}

type memberReadHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberReadHistoryServiceClient(cc grpc.ClientConnInterface) MemberReadHistoryServiceClient {
	return &memberReadHistoryServiceClient{cc}
}

func (c *memberReadHistoryServiceClient) AddMemberReadHistory(ctx context.Context, in *AddMemberReadHistoryReq, opts ...grpc.CallOption) (*AddMemberReadHistoryResp, error) {
	out := new(AddMemberReadHistoryResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_AddMemberReadHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReadHistoryServiceClient) DeleteMemberReadHistory(ctx context.Context, in *DeleteMemberReadHistoryReq, opts ...grpc.CallOption) (*DeleteMemberReadHistoryResp, error) {
	out := new(DeleteMemberReadHistoryResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_DeleteMemberReadHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReadHistoryServiceClient) QueryMemberReadHistoryDetail(ctx context.Context, in *QueryMemberReadHistoryDetailReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryDetailResp, error) {
	out := new(QueryMemberReadHistoryDetailResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_QueryMemberReadHistoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReadHistoryServiceClient) QueryMemberReadHistoryList(ctx context.Context, in *QueryMemberReadHistoryListReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryListResp, error) {
	out := new(QueryMemberReadHistoryListResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_QueryMemberReadHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberReadHistoryServiceServer is the server API for MemberReadHistoryService service.
// All implementations must embed UnimplementedMemberReadHistoryServiceServer
// for forward compatibility
type MemberReadHistoryServiceServer interface {
	// 添加用户商品浏览历史记录
	AddMemberReadHistory(context.Context, *AddMemberReadHistoryReq) (*AddMemberReadHistoryResp, error)
	// 清空浏览记录/删除浏览记录
	DeleteMemberReadHistory(context.Context, *DeleteMemberReadHistoryReq) (*DeleteMemberReadHistoryResp, error)
	// 查询用户商品浏览历史记录详情
	QueryMemberReadHistoryDetail(context.Context, *QueryMemberReadHistoryDetailReq) (*QueryMemberReadHistoryDetailResp, error)
	// 查询用户商品浏览历史记录列表
	QueryMemberReadHistoryList(context.Context, *QueryMemberReadHistoryListReq) (*QueryMemberReadHistoryListResp, error)
	mustEmbedUnimplementedMemberReadHistoryServiceServer()
}

// UnimplementedMemberReadHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberReadHistoryServiceServer struct {
}

func (UnimplementedMemberReadHistoryServiceServer) AddMemberReadHistory(context.Context, *AddMemberReadHistoryReq) (*AddMemberReadHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberReadHistory not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) DeleteMemberReadHistory(context.Context, *DeleteMemberReadHistoryReq) (*DeleteMemberReadHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberReadHistory not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) QueryMemberReadHistoryDetail(context.Context, *QueryMemberReadHistoryDetailReq) (*QueryMemberReadHistoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberReadHistoryDetail not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) QueryMemberReadHistoryList(context.Context, *QueryMemberReadHistoryListReq) (*QueryMemberReadHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberReadHistoryList not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) mustEmbedUnimplementedMemberReadHistoryServiceServer() {
}

// UnsafeMemberReadHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberReadHistoryServiceServer will
// result in compilation errors.
type UnsafeMemberReadHistoryServiceServer interface {
	mustEmbedUnimplementedMemberReadHistoryServiceServer()
}

func RegisterMemberReadHistoryServiceServer(s grpc.ServiceRegistrar, srv MemberReadHistoryServiceServer) {
	s.RegisterService(&MemberReadHistoryService_ServiceDesc, srv)
}

func _MemberReadHistoryService_AddMemberReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReadHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).AddMemberReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_AddMemberReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).AddMemberReadHistory(ctx, req.(*AddMemberReadHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReadHistoryService_DeleteMemberReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReadHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).DeleteMemberReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_DeleteMemberReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).DeleteMemberReadHistory(ctx, req.(*DeleteMemberReadHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReadHistoryService_QueryMemberReadHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberReadHistoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_QueryMemberReadHistoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryDetail(ctx, req.(*QueryMemberReadHistoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReadHistoryService_QueryMemberReadHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberReadHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_QueryMemberReadHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryList(ctx, req.(*QueryMemberReadHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberReadHistoryService_ServiceDesc is the grpc.ServiceDesc for MemberReadHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberReadHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberReadHistoryService",
	HandlerType: (*MemberReadHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberReadHistory",
			Handler:    _MemberReadHistoryService_AddMemberReadHistory_Handler,
		},
		{
			MethodName: "DeleteMemberReadHistory",
			Handler:    _MemberReadHistoryService_DeleteMemberReadHistory_Handler,
		},
		{
			MethodName: "QueryMemberReadHistoryDetail",
			Handler:    _MemberReadHistoryService_QueryMemberReadHistoryDetail_Handler,
		},
		{
			MethodName: "QueryMemberReadHistoryList",
			Handler:    _MemberReadHistoryService_QueryMemberReadHistoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberReceiveAddressService_AddMemberReceiveAddress_FullMethodName          = "/umsclient.MemberReceiveAddressService/AddMemberReceiveAddress"
	MemberReceiveAddressService_DeleteMemberReceiveAddress_FullMethodName       = "/umsclient.MemberReceiveAddressService/DeleteMemberReceiveAddress"
	MemberReceiveAddressService_UpdateMemberReceiveAddress_FullMethodName       = "/umsclient.MemberReceiveAddressService/UpdateMemberReceiveAddress"
	MemberReceiveAddressService_UpdateMemberReceiveAddressStatus_FullMethodName = "/umsclient.MemberReceiveAddressService/UpdateMemberReceiveAddressStatus"
	MemberReceiveAddressService_QueryMemberReceiveAddressDetail_FullMethodName  = "/umsclient.MemberReceiveAddressService/QueryMemberReceiveAddressDetail"
	MemberReceiveAddressService_QueryMemberReceiveAddressList_FullMethodName    = "/umsclient.MemberReceiveAddressService/QueryMemberReceiveAddressList"
)

// MemberReceiveAddressServiceClient is the client API for MemberReceiveAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberReceiveAddressServiceClient interface {
	// 添加会员收货地址表
	AddMemberReceiveAddress(ctx context.Context, in *AddMemberReceiveAddressReq, opts ...grpc.CallOption) (*AddMemberReceiveAddressResp, error)
	// 删除会员收货地址表
	DeleteMemberReceiveAddress(ctx context.Context, in *DeleteMemberReceiveAddressReq, opts ...grpc.CallOption) (*DeleteMemberReceiveAddressResp, error)
	// 更新会员收货地址表
	UpdateMemberReceiveAddress(ctx context.Context, in *UpdateMemberReceiveAddressReq, opts ...grpc.CallOption) (*UpdateMemberReceiveAddressResp, error)
	// 更新会员收货地址表状态
	UpdateMemberReceiveAddressStatus(ctx context.Context, in *UpdateMemberReceiveAddressStatusReq, opts ...grpc.CallOption) (*UpdateMemberReceiveAddressStatusResp, error)
	// 查询会员收货地址表详情
	QueryMemberReceiveAddressDetail(ctx context.Context, in *QueryMemberReceiveAddressDetailReq, opts ...grpc.CallOption) (*QueryMemberReceiveAddressDetailResp, error)
	// 查询会员收货地址表列表
	QueryMemberReceiveAddressList(ctx context.Context, in *QueryMemberReceiveAddressListReq, opts ...grpc.CallOption) (*QueryMemberReceiveAddressListResp, error)
}

type memberReceiveAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberReceiveAddressServiceClient(cc grpc.ClientConnInterface) MemberReceiveAddressServiceClient {
	return &memberReceiveAddressServiceClient{cc}
}

func (c *memberReceiveAddressServiceClient) AddMemberReceiveAddress(ctx context.Context, in *AddMemberReceiveAddressReq, opts ...grpc.CallOption) (*AddMemberReceiveAddressResp, error) {
	out := new(AddMemberReceiveAddressResp)
	err := c.cc.Invoke(ctx, MemberReceiveAddressService_AddMemberReceiveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReceiveAddressServiceClient) DeleteMemberReceiveAddress(ctx context.Context, in *DeleteMemberReceiveAddressReq, opts ...grpc.CallOption) (*DeleteMemberReceiveAddressResp, error) {
	out := new(DeleteMemberReceiveAddressResp)
	err := c.cc.Invoke(ctx, MemberReceiveAddressService_DeleteMemberReceiveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReceiveAddressServiceClient) UpdateMemberReceiveAddress(ctx context.Context, in *UpdateMemberReceiveAddressReq, opts ...grpc.CallOption) (*UpdateMemberReceiveAddressResp, error) {
	out := new(UpdateMemberReceiveAddressResp)
	err := c.cc.Invoke(ctx, MemberReceiveAddressService_UpdateMemberReceiveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReceiveAddressServiceClient) UpdateMemberReceiveAddressStatus(ctx context.Context, in *UpdateMemberReceiveAddressStatusReq, opts ...grpc.CallOption) (*UpdateMemberReceiveAddressStatusResp, error) {
	out := new(UpdateMemberReceiveAddressStatusResp)
	err := c.cc.Invoke(ctx, MemberReceiveAddressService_UpdateMemberReceiveAddressStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReceiveAddressServiceClient) QueryMemberReceiveAddressDetail(ctx context.Context, in *QueryMemberReceiveAddressDetailReq, opts ...grpc.CallOption) (*QueryMemberReceiveAddressDetailResp, error) {
	out := new(QueryMemberReceiveAddressDetailResp)
	err := c.cc.Invoke(ctx, MemberReceiveAddressService_QueryMemberReceiveAddressDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReceiveAddressServiceClient) QueryMemberReceiveAddressList(ctx context.Context, in *QueryMemberReceiveAddressListReq, opts ...grpc.CallOption) (*QueryMemberReceiveAddressListResp, error) {
	out := new(QueryMemberReceiveAddressListResp)
	err := c.cc.Invoke(ctx, MemberReceiveAddressService_QueryMemberReceiveAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberReceiveAddressServiceServer is the server API for MemberReceiveAddressService service.
// All implementations must embed UnimplementedMemberReceiveAddressServiceServer
// for forward compatibility
type MemberReceiveAddressServiceServer interface {
	// 添加会员收货地址表
	AddMemberReceiveAddress(context.Context, *AddMemberReceiveAddressReq) (*AddMemberReceiveAddressResp, error)
	// 删除会员收货地址表
	DeleteMemberReceiveAddress(context.Context, *DeleteMemberReceiveAddressReq) (*DeleteMemberReceiveAddressResp, error)
	// 更新会员收货地址表
	UpdateMemberReceiveAddress(context.Context, *UpdateMemberReceiveAddressReq) (*UpdateMemberReceiveAddressResp, error)
	// 更新会员收货地址表状态
	UpdateMemberReceiveAddressStatus(context.Context, *UpdateMemberReceiveAddressStatusReq) (*UpdateMemberReceiveAddressStatusResp, error)
	// 查询会员收货地址表详情
	QueryMemberReceiveAddressDetail(context.Context, *QueryMemberReceiveAddressDetailReq) (*QueryMemberReceiveAddressDetailResp, error)
	// 查询会员收货地址表列表
	QueryMemberReceiveAddressList(context.Context, *QueryMemberReceiveAddressListReq) (*QueryMemberReceiveAddressListResp, error)
	mustEmbedUnimplementedMemberReceiveAddressServiceServer()
}

// UnimplementedMemberReceiveAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberReceiveAddressServiceServer struct {
}

func (UnimplementedMemberReceiveAddressServiceServer) AddMemberReceiveAddress(context.Context, *AddMemberReceiveAddressReq) (*AddMemberReceiveAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberReceiveAddress not implemented")
}
func (UnimplementedMemberReceiveAddressServiceServer) DeleteMemberReceiveAddress(context.Context, *DeleteMemberReceiveAddressReq) (*DeleteMemberReceiveAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberReceiveAddress not implemented")
}
func (UnimplementedMemberReceiveAddressServiceServer) UpdateMemberReceiveAddress(context.Context, *UpdateMemberReceiveAddressReq) (*UpdateMemberReceiveAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberReceiveAddress not implemented")
}
func (UnimplementedMemberReceiveAddressServiceServer) UpdateMemberReceiveAddressStatus(context.Context, *UpdateMemberReceiveAddressStatusReq) (*UpdateMemberReceiveAddressStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberReceiveAddressStatus not implemented")
}
func (UnimplementedMemberReceiveAddressServiceServer) QueryMemberReceiveAddressDetail(context.Context, *QueryMemberReceiveAddressDetailReq) (*QueryMemberReceiveAddressDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberReceiveAddressDetail not implemented")
}
func (UnimplementedMemberReceiveAddressServiceServer) QueryMemberReceiveAddressList(context.Context, *QueryMemberReceiveAddressListReq) (*QueryMemberReceiveAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberReceiveAddressList not implemented")
}
func (UnimplementedMemberReceiveAddressServiceServer) mustEmbedUnimplementedMemberReceiveAddressServiceServer() {
}

// UnsafeMemberReceiveAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberReceiveAddressServiceServer will
// result in compilation errors.
type UnsafeMemberReceiveAddressServiceServer interface {
	mustEmbedUnimplementedMemberReceiveAddressServiceServer()
}

func RegisterMemberReceiveAddressServiceServer(s grpc.ServiceRegistrar, srv MemberReceiveAddressServiceServer) {
	s.RegisterService(&MemberReceiveAddressService_ServiceDesc, srv)
}

func _MemberReceiveAddressService_AddMemberReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReceiveAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReceiveAddressServiceServer).AddMemberReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReceiveAddressService_AddMemberReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReceiveAddressServiceServer).AddMemberReceiveAddress(ctx, req.(*AddMemberReceiveAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReceiveAddressService_DeleteMemberReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReceiveAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReceiveAddressServiceServer).DeleteMemberReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReceiveAddressService_DeleteMemberReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReceiveAddressServiceServer).DeleteMemberReceiveAddress(ctx, req.(*DeleteMemberReceiveAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReceiveAddressService_UpdateMemberReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReceiveAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReceiveAddressServiceServer).UpdateMemberReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReceiveAddressService_UpdateMemberReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReceiveAddressServiceServer).UpdateMemberReceiveAddress(ctx, req.(*UpdateMemberReceiveAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReceiveAddressService_UpdateMemberReceiveAddressStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReceiveAddressStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReceiveAddressServiceServer).UpdateMemberReceiveAddressStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReceiveAddressService_UpdateMemberReceiveAddressStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReceiveAddressServiceServer).UpdateMemberReceiveAddressStatus(ctx, req.(*UpdateMemberReceiveAddressStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReceiveAddressService_QueryMemberReceiveAddressDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberReceiveAddressDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReceiveAddressServiceServer).QueryMemberReceiveAddressDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReceiveAddressService_QueryMemberReceiveAddressDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReceiveAddressServiceServer).QueryMemberReceiveAddressDetail(ctx, req.(*QueryMemberReceiveAddressDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReceiveAddressService_QueryMemberReceiveAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberReceiveAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReceiveAddressServiceServer).QueryMemberReceiveAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReceiveAddressService_QueryMemberReceiveAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReceiveAddressServiceServer).QueryMemberReceiveAddressList(ctx, req.(*QueryMemberReceiveAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberReceiveAddressService_ServiceDesc is the grpc.ServiceDesc for MemberReceiveAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberReceiveAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberReceiveAddressService",
	HandlerType: (*MemberReceiveAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberReceiveAddress",
			Handler:    _MemberReceiveAddressService_AddMemberReceiveAddress_Handler,
		},
		{
			MethodName: "DeleteMemberReceiveAddress",
			Handler:    _MemberReceiveAddressService_DeleteMemberReceiveAddress_Handler,
		},
		{
			MethodName: "UpdateMemberReceiveAddress",
			Handler:    _MemberReceiveAddressService_UpdateMemberReceiveAddress_Handler,
		},
		{
			MethodName: "UpdateMemberReceiveAddressStatus",
			Handler:    _MemberReceiveAddressService_UpdateMemberReceiveAddressStatus_Handler,
		},
		{
			MethodName: "QueryMemberReceiveAddressDetail",
			Handler:    _MemberReceiveAddressService_QueryMemberReceiveAddressDetail_Handler,
		},
		{
			MethodName: "QueryMemberReceiveAddressList",
			Handler:    _MemberReceiveAddressService_QueryMemberReceiveAddressList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberRuleSettingService_AddMemberRuleSetting_FullMethodName          = "/umsclient.MemberRuleSettingService/AddMemberRuleSetting"
	MemberRuleSettingService_DeleteMemberRuleSetting_FullMethodName       = "/umsclient.MemberRuleSettingService/DeleteMemberRuleSetting"
	MemberRuleSettingService_UpdateMemberRuleSetting_FullMethodName       = "/umsclient.MemberRuleSettingService/UpdateMemberRuleSetting"
	MemberRuleSettingService_UpdateMemberRuleSettingStatus_FullMethodName = "/umsclient.MemberRuleSettingService/UpdateMemberRuleSettingStatus"
	MemberRuleSettingService_QueryMemberRuleSettingDetail_FullMethodName  = "/umsclient.MemberRuleSettingService/QueryMemberRuleSettingDetail"
	MemberRuleSettingService_QueryMemberRuleSettingList_FullMethodName    = "/umsclient.MemberRuleSettingService/QueryMemberRuleSettingList"
)

// MemberRuleSettingServiceClient is the client API for MemberRuleSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberRuleSettingServiceClient interface {
	// 添加会员积分成长规则表
	AddMemberRuleSetting(ctx context.Context, in *AddMemberRuleSettingReq, opts ...grpc.CallOption) (*AddMemberRuleSettingResp, error)
	// 删除会员积分成长规则表
	DeleteMemberRuleSetting(ctx context.Context, in *DeleteMemberRuleSettingReq, opts ...grpc.CallOption) (*DeleteMemberRuleSettingResp, error)
	// 更新会员积分成长规则表
	UpdateMemberRuleSetting(ctx context.Context, in *UpdateMemberRuleSettingReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingResp, error)
	// 更新会员积分成长规则表状态
	UpdateMemberRuleSettingStatus(ctx context.Context, in *UpdateMemberRuleSettingStatusReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingStatusResp, error)
	// 查询会员积分成长规则表详情
	QueryMemberRuleSettingDetail(ctx context.Context, in *QueryMemberRuleSettingDetailReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingDetailResp, error)
	// 查询会员积分成长规则表列表
	QueryMemberRuleSettingList(ctx context.Context, in *QueryMemberRuleSettingListReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingListResp, error)
}

type memberRuleSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberRuleSettingServiceClient(cc grpc.ClientConnInterface) MemberRuleSettingServiceClient {
	return &memberRuleSettingServiceClient{cc}
}

func (c *memberRuleSettingServiceClient) AddMemberRuleSetting(ctx context.Context, in *AddMemberRuleSettingReq, opts ...grpc.CallOption) (*AddMemberRuleSettingResp, error) {
	out := new(AddMemberRuleSettingResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_AddMemberRuleSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) DeleteMemberRuleSetting(ctx context.Context, in *DeleteMemberRuleSettingReq, opts ...grpc.CallOption) (*DeleteMemberRuleSettingResp, error) {
	out := new(DeleteMemberRuleSettingResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_DeleteMemberRuleSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) UpdateMemberRuleSetting(ctx context.Context, in *UpdateMemberRuleSettingReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingResp, error) {
	out := new(UpdateMemberRuleSettingResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_UpdateMemberRuleSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) UpdateMemberRuleSettingStatus(ctx context.Context, in *UpdateMemberRuleSettingStatusReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingStatusResp, error) {
	out := new(UpdateMemberRuleSettingStatusResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_UpdateMemberRuleSettingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) QueryMemberRuleSettingDetail(ctx context.Context, in *QueryMemberRuleSettingDetailReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingDetailResp, error) {
	out := new(QueryMemberRuleSettingDetailResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_QueryMemberRuleSettingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) QueryMemberRuleSettingList(ctx context.Context, in *QueryMemberRuleSettingListReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingListResp, error) {
	out := new(QueryMemberRuleSettingListResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_QueryMemberRuleSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberRuleSettingServiceServer is the server API for MemberRuleSettingService service.
// All implementations must embed UnimplementedMemberRuleSettingServiceServer
// for forward compatibility
type MemberRuleSettingServiceServer interface {
	// 添加会员积分成长规则表
	AddMemberRuleSetting(context.Context, *AddMemberRuleSettingReq) (*AddMemberRuleSettingResp, error)
	// 删除会员积分成长规则表
	DeleteMemberRuleSetting(context.Context, *DeleteMemberRuleSettingReq) (*DeleteMemberRuleSettingResp, error)
	// 更新会员积分成长规则表
	UpdateMemberRuleSetting(context.Context, *UpdateMemberRuleSettingReq) (*UpdateMemberRuleSettingResp, error)
	// 更新会员积分成长规则表状态
	UpdateMemberRuleSettingStatus(context.Context, *UpdateMemberRuleSettingStatusReq) (*UpdateMemberRuleSettingStatusResp, error)
	// 查询会员积分成长规则表详情
	QueryMemberRuleSettingDetail(context.Context, *QueryMemberRuleSettingDetailReq) (*QueryMemberRuleSettingDetailResp, error)
	// 查询会员积分成长规则表列表
	QueryMemberRuleSettingList(context.Context, *QueryMemberRuleSettingListReq) (*QueryMemberRuleSettingListResp, error)
	mustEmbedUnimplementedMemberRuleSettingServiceServer()
}

// UnimplementedMemberRuleSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberRuleSettingServiceServer struct {
}

func (UnimplementedMemberRuleSettingServiceServer) AddMemberRuleSetting(context.Context, *AddMemberRuleSettingReq) (*AddMemberRuleSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberRuleSetting not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) DeleteMemberRuleSetting(context.Context, *DeleteMemberRuleSettingReq) (*DeleteMemberRuleSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberRuleSetting not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) UpdateMemberRuleSetting(context.Context, *UpdateMemberRuleSettingReq) (*UpdateMemberRuleSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRuleSetting not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) UpdateMemberRuleSettingStatus(context.Context, *UpdateMemberRuleSettingStatusReq) (*UpdateMemberRuleSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRuleSettingStatus not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) QueryMemberRuleSettingDetail(context.Context, *QueryMemberRuleSettingDetailReq) (*QueryMemberRuleSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberRuleSettingDetail not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) QueryMemberRuleSettingList(context.Context, *QueryMemberRuleSettingListReq) (*QueryMemberRuleSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberRuleSettingList not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) mustEmbedUnimplementedMemberRuleSettingServiceServer() {
}

// UnsafeMemberRuleSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberRuleSettingServiceServer will
// result in compilation errors.
type UnsafeMemberRuleSettingServiceServer interface {
	mustEmbedUnimplementedMemberRuleSettingServiceServer()
}

func RegisterMemberRuleSettingServiceServer(s grpc.ServiceRegistrar, srv MemberRuleSettingServiceServer) {
	s.RegisterService(&MemberRuleSettingService_ServiceDesc, srv)
}

func _MemberRuleSettingService_AddMemberRuleSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRuleSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).AddMemberRuleSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_AddMemberRuleSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).AddMemberRuleSetting(ctx, req.(*AddMemberRuleSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_DeleteMemberRuleSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRuleSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).DeleteMemberRuleSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_DeleteMemberRuleSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).DeleteMemberRuleSetting(ctx, req.(*DeleteMemberRuleSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_UpdateMemberRuleSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRuleSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_UpdateMemberRuleSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSetting(ctx, req.(*UpdateMemberRuleSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_UpdateMemberRuleSettingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRuleSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSettingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_UpdateMemberRuleSettingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSettingStatus(ctx, req.(*UpdateMemberRuleSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_QueryMemberRuleSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberRuleSettingDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_QueryMemberRuleSettingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingDetail(ctx, req.(*QueryMemberRuleSettingDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_QueryMemberRuleSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberRuleSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_QueryMemberRuleSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingList(ctx, req.(*QueryMemberRuleSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberRuleSettingService_ServiceDesc is the grpc.ServiceDesc for MemberRuleSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberRuleSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberRuleSettingService",
	HandlerType: (*MemberRuleSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberRuleSetting",
			Handler:    _MemberRuleSettingService_AddMemberRuleSetting_Handler,
		},
		{
			MethodName: "DeleteMemberRuleSetting",
			Handler:    _MemberRuleSettingService_DeleteMemberRuleSetting_Handler,
		},
		{
			MethodName: "UpdateMemberRuleSetting",
			Handler:    _MemberRuleSettingService_UpdateMemberRuleSetting_Handler,
		},
		{
			MethodName: "UpdateMemberRuleSettingStatus",
			Handler:    _MemberRuleSettingService_UpdateMemberRuleSettingStatus_Handler,
		},
		{
			MethodName: "QueryMemberRuleSettingDetail",
			Handler:    _MemberRuleSettingService_QueryMemberRuleSettingDetail_Handler,
		},
		{
			MethodName: "QueryMemberRuleSettingList",
			Handler:    _MemberRuleSettingService_QueryMemberRuleSettingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberStatisticsInfoService_AddMemberStatisticsInfo_FullMethodName         = "/umsclient.MemberStatisticsInfoService/AddMemberStatisticsInfo"
	MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_FullMethodName = "/umsclient.MemberStatisticsInfoService/QueryMemberStatisticsInfoDetail"
	MemberStatisticsInfoService_QueryMemberStatisticsInfoList_FullMethodName   = "/umsclient.MemberStatisticsInfoService/QueryMemberStatisticsInfoList"
)

// MemberStatisticsInfoServiceClient is the client API for MemberStatisticsInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberStatisticsInfoServiceClient interface {
	// 添加会员统计信息
	AddMemberStatisticsInfo(ctx context.Context, in *AddMemberStatisticsInfoReq, opts ...grpc.CallOption) (*AddMemberStatisticsInfoResp, error)
	// 查询会员统计信息详情
	QueryMemberStatisticsInfoDetail(ctx context.Context, in *QueryMemberStatisticsInfoDetailReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoDetailResp, error)
	// 查询会员统计信息列表
	QueryMemberStatisticsInfoList(ctx context.Context, in *QueryMemberStatisticsInfoListReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoListResp, error)
}

type memberStatisticsInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberStatisticsInfoServiceClient(cc grpc.ClientConnInterface) MemberStatisticsInfoServiceClient {
	return &memberStatisticsInfoServiceClient{cc}
}

func (c *memberStatisticsInfoServiceClient) AddMemberStatisticsInfo(ctx context.Context, in *AddMemberStatisticsInfoReq, opts ...grpc.CallOption) (*AddMemberStatisticsInfoResp, error) {
	out := new(AddMemberStatisticsInfoResp)
	err := c.cc.Invoke(ctx, MemberStatisticsInfoService_AddMemberStatisticsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberStatisticsInfoServiceClient) QueryMemberStatisticsInfoDetail(ctx context.Context, in *QueryMemberStatisticsInfoDetailReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoDetailResp, error) {
	out := new(QueryMemberStatisticsInfoDetailResp)
	err := c.cc.Invoke(ctx, MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberStatisticsInfoServiceClient) QueryMemberStatisticsInfoList(ctx context.Context, in *QueryMemberStatisticsInfoListReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoListResp, error) {
	out := new(QueryMemberStatisticsInfoListResp)
	err := c.cc.Invoke(ctx, MemberStatisticsInfoService_QueryMemberStatisticsInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberStatisticsInfoServiceServer is the server API for MemberStatisticsInfoService service.
// All implementations must embed UnimplementedMemberStatisticsInfoServiceServer
// for forward compatibility
type MemberStatisticsInfoServiceServer interface {
	// 添加会员统计信息
	AddMemberStatisticsInfo(context.Context, *AddMemberStatisticsInfoReq) (*AddMemberStatisticsInfoResp, error)
	// 查询会员统计信息详情
	QueryMemberStatisticsInfoDetail(context.Context, *QueryMemberStatisticsInfoDetailReq) (*QueryMemberStatisticsInfoDetailResp, error)
	// 查询会员统计信息列表
	QueryMemberStatisticsInfoList(context.Context, *QueryMemberStatisticsInfoListReq) (*QueryMemberStatisticsInfoListResp, error)
	mustEmbedUnimplementedMemberStatisticsInfoServiceServer()
}

// UnimplementedMemberStatisticsInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberStatisticsInfoServiceServer struct {
}

func (UnimplementedMemberStatisticsInfoServiceServer) AddMemberStatisticsInfo(context.Context, *AddMemberStatisticsInfoReq) (*AddMemberStatisticsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberStatisticsInfo not implemented")
}
func (UnimplementedMemberStatisticsInfoServiceServer) QueryMemberStatisticsInfoDetail(context.Context, *QueryMemberStatisticsInfoDetailReq) (*QueryMemberStatisticsInfoDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberStatisticsInfoDetail not implemented")
}
func (UnimplementedMemberStatisticsInfoServiceServer) QueryMemberStatisticsInfoList(context.Context, *QueryMemberStatisticsInfoListReq) (*QueryMemberStatisticsInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberStatisticsInfoList not implemented")
}
func (UnimplementedMemberStatisticsInfoServiceServer) mustEmbedUnimplementedMemberStatisticsInfoServiceServer() {
}

// UnsafeMemberStatisticsInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberStatisticsInfoServiceServer will
// result in compilation errors.
type UnsafeMemberStatisticsInfoServiceServer interface {
	mustEmbedUnimplementedMemberStatisticsInfoServiceServer()
}

func RegisterMemberStatisticsInfoServiceServer(s grpc.ServiceRegistrar, srv MemberStatisticsInfoServiceServer) {
	s.RegisterService(&MemberStatisticsInfoService_ServiceDesc, srv)
}

func _MemberStatisticsInfoService_AddMemberStatisticsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberStatisticsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberStatisticsInfoServiceServer).AddMemberStatisticsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberStatisticsInfoService_AddMemberStatisticsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberStatisticsInfoServiceServer).AddMemberStatisticsInfo(ctx, req.(*AddMemberStatisticsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberStatisticsInfoDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoDetail(ctx, req.(*QueryMemberStatisticsInfoDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberStatisticsInfoService_QueryMemberStatisticsInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberStatisticsInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberStatisticsInfoService_QueryMemberStatisticsInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoList(ctx, req.(*QueryMemberStatisticsInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberStatisticsInfoService_ServiceDesc is the grpc.ServiceDesc for MemberStatisticsInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberStatisticsInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberStatisticsInfoService",
	HandlerType: (*MemberStatisticsInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberStatisticsInfo",
			Handler:    _MemberStatisticsInfoService_AddMemberStatisticsInfo_Handler,
		},
		{
			MethodName: "QueryMemberStatisticsInfoDetail",
			Handler:    _MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_Handler,
		},
		{
			MethodName: "QueryMemberStatisticsInfoList",
			Handler:    _MemberStatisticsInfoService_QueryMemberStatisticsInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberTagService_AddMemberTag_FullMethodName          = "/umsclient.MemberTagService/AddMemberTag"
	MemberTagService_DeleteMemberTag_FullMethodName       = "/umsclient.MemberTagService/DeleteMemberTag"
	MemberTagService_UpdateMemberTag_FullMethodName       = "/umsclient.MemberTagService/UpdateMemberTag"
	MemberTagService_UpdateMemberTagStatus_FullMethodName = "/umsclient.MemberTagService/UpdateMemberTagStatus"
	MemberTagService_QueryMemberTagDetail_FullMethodName  = "/umsclient.MemberTagService/QueryMemberTagDetail"
	MemberTagService_QueryMemberTagList_FullMethodName    = "/umsclient.MemberTagService/QueryMemberTagList"
)

// MemberTagServiceClient is the client API for MemberTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberTagServiceClient interface {
	// 添加用户标签表
	AddMemberTag(ctx context.Context, in *AddMemberTagReq, opts ...grpc.CallOption) (*AddMemberTagResp, error)
	// 删除用户标签表
	DeleteMemberTag(ctx context.Context, in *DeleteMemberTagReq, opts ...grpc.CallOption) (*DeleteMemberTagResp, error)
	// 更新用户标签表
	UpdateMemberTag(ctx context.Context, in *UpdateMemberTagReq, opts ...grpc.CallOption) (*UpdateMemberTagResp, error)
	// 更新用户标签表状态
	UpdateMemberTagStatus(ctx context.Context, in *UpdateMemberTagStatusReq, opts ...grpc.CallOption) (*UpdateMemberTagStatusResp, error)
	// 查询用户标签表详情
	QueryMemberTagDetail(ctx context.Context, in *QueryMemberTagDetailReq, opts ...grpc.CallOption) (*QueryMemberTagDetailResp, error)
	// 查询用户标签表列表
	QueryMemberTagList(ctx context.Context, in *QueryMemberTagListReq, opts ...grpc.CallOption) (*QueryMemberTagListResp, error)
}

type memberTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberTagServiceClient(cc grpc.ClientConnInterface) MemberTagServiceClient {
	return &memberTagServiceClient{cc}
}

func (c *memberTagServiceClient) AddMemberTag(ctx context.Context, in *AddMemberTagReq, opts ...grpc.CallOption) (*AddMemberTagResp, error) {
	out := new(AddMemberTagResp)
	err := c.cc.Invoke(ctx, MemberTagService_AddMemberTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) DeleteMemberTag(ctx context.Context, in *DeleteMemberTagReq, opts ...grpc.CallOption) (*DeleteMemberTagResp, error) {
	out := new(DeleteMemberTagResp)
	err := c.cc.Invoke(ctx, MemberTagService_DeleteMemberTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) UpdateMemberTag(ctx context.Context, in *UpdateMemberTagReq, opts ...grpc.CallOption) (*UpdateMemberTagResp, error) {
	out := new(UpdateMemberTagResp)
	err := c.cc.Invoke(ctx, MemberTagService_UpdateMemberTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) UpdateMemberTagStatus(ctx context.Context, in *UpdateMemberTagStatusReq, opts ...grpc.CallOption) (*UpdateMemberTagStatusResp, error) {
	out := new(UpdateMemberTagStatusResp)
	err := c.cc.Invoke(ctx, MemberTagService_UpdateMemberTagStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) QueryMemberTagDetail(ctx context.Context, in *QueryMemberTagDetailReq, opts ...grpc.CallOption) (*QueryMemberTagDetailResp, error) {
	out := new(QueryMemberTagDetailResp)
	err := c.cc.Invoke(ctx, MemberTagService_QueryMemberTagDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) QueryMemberTagList(ctx context.Context, in *QueryMemberTagListReq, opts ...grpc.CallOption) (*QueryMemberTagListResp, error) {
	out := new(QueryMemberTagListResp)
	err := c.cc.Invoke(ctx, MemberTagService_QueryMemberTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberTagServiceServer is the server API for MemberTagService service.
// All implementations must embed UnimplementedMemberTagServiceServer
// for forward compatibility
type MemberTagServiceServer interface {
	// 添加用户标签表
	AddMemberTag(context.Context, *AddMemberTagReq) (*AddMemberTagResp, error)
	// 删除用户标签表
	DeleteMemberTag(context.Context, *DeleteMemberTagReq) (*DeleteMemberTagResp, error)
	// 更新用户标签表
	UpdateMemberTag(context.Context, *UpdateMemberTagReq) (*UpdateMemberTagResp, error)
	// 更新用户标签表状态
	UpdateMemberTagStatus(context.Context, *UpdateMemberTagStatusReq) (*UpdateMemberTagStatusResp, error)
	// 查询用户标签表详情
	QueryMemberTagDetail(context.Context, *QueryMemberTagDetailReq) (*QueryMemberTagDetailResp, error)
	// 查询用户标签表列表
	QueryMemberTagList(context.Context, *QueryMemberTagListReq) (*QueryMemberTagListResp, error)
	mustEmbedUnimplementedMemberTagServiceServer()
}

// UnimplementedMemberTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberTagServiceServer struct {
}

func (UnimplementedMemberTagServiceServer) AddMemberTag(context.Context, *AddMemberTagReq) (*AddMemberTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberTag not implemented")
}
func (UnimplementedMemberTagServiceServer) DeleteMemberTag(context.Context, *DeleteMemberTagReq) (*DeleteMemberTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberTag not implemented")
}
func (UnimplementedMemberTagServiceServer) UpdateMemberTag(context.Context, *UpdateMemberTagReq) (*UpdateMemberTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTag not implemented")
}
func (UnimplementedMemberTagServiceServer) UpdateMemberTagStatus(context.Context, *UpdateMemberTagStatusReq) (*UpdateMemberTagStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTagStatus not implemented")
}
func (UnimplementedMemberTagServiceServer) QueryMemberTagDetail(context.Context, *QueryMemberTagDetailReq) (*QueryMemberTagDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTagDetail not implemented")
}
func (UnimplementedMemberTagServiceServer) QueryMemberTagList(context.Context, *QueryMemberTagListReq) (*QueryMemberTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTagList not implemented")
}
func (UnimplementedMemberTagServiceServer) mustEmbedUnimplementedMemberTagServiceServer() {}

// UnsafeMemberTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberTagServiceServer will
// result in compilation errors.
type UnsafeMemberTagServiceServer interface {
	mustEmbedUnimplementedMemberTagServiceServer()
}

func RegisterMemberTagServiceServer(s grpc.ServiceRegistrar, srv MemberTagServiceServer) {
	s.RegisterService(&MemberTagService_ServiceDesc, srv)
}

func _MemberTagService_AddMemberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).AddMemberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_AddMemberTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).AddMemberTag(ctx, req.(*AddMemberTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_DeleteMemberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).DeleteMemberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_DeleteMemberTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).DeleteMemberTag(ctx, req.(*DeleteMemberTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_UpdateMemberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).UpdateMemberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_UpdateMemberTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).UpdateMemberTag(ctx, req.(*UpdateMemberTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_UpdateMemberTagStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTagStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).UpdateMemberTagStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_UpdateMemberTagStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).UpdateMemberTagStatus(ctx, req.(*UpdateMemberTagStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_QueryMemberTagDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTagDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).QueryMemberTagDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_QueryMemberTagDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).QueryMemberTagDetail(ctx, req.(*QueryMemberTagDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_QueryMemberTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).QueryMemberTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_QueryMemberTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).QueryMemberTagList(ctx, req.(*QueryMemberTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberTagService_ServiceDesc is the grpc.ServiceDesc for MemberTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberTagService",
	HandlerType: (*MemberTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberTag",
			Handler:    _MemberTagService_AddMemberTag_Handler,
		},
		{
			MethodName: "DeleteMemberTag",
			Handler:    _MemberTagService_DeleteMemberTag_Handler,
		},
		{
			MethodName: "UpdateMemberTag",
			Handler:    _MemberTagService_UpdateMemberTag_Handler,
		},
		{
			MethodName: "UpdateMemberTagStatus",
			Handler:    _MemberTagService_UpdateMemberTagStatus_Handler,
		},
		{
			MethodName: "QueryMemberTagDetail",
			Handler:    _MemberTagService_QueryMemberTagDetail_Handler,
		},
		{
			MethodName: "QueryMemberTagList",
			Handler:    _MemberTagService_QueryMemberTagList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberTaskService_AddMemberTask_FullMethodName          = "/umsclient.MemberTaskService/AddMemberTask"
	MemberTaskService_DeleteMemberTask_FullMethodName       = "/umsclient.MemberTaskService/DeleteMemberTask"
	MemberTaskService_UpdateMemberTask_FullMethodName       = "/umsclient.MemberTaskService/UpdateMemberTask"
	MemberTaskService_UpdateMemberTaskStatus_FullMethodName = "/umsclient.MemberTaskService/UpdateMemberTaskStatus"
	MemberTaskService_QueryMemberTaskDetail_FullMethodName  = "/umsclient.MemberTaskService/QueryMemberTaskDetail"
	MemberTaskService_QueryMemberTaskList_FullMethodName    = "/umsclient.MemberTaskService/QueryMemberTaskList"
)

// MemberTaskServiceClient is the client API for MemberTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberTaskServiceClient interface {
	// 添加会员任务表
	AddMemberTask(ctx context.Context, in *AddMemberTaskReq, opts ...grpc.CallOption) (*AddMemberTaskResp, error)
	// 删除会员任务表
	DeleteMemberTask(ctx context.Context, in *DeleteMemberTaskReq, opts ...grpc.CallOption) (*DeleteMemberTaskResp, error)
	// 更新会员任务表
	UpdateMemberTask(ctx context.Context, in *UpdateMemberTaskReq, opts ...grpc.CallOption) (*UpdateMemberTaskResp, error)
	// 更新会员任务表状态
	UpdateMemberTaskStatus(ctx context.Context, in *UpdateMemberTaskStatusReq, opts ...grpc.CallOption) (*UpdateMemberTaskStatusResp, error)
	// 查询会员任务表详情
	QueryMemberTaskDetail(ctx context.Context, in *QueryMemberTaskDetailReq, opts ...grpc.CallOption) (*QueryMemberTaskDetailResp, error)
	// 查询会员任务表列表
	QueryMemberTaskList(ctx context.Context, in *QueryMemberTaskListReq, opts ...grpc.CallOption) (*QueryMemberTaskListResp, error)
}

type memberTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberTaskServiceClient(cc grpc.ClientConnInterface) MemberTaskServiceClient {
	return &memberTaskServiceClient{cc}
}

func (c *memberTaskServiceClient) AddMemberTask(ctx context.Context, in *AddMemberTaskReq, opts ...grpc.CallOption) (*AddMemberTaskResp, error) {
	out := new(AddMemberTaskResp)
	err := c.cc.Invoke(ctx, MemberTaskService_AddMemberTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) DeleteMemberTask(ctx context.Context, in *DeleteMemberTaskReq, opts ...grpc.CallOption) (*DeleteMemberTaskResp, error) {
	out := new(DeleteMemberTaskResp)
	err := c.cc.Invoke(ctx, MemberTaskService_DeleteMemberTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) UpdateMemberTask(ctx context.Context, in *UpdateMemberTaskReq, opts ...grpc.CallOption) (*UpdateMemberTaskResp, error) {
	out := new(UpdateMemberTaskResp)
	err := c.cc.Invoke(ctx, MemberTaskService_UpdateMemberTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) UpdateMemberTaskStatus(ctx context.Context, in *UpdateMemberTaskStatusReq, opts ...grpc.CallOption) (*UpdateMemberTaskStatusResp, error) {
	out := new(UpdateMemberTaskStatusResp)
	err := c.cc.Invoke(ctx, MemberTaskService_UpdateMemberTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) QueryMemberTaskDetail(ctx context.Context, in *QueryMemberTaskDetailReq, opts ...grpc.CallOption) (*QueryMemberTaskDetailResp, error) {
	out := new(QueryMemberTaskDetailResp)
	err := c.cc.Invoke(ctx, MemberTaskService_QueryMemberTaskDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) QueryMemberTaskList(ctx context.Context, in *QueryMemberTaskListReq, opts ...grpc.CallOption) (*QueryMemberTaskListResp, error) {
	out := new(QueryMemberTaskListResp)
	err := c.cc.Invoke(ctx, MemberTaskService_QueryMemberTaskList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberTaskServiceServer is the server API for MemberTaskService service.
// All implementations must embed UnimplementedMemberTaskServiceServer
// for forward compatibility
type MemberTaskServiceServer interface {
	// 添加会员任务表
	AddMemberTask(context.Context, *AddMemberTaskReq) (*AddMemberTaskResp, error)
	// 删除会员任务表
	DeleteMemberTask(context.Context, *DeleteMemberTaskReq) (*DeleteMemberTaskResp, error)
	// 更新会员任务表
	UpdateMemberTask(context.Context, *UpdateMemberTaskReq) (*UpdateMemberTaskResp, error)
	// 更新会员任务表状态
	UpdateMemberTaskStatus(context.Context, *UpdateMemberTaskStatusReq) (*UpdateMemberTaskStatusResp, error)
	// 查询会员任务表详情
	QueryMemberTaskDetail(context.Context, *QueryMemberTaskDetailReq) (*QueryMemberTaskDetailResp, error)
	// 查询会员任务表列表
	QueryMemberTaskList(context.Context, *QueryMemberTaskListReq) (*QueryMemberTaskListResp, error)
	mustEmbedUnimplementedMemberTaskServiceServer()
}

// UnimplementedMemberTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberTaskServiceServer struct {
}

func (UnimplementedMemberTaskServiceServer) AddMemberTask(context.Context, *AddMemberTaskReq) (*AddMemberTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberTask not implemented")
}
func (UnimplementedMemberTaskServiceServer) DeleteMemberTask(context.Context, *DeleteMemberTaskReq) (*DeleteMemberTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberTask not implemented")
}
func (UnimplementedMemberTaskServiceServer) UpdateMemberTask(context.Context, *UpdateMemberTaskReq) (*UpdateMemberTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTask not implemented")
}
func (UnimplementedMemberTaskServiceServer) UpdateMemberTaskStatus(context.Context, *UpdateMemberTaskStatusReq) (*UpdateMemberTaskStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTaskStatus not implemented")
}
func (UnimplementedMemberTaskServiceServer) QueryMemberTaskDetail(context.Context, *QueryMemberTaskDetailReq) (*QueryMemberTaskDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTaskDetail not implemented")
}
func (UnimplementedMemberTaskServiceServer) QueryMemberTaskList(context.Context, *QueryMemberTaskListReq) (*QueryMemberTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTaskList not implemented")
}
func (UnimplementedMemberTaskServiceServer) mustEmbedUnimplementedMemberTaskServiceServer() {}

// UnsafeMemberTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberTaskServiceServer will
// result in compilation errors.
type UnsafeMemberTaskServiceServer interface {
	mustEmbedUnimplementedMemberTaskServiceServer()
}

func RegisterMemberTaskServiceServer(s grpc.ServiceRegistrar, srv MemberTaskServiceServer) {
	s.RegisterService(&MemberTaskService_ServiceDesc, srv)
}

func _MemberTaskService_AddMemberTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).AddMemberTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_AddMemberTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).AddMemberTask(ctx, req.(*AddMemberTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_DeleteMemberTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).DeleteMemberTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_DeleteMemberTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).DeleteMemberTask(ctx, req.(*DeleteMemberTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_UpdateMemberTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).UpdateMemberTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_UpdateMemberTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).UpdateMemberTask(ctx, req.(*UpdateMemberTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_UpdateMemberTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTaskStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).UpdateMemberTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_UpdateMemberTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).UpdateMemberTaskStatus(ctx, req.(*UpdateMemberTaskStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_QueryMemberTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTaskDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).QueryMemberTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_QueryMemberTaskDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).QueryMemberTaskDetail(ctx, req.(*QueryMemberTaskDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_QueryMemberTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).QueryMemberTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_QueryMemberTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).QueryMemberTaskList(ctx, req.(*QueryMemberTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberTaskService_ServiceDesc is the grpc.ServiceDesc for MemberTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberTaskService",
	HandlerType: (*MemberTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberTask",
			Handler:    _MemberTaskService_AddMemberTask_Handler,
		},
		{
			MethodName: "DeleteMemberTask",
			Handler:    _MemberTaskService_DeleteMemberTask_Handler,
		},
		{
			MethodName: "UpdateMemberTask",
			Handler:    _MemberTaskService_UpdateMemberTask_Handler,
		},
		{
			MethodName: "UpdateMemberTaskStatus",
			Handler:    _MemberTaskService_UpdateMemberTaskStatus_Handler,
		},
		{
			MethodName: "QueryMemberTaskDetail",
			Handler:    _MemberTaskService_QueryMemberTaskDetail_Handler,
		},
		{
			MethodName: "QueryMemberTaskList",
			Handler:    _MemberTaskService_QueryMemberTaskList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}
